
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\nhs\plot_spectrum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_nhs_plot_spectrum.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_nhs_plot_spectrum.py:


SART - by gram type
-------------------

.. todo: Simplify and explain

.. GENERATED FROM PYTHON SOURCE LINES 7-219



.. image:: /_examples/nhs/images/sphx_glr_plot_spectrum_001.png
    :alt: plot spectrum
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
         dateReceived organismCode antibioticCode sensitivity
    0      2009-03-01         ENTC           AAMO   sensitive
    1      2009-03-01         ENTC           AAUG   sensitive
    2      2009-03-01         ENTC          ACELX   resistant
    3      2009-03-01         ENTC           ACIP   resistant
    4      2009-03-01         ENTC           ANIT   sensitive
    ...           ...          ...            ...         ...
    5147   2016-01-11         ECOL           ATAZ   sensitive
    5148   2016-01-11         ECOL           ATEM   sensitive
    5149   2016-01-11         ECOL           ATIG   sensitive
    5150   2016-01-11         ECOL           ATOB   sensitive
    5151   2016-01-11         ECOL           ATRI   sensitive

    [3510472 rows x 4 columns]


    Data ASAI:
               N_GENUS       N_SPECIE       ASAI_SCORE        
    gram             n     p        n     p          n       p
    ANTIBIOTIC                                                
    AAMI          13.0   8.0     47.0  22.0     0.8782  0.9427
    AAMO          13.0  10.0     48.0  45.0     0.2656  0.5647
    AAMPC          9.0   4.0     20.0   6.0     0.3333  0.5833
    AAUG          14.0   9.0     47.0  42.0     0.5473  0.7963
    AAZI           4.0   NaN      9.0   NaN     0.4375     NaN
    AAZT          11.0   7.0     39.0  10.0     0.6364  0.9286
    ABAC           3.0   4.0      4.0  18.0     0.3333  0.7500
    ACAZ          13.0   7.0     50.0  15.0     0.7265  0.5476
    ACELX          7.0   6.0     15.0  29.0     0.2857  0.5595
    ACHL          13.0   6.0     41.0  29.0     0.5615  0.5776






|

.. code-block:: default
   :lineno-start: 8


    # Import libraries
    import sys
    import glob
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.datasets import load
    from pyamr.core.freq import Frequency
    from pyamr.core.sari import SARI
    from pyamr.core.asai import ASAI

    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)


    # -------------------------
    # load suspcetibility data
    # -------------------------
    path_sus = '../../resources/data/nhs/susceptibility/complete/'
    path_abx = '../../resources/data/nhs/antibiotics/antibiotics.csv'
    path_org = '../../resources/data/nhs/organisms/organisms.csv'

    # Interesting columns
    usecols = ['dateReceived',
               'organismCode',
               'antibioticCode',
               'sensitivity']

    # Load all files
    data = pd.concat([  \
        pd.read_csv(f, parse_dates=['dateReceived'],
            usecols=usecols) for f in glob.glob(path_sus + "/*.csv")])

    # Filter for two examples
    #is_org = data['organismCode']=='ECOL'
    #is_abx = data['antibioticCode'].isin(['ATAZ', 'AMER'])
    #data = data[is_abx & is_org]


    # Show
    print("\nData:")
    print(data)


    # --------------------
    # compute frequencies
    # --------------------
    # Create instance
    freq = Frequency(column_antibiotic='antibioticCode',
                     column_organism='organismCode',
                     column_date='dateReceived',
                     column_outcome='sensitivity')

    # Compute frequencies overall
    freq_overall = freq.compute(data, strategy='overall', 
                                      by_category='pairs')

    # ------------------------
    # compute resistance index
    # ------------------------
    sari_overall = SARI(strategy='medium').compute(freq_overall)


    # ------------------------
    # format dataframe
    # ------------------------

    def create_mapper(dataframe, column_key, column_value):
      """This method constructs a mapper

      Parameters
      ----------
      dataframe: dataframe-like
        The dataframe from which the columns are extracted

      column_key: string-like
        The name of the column with the values for the keys of the mapper

      column_value: string-like
        The name of the column with the values for the values of the mapper

      Returns
      -------
      dictionary
      """
      dataframe = dataframe[[column_key, column_value]]
      dataframe = dataframe.drop_duplicates()
      return dict(zip(dataframe[column_key], dataframe[column_value]))

    # Load datasets
    antibiotics = pd.read_csv(path_abx)
    organisms = pd.read_csv(path_org)

    # Create mappers
    abx_map = create_mapper(antibiotics, 'antibioticCode', 'antibioticClass')
    org_map = create_mapper(organisms, 'organismCode', 'specieName')
    grm_map = create_mapper(organisms, 'organismCode', 'gramType')

    # Copy dataframe
    dataframe = sari_overall.copy(deep=True)
    dataframe = dataframe.reset_index()

    # Include categories
    dataframe['category'] = dataframe['ANTIBIOTIC'].map(abx_map)
    dataframe['genus'] = dataframe['SPECIE'].map(org_map)
    dataframe['gram'] = dataframe['SPECIE'].map(grm_map)

    # ------------------------
    # compute spectrum index
    # ------------------------
    # Create antimicrobial spectrum of activity instance
    asai = ASAI(weights='uniform', threshold=0.05,
                                   column_genus='genus',
                                   column_specie='SPECIE',
                                   column_antibiotic='ANTIBIOTIC',
                                   column_resistance='sari')

    # Compute
    scores = asai.compute(dataframe, by_category='gram')

    # Show scores
    print("\n\nData ASAI:")
    print(scores.head(10))

    # ---------------------------------------
    # plot
    # ---------------------------------------
    def scalar_colormap(values, cmap, vmin, vmax):
       """This method creates a colormap based on values.

       Parameters
       ----------
       values : array-like
         The values to create the corresponding colors

       cmap : str
         The colormap

       vmin, vmax : float
         The minimum and maximum possible values

       Returns
       -------
       scalar colormap
       """
       # Create scalar mappable
       norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
       mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
       # Gete color map
       colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
       # Return
       return colormap


    # Sort
    scores = scores.fillna(0.0)
    scores['width'] = np.abs(scores['ASAI_SCORE']['n']+scores['ASAI_SCORE']['p'])
    scores['gmean'] = np.sqrt(scores['ASAI_SCORE']['n']*scores['ASAI_SCORE']['p'])
    scores = scores.sort_values(by='gmean', ascending=False)

    # Variables to plot.
    x = scores.index.values
    y_n = scores['ASAI_SCORE']['n'].values
    y_p = scores['ASAI_SCORE']['p'].values

    # Constants
    colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
    colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)

    # ----------
    # Example
    # ----------
    # This example shows a diverging figure using exclusively the gram-positive
    # and gram-negative categories. Note that the gram negative categories has
    # values in the range [-1,0] while the gram-positive category has values
    # within the range [0, 1]
    # Create figure
    f, ax = plt.subplots(1, 1, figsize=(3, 9))

    # Plot
    sns.barplot(x=y_p, y=x, palette=colormap_p, ax=ax, orient='h',
     saturation=0.5, label='Gram-positive')
    sns.barplot(x=-y_n, y=x, palette=colormap_n, ax=ax, orient='h',
     saturation=0.5, label='Gram-negative')

    # Configure
    sns.despine(bottom=True)

    # Show legend.
    plt.legend(loc=8)
    plt.subplots_adjust(left=0.4, right=0.9, bottom=0.05, top=0.98)

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.556 seconds)


.. _sphx_glr_download__examples_nhs_plot_spectrum.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_spectrum.py <plot_spectrum.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_spectrum.ipynb <plot_spectrum.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

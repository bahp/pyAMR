
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\nhs\plot_antibiogram.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_nhs_plot_antibiogram.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_nhs_plot_antibiogram.py:


SARI - Antibiogram
------------------

.. todo:: Explain and Simplify

.. todo: Frequency might not be working?
         Frequency can be computed as sum of columns.

.. GENERATED FROM PYTHON SOURCE LINES 11-179



.. image:: /_examples/nhs/images/sphx_glr_plot_antibiogram_001.png
    :alt: Antibiogram (euclidean, weighted)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\kelda\desktop\repositories\virtualenvs\venvpy39-datablend\lib\site-packages\sphinx_gallery\gen_gallery.py:201: DtypeWarning: Columns (11) have mixed types.Specify dtype option on import or set low_memory=False.
      return 0., func()
    c:\users\kelda\desktop\repositories\virtualenvs\venvpy39-datablend\lib\site-packages\sphinx_gallery\gen_gallery.py:201: DtypeWarning: Columns (8) have mixed types.Specify dtype option on import or set low_memory=False.
      return 0., func()

    Data:
         dateReceived orderCode      orderName      specimenType labNumber patNumber      organismName organismCode  antibioticName antibioticCode sensitivity
    0      2009-03-01    URICUL            NaN  mid stream urine   X429162  01230911  enterococcus sp.         ENTC     amoxycillin           AAMO   sensitive
    1      2009-03-01    URICUL            NaN  mid stream urine   X429162  01230911  enterococcus sp.         ENTC       augmentin           AAUG   sensitive
    2      2009-03-01    URICUL            NaN  mid stream urine   X429162  01230911  enterococcus sp.         ENTC      cephalexin          ACELX   resistant
    3      2009-03-01    URICUL            NaN  mid stream urine   X429162  01230911  enterococcus sp.         ENTC   ciprofloxacin           ACIP   resistant
    4      2009-03-01    URICUL            NaN  mid stream urine   X429162  01230911  enterococcus sp.         ENTC  nitrofurantoin           ANIT   sensitive
    ...           ...       ...            ...               ...       ...       ...               ...          ...             ...            ...         ...
    5147   2016-01-11    BLDCUL  blood culture             blood  X1721650  30402338  escherichia coli         ECOL         tazocin           ATAZ   sensitive
    5148   2016-01-11    BLDCUL  blood culture             blood  X1721650  30402338  escherichia coli         ECOL      temocillin           ATEM   sensitive
    5149   2016-01-11    BLDCUL  blood culture             blood  X1721650  30402338  escherichia coli         ECOL     tigecycline           ATIG   sensitive
    5150   2016-01-11    BLDCUL  blood culture             blood  X1721650  30402338  escherichia coli         ECOL      tobramycin           ATOB   sensitive
    5151   2016-01-11    BLDCUL  blood culture             blood  X1721650  30402338  escherichia coli         ECOL    trimethoprim           ATRI   sensitive

    [3510472 rows x 11 columns]

    Frequencies:
    SENSITIVITY        <<do not report>>  highly resistant  intermediate  not done  resistant  sensitive  validation fix entry
    SPECIE ANTIBIOTIC                                                                                                         
    ABAU   AAMI                      0.0               0.0           9.0       0.0      350.0      560.0                   0.0
           AAMO                      0.0               0.0           2.0       0.0      724.0       30.0                   0.0
           AAMPC                     0.0               0.0           0.0       0.0       33.0       81.0                   0.0
           AAUG                      0.0               0.0           6.0       1.0      629.0      203.0                   0.0
           AAZT                      0.0               0.0           7.0       0.0      521.0       16.0                   0.0
           ABAC                      0.0               0.0           0.0       0.0        3.0        1.0                   0.0
           ACAZ                      0.0               0.0          58.0       0.0      718.0       48.0                   0.0
           ACELX                     0.0               0.0           0.0       1.0       90.0        0.0                   0.0
           ACHL                      0.0               0.0           0.0       0.0       26.0        4.0                   0.0
           ACIP                      0.0               0.0           8.0       0.0      544.0      463.0                   0.0

    SARI:
    SENSITIVITY        <<do not report>>  highly resistant  intermediate  not done  resistant  sensitive  validation fix entry    sari
    SPECIE ANTIBIOTIC                                                                                                                 
    ABAU   AAMI                      0.0               0.0           9.0       0.0      350.0      560.0                   0.0  0.3846
           AAMO                      0.0               0.0           2.0       0.0      724.0       30.0                   0.0  0.9602
           AAMPC                     0.0               0.0           0.0       0.0       33.0       81.0                   0.0  0.2895
           AAUG                      0.0               0.0           6.0       1.0      629.0      203.0                   0.0  0.7560
           AAZT                      0.0               0.0           7.0       0.0      521.0       16.0                   0.0  0.9702
           ABAC                      0.0               0.0           0.0       0.0        3.0        1.0                   0.0  0.7500
           ACAZ                      0.0               0.0          58.0       0.0      718.0       48.0                   0.0  0.9373
           ACELX                     0.0               0.0           0.0       1.0       90.0        0.0                   0.0  1.0000
           ACHL                      0.0               0.0           0.0       0.0       26.0        4.0                   0.0  0.8667
           ACIP                      0.0               0.0           8.0       0.0      544.0      463.0                   0.0  0.5402
    SENSITIVITY                                         SARI
    SPECIE ANTIBIOTIC GENUS         CATEGORY                
    ABAU   AAMI       acinetobacter aminoglycosides   0.3846
           AAMO       acinetobacter aminopenicillins  0.9602
           AAMPC      acinetobacter _na               0.2895
           AAUG       acinetobacter _na               0.7560
           AAZT       acinetobacter monobactams       0.9702
    ...                                                  ...
    YSTPCA ATET       NaN           tetracyclines     0.5000
           ATIG       NaN           tetracyclines     0.0000
           ATRI       NaN           _na               0.0000
           AVAN       NaN           glycopeptide      0.5000
           AVOR       NaN           _na               0.0000

    [6728 rows x 1 columns]
    Total records
    3507578.0






|

.. code-block:: default
   :lineno-start: 12


    # Libraries
    import sys
    import glob
    import numpy as np 
    import pandas as pd 
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import own libraries
    from pyamr.datasets import load
    from pyamr.core.freq import Frequency
    from pyamr.core.sari import SARI
    from pyamr.graphics.antibiogram import Antibiogram

    # -------------------------
    # Configuration
    # -------------------------
    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)


    # -------------------------------
    # Load data
    # -------------------------------
    # Load
    #dataframe = pd.read_csv('../_data/data-antibiogram.csv')
    # Path to susceptibility data
    path_sus = '../../resources/data/nhs/susceptibility/complete/'
    path_abx = '../../resources/data/nhs/antibiotics/antibiotics.csv'
    path_org = '../../resources/data/nhs/organisms/organisms.csv'

    # Interesting columns
    usecols = ['dateReceived',
               'orderCode',
               'orderName',
               'specimenType',
               'labNumber',
               'patNumber',
               'organismName',
               'organismCode',
               'antibioticName',
               'antibioticCode',
               'sensitivity']

    # Load all files
    dataframe = pd.concat([  \
        pd.read_csv(f, parse_dates=['dateReceived'],
            usecols=usecols) for f in glob.glob(path_sus + "/*.csv")])

    # Show
    print("\nData:")
    print(dataframe)


    # --------------------
    # compute frequencies
    # --------------------
    # Create instance
    freq = Frequency(column_antibiotic='antibioticCode',
                     column_organism='organismCode',
                     column_date='dateReceived',
                     column_outcome='sensitivity')

    # Compute frequencies overall
    freq_overall = freq.compute(dataframe, strategy='overall',
                                           by_category='pairs')

    # Show
    print("\nFrequencies:")
    print(freq_overall.head(10))

    # ------------------------
    # compute resistance index
    # ------------------------
    # Compute sari
    sari_overall = SARI(strategy='medium').compute(freq_overall)

    # Show
    print("\nSARI:")
    print(sari_overall.head(10))


    # ------------------------
    # format dataframe
    # ------------------------
    def create_mapper(dataframe, column_key, column_value):
      """This method constructs a mapper

      Parameters
      ----------
      dataframe: dataframe-like
        The dataframe from which the columns are extracted

      column_key: string-like
        The name of the column with the values for the keys of the mapper

      column_value: string-like
        The name of the column with the values for the values of the mapper

      Returns
      -------
      dictionary
      """
      dataframe = dataframe[[column_key, column_value]]
      dataframe = dataframe.drop_duplicates()
      return dict(zip(dataframe[column_key], dataframe[column_value]))

    # Load datasets
    antibiotics = pd.read_csv(path_abx)
    organisms = pd.read_csv(path_org)

    # Create mappers
    abx_map = create_mapper(antibiotics, 'antibioticCode', 'antibioticClass')
    org_map = create_mapper(organisms, 'organismCode', 'specieName')

    # Copy dataframe
    dataframe = sari_overall.copy(deep=True)
    dataframe = dataframe.reset_index()


    # Include categories
    dataframe['category'] = dataframe['ANTIBIOTIC'].map(abx_map)
    dataframe['genus'] = dataframe['SPECIE'].map(org_map)

    # ------------------------
    # create antibiogram
    # ------------------------
    # Antibiogram plotter
    antibiogram = Antibiogram(column_organism='SPECIE',
                              column_antibiotic='ANTIBIOTIC',
                              column_genus='genus',
                              column_category='category',
                              column_index='sari')

    # Fit antibiogram
    antibiogram = antibiogram.fit(dataframe)

    # ---------
    # Example 1
    # ----------
    antibiogram.plot(genera=['staphylococcus',
                              'klebsiella',
                              'streptococcus',
                              'enterococcus'],
                     method='weighted',
                     metric='euclidean',
                     figsize=(15,8))

    print("Total records")
    print(dataframe[['intermediate', 'resistant', 'sensitive']].sum().sum())

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.134 seconds)


.. _sphx_glr_download__examples_nhs_plot_antibiogram.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_antibiogram.py <plot_antibiogram.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_antibiogram.ipynb <plot_antibiogram.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/reports/mimic/plot_spectrum_multiple.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_reports_mimic_plot_spectrum_multiple.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_reports_mimic_plot_spectrum_multiple.py:


SART - Spectrum (multiple)
--------------------------

.. todo: Simplify and explain

.. GENERATED FROM PYTHON SOURCE LINES 7-220



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_spectrum_multiple_001.png
          :alt: ABSCESS, Gram-positive, Gram-negative, Gram-unknown
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_spectrum_multiple_002.png
          :alt: BLOOD CULTURE, Gram-positive, Gram-negative, Gram-unknown
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_spectrum_multiple_003.png
          :alt: SWAB, Gram-positive, Gram-negative, Gram-unknown
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_spectrum_multiple_004.png
          :alt: TISSUE, Gram-positive, Gram-negative, Gram-unknown
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_spectrum_multiple_005.png
          :alt: URINE, Gram-positive, Gram-negative, Gram-unknown
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



    Data ASAI (ABSCESS):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin          6.0  NaN   3.0      7.0   NaN   3.0     0.7500     NaN  0.3333
    Cefepime         10.0  NaN   9.0     15.0   NaN  12.0     0.7500     NaN  0.8611
    Ceftazidime       9.0  NaN  10.0     14.0   NaN  13.0     0.6389     NaN  0.7750
    Ceftriaxone       9.0  1.0  12.0     15.0   7.0  16.0     0.7500  1.0000  0.8889
    Cefuroxime        3.0  1.0   NaN      4.0   1.0   NaN     0.6667  1.0000     NaN
    Ciprofloxacin    10.0  1.0  10.0     17.0   1.0  13.0     0.6600  1.0000  0.8000
    Clindamycin       1.0  3.0   6.0      1.0  11.0   8.0     1.0000  0.7000  0.2222
    Daptomycin        NaN  1.0   3.0      NaN   2.0   3.0        NaN  1.0000  1.0000
    Erythromycin      NaN  3.0   5.0      NaN  10.0   7.0        NaN  0.2222  0.2667
    Gentamicin       10.0  3.0  11.0     17.0   6.0  14.0     0.7500  0.8333  0.9091


    Data ASAI (BLOOD CULTURE):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin          9.0  NaN  14.0     16.0   NaN  19.0     0.9222     NaN  0.8214
    Cefepime         10.0  NaN  25.0     30.0   NaN  42.0     0.7071     NaN  0.7100
    Ceftazidime      12.0  1.0  20.0     32.0   1.0  39.0     0.4504  1.0000  0.6042
    Ceftriaxone      12.0  3.0  34.0     36.0  23.0  48.0     0.7004  0.6508  0.7745
    Cefuroxime        3.0  NaN   4.0      4.0   NaN   7.0     0.3333     NaN  0.8333
    Ciprofloxacin    13.0  2.0  31.0     35.0   5.0  49.0     0.7115  0.7500  0.7527
    Clindamycin       4.0  8.0  16.0      6.0  50.0  22.0     0.7500  0.5866  0.6875
    Daptomycin        NaN  5.0   4.0      NaN  25.0   5.0        NaN  1.0000  1.0000
    Erythromycin      1.0  7.0  11.0      1.0  44.0  14.0     1.0000  0.5138  0.2727
    Gentamicin       11.0  4.0  25.0     32.0  22.0  40.0     0.7792  0.8456  0.7433


    Data ASAI (SWAB):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin          6.0  NaN   7.0     10.0   NaN  10.0     0.8333     NaN  0.5714
    Cefepime          8.0  NaN  16.0     27.0   NaN  27.0     0.7009     NaN  0.7812
    Ceftazidime      10.0  NaN  17.0     29.0   NaN  27.0     0.6071     NaN  0.6225
    Ceftriaxone      10.0  1.0  19.0     25.0   4.0  29.0     0.8071  0.7500  0.8026
    Cefuroxime        4.0  NaN   1.0      5.0   NaN   2.0     0.5000     NaN  0.5000
    Ciprofloxacin     8.0  1.0  17.0     27.0   1.0  26.0     0.5372  1.0000  0.8088
    Clindamycin       NaN  4.0   5.0      NaN  11.0   8.0        NaN  0.4750  0.0667
    Daptomycin        NaN  3.0   2.0      NaN   8.0   2.0        NaN  1.0000  1.0000
    Erythromycin      NaN  3.0   5.0      NaN  11.0   7.0        NaN  0.2667  0.0667
    Gentamicin        8.0  3.0  21.0     27.0  10.0  28.0     0.5729  0.8333  0.8333


    Data ASAI (TISSUE):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin          6.0  NaN   5.0      7.0   NaN   6.0     0.8333     NaN  0.4000
    Cefepime          8.0  NaN  11.0     21.0   NaN  20.0     0.6458     NaN  0.6364
    Ceftazidime       9.0  NaN  11.0     21.0   NaN  20.0     0.4167     NaN  0.7045
    Ceftriaxone       8.0  3.0  14.0     20.0   8.0  21.0     0.6250  0.6667  0.8333
    Cefuroxime        3.0  NaN   1.0      4.0   NaN   1.0     1.0000     NaN  1.0000
    Ciprofloxacin     8.0  2.0  12.0     22.0   3.0  19.0     0.5625  0.7500  0.7639
    Clindamycin       1.0  4.0   5.0      1.0  13.0   8.0     1.0000  0.7333  0.2000
    Daptomycin        NaN  3.0   4.0      NaN   8.0   4.0        NaN  1.0000  1.0000
    Erythromycin      NaN  3.0   4.0      NaN  12.0   7.0        NaN  0.3000  0.0000
    Gentamicin        8.0  4.0  13.0     22.0  13.0  22.0     0.5938  0.9722  0.7115


    Data ASAI (URINE):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin          7.0  NaN   6.0     14.0   NaN  10.0     0.8214     NaN  0.6667
    Cefepime         10.0  1.0  13.0     36.0   1.0  27.0     0.7833  0.0000  0.5308
    Ceftazidime      12.0  1.0  14.0     37.0   1.0  30.0     0.5104  1.0000  0.3929
    Ceftriaxone      11.0  2.0  16.0     41.0   3.0  28.0     0.6250  1.0000  0.5437
    Cefuroxime        3.0  NaN   2.0      6.0   NaN   2.0     0.6111     NaN  1.0000
    Ciprofloxacin    12.0  3.0  18.0     39.0   4.0  31.0     0.5208  0.6667  0.5537
    Clindamycin       1.0  2.0   5.0      1.0   4.0   6.0     1.0000  1.0000  0.3000
    Daptomycin        1.0  1.0   3.0      1.0   4.0   3.0     1.0000  1.0000  1.0000
    Erythromycin      NaN  3.0   5.0      NaN   5.0   6.0        NaN  0.6667  0.1000
    Gentamicin       10.0  3.0  16.0     37.0  10.0  30.0     0.5650  0.7857  0.7063






|

.. code-block:: default
   :lineno-start: 8


    # Import libraries
    import sys
    import glob
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.core.freq import Frequency
    from pyamr.core.sari import SARI
    from pyamr.core.asai import ASAI
    from pyamr.datasets.load import load_data_mimic

    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)


    # --------------------------------------------------------------------
    #                             Methods
    # --------------------------------------------------------------------
    def scalar_colormap(values, cmap, vmin, vmax):
        """This method creates a colormap based on values.

        Parameters
        ----------
        values : array-like
          The values to create the corresponding colors

        cmap : str
          The colormap

        vmin, vmax : float
          The minimum and maximum possible values

        Returns
        -------
        scalar colormap
        """
        # Create scalar mappable
        norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
        mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
        # Gete color map
        colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
        # Return
        return colormap


    def create_mapper(dataframe, column_key, column_value):
        """This method constructs a mapper

        Parameters
        ----------
        dataframe: dataframe-like
        The dataframe from which the columns are extracted

        column_key: string-like
        The name of the column with the values for the keys of the mapper

        column_value: string-like
        The name of the column with the values for the values of the mapper

        Returns
        -------
        dictionary
        """
        dataframe = dataframe[[column_key, column_value]]
        dataframe = dataframe.drop_duplicates()
        return dict(zip(dataframe[column_key], dataframe[column_value]))


    # --------------------------------------------------------------------
    #                               Main
    # --------------------------------------------------------------------
    # Load data
    data, antibiotics, organisms = load_data_mimic()

    # Count records per specimen code
    specimen_code_count = data \
        .specimen_code.value_counts(normalize=True) \
        .sort_values(ascending=False)

    # Filter most frequent specimens
    data = data[data.specimen_code.isin( \
        specimen_code_count.index.values[:5])]

    # Loop for each specimen
    for specimen_code, df in data.groupby(by='specimen_code'):

        # ----------------------------
        # Compute frequencies and SARI
        # ----------------------------
        # Create instance
        freq = Frequency(column_antibiotic='antimicrobial_code',
                         column_organism='microorganism_code',
                         column_date='date_received',
                         column_outcome='sensitivity')

        # Compute frequencies overall
        freq_overall = freq.compute(df, strategy='overall',
                                        by_category='pairs')

        # Compute sari
        sari_overall = SARI(strategy='medium').compute(freq_overall)

        # ------------------------
        # Format dataframe
        #-------------------------
        # Create mappers
        abx_map = create_mapper(antibiotics, 'antimicrobial_code', 'category')
        org_map = create_mapper(organisms, 'microorganism_code', 'genus')
        grm_map = create_mapper(organisms, 'microorganism_code', 'gram_stain')
        name_map = create_mapper(antibiotics, 'antimicrobial_code', 'name')

        # Copy dataframe
        dataframe = sari_overall.copy(deep=True)
        dataframe = dataframe.reset_index()

        # Include categories
        dataframe['category'] = dataframe['ANTIBIOTIC'].map(abx_map)
        dataframe['genus'] = dataframe['SPECIE'].map(org_map)
        dataframe['gram'] = dataframe['SPECIE'].map(grm_map)
        dataframe['ANTIBIOTIC'] = dataframe.ANTIBIOTIC.map(name_map)

        # Empty grams are a new category (unknown - u)
        dataframe.gram = dataframe.gram.fillna('u')

        # ------------------------
        # Compute spectrum index
        # ------------------------
        # Create antimicrobial spectrum of activity instance
        asai = ASAI(weights='uniform', threshold=0.05,
                                       column_genus='genus',
                                       column_specie='SPECIE',
                                       column_antibiotic='ANTIBIOTIC',
                                       column_resistance='sari')

        # Compute
        scores = asai.compute(dataframe, by_category='gram')

        # Show scores
        print("\n\nData ASAI (%s):" % specimen_code)
        print(scores.head(10))

        # Sort
        scores = scores.fillna(0.0)
        scores['width'] = np.abs(scores['ASAI_SCORE']['n']+scores['ASAI_SCORE']['p'])
        scores['gmean'] = np.sqrt(scores['ASAI_SCORE']['n']*scores['ASAI_SCORE']['p'])
        scores = scores.sort_values(by='gmean', ascending=False)

        # Variables to plot.
        x = scores.index.values
        y_n = scores['ASAI_SCORE']['n'].values
        y_p = scores['ASAI_SCORE']['p'].values
        y_u = scores['ASAI_SCORE']['u'].values

        # Constants
        colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
        colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)
        colormap_u = scalar_colormap(y_u, cmap='Greens', vmin=-0.1, vmax=1.1)

        # ----------
        # Example
        # ----------
        # This example shows a diverging figure using exclusively the gram-positive
        # and gram-negative categories. Note that the gram negative categories has
        # values in the range [-1,0] while the gram-positive category has values
        # within the range [0, 1]
        # Create figure
        f, axes = plt.subplots(1, 3, figsize=(7, 6), sharey=True)

        # Plot
        sns.barplot(x=y_p, y=x, palette=colormap_p, ax=axes[0], orient='h',
         saturation=0.5, label='Gram-positive')
        sns.barplot(x=y_n, y=x, palette=colormap_n, ax=axes[1], orient='h',
         saturation=0.5, label='Gram-negative')
        sns.barplot(x=y_u, y=x, palette=colormap_u, ax=axes[2], orient='h',
          saturation=0.5, label='Gram-unknown')

        # Configure
        sns.despine(bottom=True)

        # Set x-axis
        axes[0].set_xlim([0, 1.1])
        axes[1].set_xlim([0, 1.1])
        axes[2].set_xlim([0, 1.1])

        # Set title
        axes[0].set_title('Gram-positive')
        axes[1].set_title('Gram-negative')
        axes[2].set_title('Gram-unknown')

        # Show legend.
        plt.suptitle(specimen_code)
        plt.tight_layout()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.587 seconds)


.. _sphx_glr_download__examples_reports_mimic_plot_spectrum_multiple.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_spectrum_multiple.py <plot_spectrum_multiple.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_spectrum_multiple.ipynb <plot_spectrum_multiple.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\reports\mimic\plot_sari_relmap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_reports_mimic_plot_sari_relmap.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_reports_mimic_plot_sari_relmap.py:


SARI - Antibiogram (relmap)
---------------------------

.. todo:: Explain and Simplify

.. todo: Frequency might not be working?
         Frequency can be computed as sum of columns.

.. GENERATED FROM PYTHON SOURCE LINES 11-130



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_sari_relmap_001.png
          :alt: ABSCESS, Antibiogram (with frequency)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_sari_relmap_002.png
          :alt: BLOOD CULTURE, Antibiogram (with frequency)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_sari_relmap_003.png
          :alt: SWAB, Antibiogram (with frequency)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_sari_relmap_004.png
          :alt: Staph aureus Screen, Antibiogram (with frequency)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/mimic/images/sphx_glr_plot_sari_relmap_005.png
          :alt: URINE, Antibiogram (with frequency)
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    SARI (overall):
    sensitivity                                               P  intermediate  resistant  sensitive  freq    sari
    specimen_code microorganism_name    antimicrobial_name                                                       
    ABSCESS       Achromobacter species Cefepime            0.0           0.0        1.0        0.0   1.0  1.0000
                                        Ceftazidime         0.0           1.0        0.0        0.0   1.0  1.0000
                                        Ceftriaxone         0.0           0.0        1.0        0.0   1.0  1.0000
                                        Ciprofloxacin       0.0           0.0        0.0        1.0   1.0  0.0000
                                        Gentamicin          0.0           1.0        0.0        0.0   1.0  1.0000
    ...                                                     ...           ...        ...        ...   ...     ...
    URINE         Viridans streptococci Clindamycin         0.0           2.0        0.0        8.0  10.0  0.2000
                                        Erythromycin        0.0           0.0        4.0        6.0  10.0  0.4000
                                        Levofloxacin        0.0           0.0        0.0        1.0   1.0  0.0000
                                        Penicillin g        0.0           2.0        0.0        9.0  11.0  0.1818
                                        Vancomycin          0.0           0.0        0.0       11.0  11.0  0.0000

    [4307 rows x 6 columns]






|

.. code-block:: default
   :lineno-start: 12


    # Libraries
    import sys
    import glob
    import numpy as np 
    import pandas as pd 
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import own libraries
    from pyamr.core.freq import Frequency
    from pyamr.core.sari import SARI
    from pyamr.datasets.load import load_data_mimic

    # -------------------------
    # Configuration
    # -------------------------
    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)

    # --------------------------------------------------------------------
    #                               Main
    # --------------------------------------------------------------------
    # Load data
    data, antibiotics, organisms = load_data_mimic()

    # Count records per specimen code
    specimen_code_count = data \
        .groupby('laboratory_number').head(1) \
        .specimen_code.value_counts(normalize=True) \
        .sort_values(ascending=False)

    # Filter most frequent specimens
    data = data[data.specimen_code.isin( \
        specimen_code_count.index.values[:5])]


    # Create sari instance
    sari = SARI(groupby=['specimen_code',
                         'microorganism_name',
                         'antimicrobial_name',
                         'sensitivity'])

    # Compute SARI overall
    sari_overall = sari.compute(data,
        return_frequencies=True)

    # Show
    print("SARI (overall):")
    print(sari_overall)

    # -------------------------------------------
    # Plot
    # -------------------------------------------
    # Reset
    sari_overall = sari_overall.reset_index()


    # Loop for each specimen
    for specimen, df in sari_overall.groupby(by='specimen_code'):
        # ------------
        # Plot Heatmap
        # ------------
        # Create colormap
        cmap = sns.color_palette("Reds", desat=0.5, n_colors=10)

        # Configura
        sizes = (df.freq.min(), df.freq.max())

        # Plot
        g = sns.relplot(data=df.reset_index(), x='microorganism_name',
                        y='antimicrobial_name', hue="sari", size="freq",
                        palette='Reds', hue_norm=(0, 1), edgecolor="gray",
                        linewidth=0.5, sizes=sizes,  # size_norm=sizes,
                        dashes=True, legend='brief', height=10)

        # Configure plot
        g.set(xlabel="Antimicrobial",
              ylabel="Microorganism",
              title='Antibiogram (with frequency)',
              # aspect='equal'
              )
        g.despine(left=True, bottom=True)
        g.ax.margins(.1)

        # Configure xticks
        for label in g.ax.get_xticklabels():
            label.set_rotation(90)

        # Configure legend
        for artist in g.legend.legendHandles:
            artist.set_edgecolor("k")
            artist.set_linewidth(0.5)

        # Superior title
        plt.suptitle(specimen)

        # Add grid lines.
        # plt.grid(linestyle='-', linewidth=0.5, color='.7')

        # Adjust
        plt.tight_layout()

        # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.682 seconds)


.. _sphx_glr_download__examples_reports_mimic_plot_sari_relmap.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sari_relmap.py <plot_sari_relmap.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sari_relmap.ipynb <plot_sari_relmap.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

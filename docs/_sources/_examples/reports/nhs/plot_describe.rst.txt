
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\reports\nhs\plot_describe.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_reports_nhs_plot_describe.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_reports_nhs_plot_describe.py:


Describe
-------------------

.. todo: Simplify and explain

.. GENERATED FROM PYTHON SOURCE LINES 7-129



.. image:: /_examples/reports/nhs/images/sphx_glr_plot_describe_001.png
    :alt: SPECIMEN
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Total cultures: 326984

    Specimens (proportions)
    URICUL    3.9871e-01
    WOUCUL    2.1412e-01
    SPTCUL    5.5841e-02
    BLDCUL    4.7745e-02
    GUMCUL    4.4072e-02
                 ...    
    WICCUL    3.0583e-06
    9LUNGC    3.0583e-06
    URISCH    3.0583e-06
    FSTCUL    3.0583e-06
    9CPAP     3.0583e-06
    Name: specimen_code, Length: 121, dtype: float64

    Microorganisms (proportions)
    SAUR        2.6864e-01
    ECOL        2.1908e-01
    PAER        6.0153e-02
    COLIF       5.1335e-02
    NGON        4.6888e-02
                   ...    
    CAMP2       5.4140e-07
    FUSOB       2.7070e-07
    QISO        2.7070e-07
    A_MSIMAE    2.7070e-07
    A_AGPB      2.7070e-07
    Name: microorganism_code, Length: 357, dtype: float64

    Antimicrobials (proportions)
    ACIP          8.6948e-02
    AGEN          7.5419e-02
    ATRI          7.0210e-02
    AAUG          4.6010e-02
    ATET          3.8434e-02
                     ...    
    AGEN2         5.4140e-07
    A_CEPHAZOL    2.7070e-07
    A_TERBINAF    2.7070e-07
    A_RIFABUTI    2.7070e-07
    A_KETOCONA    2.7070e-07
    Name: antimicrobial_code, Length: 93, dtype: float64

    Pairs (proportions
    microorganism_code  antimicrobial_code
    ECOL                AAUG                  2.5175e-02
                        ACIP                  2.5175e-02
                        ATRI                  2.4684e-02
    SAUR                AMET                  2.3324e-02
                        APEN                  2.2273e-02
                                                 ...    
    A_YPSEUDOTU         ACXM                  2.7070e-07
                        ACXT                  2.7070e-07
                        AGEN                  2.7070e-07
                        AIMP                  2.7070e-07
    YSTPCA              AVOR                  2.7070e-07
    Length: 7185, dtype: float64


    Freqs:
    SENSITIVITY        fix  hide  highly resistant  intermediate  not done  resistant  sensitive
    SPECIE ANTIBIOTIC                                                                           
    ABAU   AAMI        0.0   0.0               0.0          10.0       0.0      378.0      659.0
           AAMO        0.0   0.0               0.0           2.0       0.0      720.0       28.0
           AAMP        0.0   0.0               0.0           0.0       0.0       12.0        0.0
           AAMPC       0.0   0.0               0.0           0.0       0.0       34.0       84.0
           AAUG        0.0   0.0               0.0           6.0       1.0      638.0      195.0
    ...                ...   ...               ...           ...       ...        ...        ...
    YSTPCA ATET        0.0   0.0               0.0           0.0       0.0        2.0        3.0
           ATIG        0.0   0.0               0.0           0.0       0.0        0.0        1.0
           ATRI        0.0   0.0               0.0           0.0       0.0        0.0        3.0
           AVAN        0.0   0.0               0.0           0.0       0.0        1.0        1.0
           AVOR        0.0   0.0               0.0           0.0       0.0        0.0        1.0

    [7185 rows x 7 columns]
    Count
    SPECIE       ANTIBIOTIC
    ECOL         AAUG          93001.0
                 ACIP          93000.0
                 ATRI          91187.0
    SAUR         AMET          86164.0
                 APEN          82280.0
                                ...   
    A_YPSEUDOTU  ACXM              1.0
                 ACXT              1.0
                 AGEN              1.0
                 AIMP              1.0
    YSTPCA       AVOR              1.0
    Length: 7185, dtype: float64
    c:\users\kelda\desktop\repositories\virtualenvs\venvpy39-datablend\lib\site-packages\pandas\plotting\_matplotlib\core.py:1583: MatplotlibDeprecationWarning: normalize=None does not normalize if the sum is less than 1 but this behavior is deprecated since 3.3 until two minor releases later. After the deprecation period the default value will be normalize=True. To prevent normalization pass normalize=False 
      results = ax.pie(y, labels=blabels, **kwds)






|

.. code-block:: default
   :lineno-start: 8


    # Import libraries
    import sys
    import glob
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import pyamr
    from pyamr.core.freq import Frequency
    from pyamr.datasets.load import load_data_nhs

    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)

    # -------------------------
    # Constants
    # -------------------------
    # Replace codes
    replace_codes = {
      '9MRSN': 'MRSCUL',
      'URINE CULTURE': 'URICUL',
      'WOUND CULTURE': 'WOUCUL',
      'BLOOD CULTURE': 'BLDCUL',
      'SPUTUM CULTURE': 'SPTCUL',
      'CSF CULTURE': 'CSFCUL',
      'EYE CULTURE': 'EYECUL',
      'GENITALCUL': 'GENCUL',
      'NEONATAL SCREEN': 'NEOCUL',
    }

    # ----------------------------------------------------------
    #                       Main
    # ----------------------------------------------------------
    # Load data
    data, antibiotics, organisms = load_data_nhs()

    # Replace
    data.specimen_code = \
        data.specimen_code.replace(replace_codes)

    # Drop duplicates
    data = data.drop_duplicates()

    # The total number of cultures
    ncultures = data.laboratory_number.nunique()

    # The percentage of each specimen
    pspecimens = data \
        .groupby('laboratory_number').head(1) \
        .specimen_code.value_counts(normalize=True)

    # The percentages of each organism
    pmicroorganisms = data \
        .microorganism_code \
        .value_counts(normalize=True)

    # The percentages of each antimicrobial
    pantimicrobials = data \
        .antimicrobial_code \
        .value_counts(normalize=True)

    # The percentages of (orgnaism, antimicrobial) pairs
    ppairs = data[['microorganism_code', 'antimicrobial_code']]
    ppairs = ppairs.value_counts(normalize=True)

    # Show
    print("\nTotal cultures: %s" % ncultures)
    print("\nSpecimens (proportions)")
    print(pspecimens)
    print("\nMicroorganisms (proportions)")
    print(pmicroorganisms)
    print("\nAntimicrobials (proportions)")
    print(pantimicrobials)
    print("\nPairs (proportions")
    print(ppairs)

    # --------------------
    # Compute Frequencies
    # --------------------
    # Create instance
    freq = Frequency(column_antibiotic='antimicrobial_code',
                     column_organism='microorganism_code',
                     column_date='date_received',
                     column_outcome='sensitivity')

    # Compute frequencies overall
    freq_pairs = freq.compute(data, strategy='overall',
                                    by_category='pairs')

    freq_orgs = freq.compute(data, strategy='overall',
                                   by_category='organisms')

    freq_abxs = freq.compute(data, strategy='overall',
                                   by_category='organisms')

    print("\n\nFreqs:")
    print(freq_pairs)
    print("Count")
    print(freq_pairs.sum(axis=1).sort_values(ascending=False))



    pspecimens.plot(kind='pie', ylabel='')
    plt.suptitle('SPECIMEN')

    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.145 seconds)


.. _sphx_glr_download__examples_reports_nhs_plot_describe.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_describe.py <plot_describe.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_describe.ipynb <plot_describe.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

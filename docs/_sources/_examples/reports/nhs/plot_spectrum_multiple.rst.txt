
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/reports/nhs/plot_spectrum_multiple.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_reports_nhs_plot_spectrum_multiple.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_reports_nhs_plot_spectrum_multiple.py:


SART - Spectrum (multiple)
--------------------------

.. todo: Simplify and explain

.. GENERATED FROM PYTHON SOURCE LINES 7-209



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/reports/nhs/images/sphx_glr_plot_spectrum_multiple_001.png
          :alt: BLDCUL
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/nhs/images/sphx_glr_plot_spectrum_multiple_002.png
          :alt: SPTCUL
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/nhs/images/sphx_glr_plot_spectrum_multiple_003.png
          :alt: URICUL
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/nhs/images/sphx_glr_plot_spectrum_multiple_004.png
          :alt: WOUCUL
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/reports/nhs/images/sphx_glr_plot_spectrum_multiple_005.png
          :alt: XINCUL
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



    Data ASAI (BLDCUL):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin         17.0  2.0  20.0     40.0   2.0  43.0     0.7843  1.0000  0.8250
    Amoxycillin      19.0  6.0  24.0     35.0  26.0  38.0     0.2404  0.6667  0.5833
    Amp c markers     9.0  NaN   8.0     17.0   NaN  13.0     0.4907     NaN  0.3125
    Amphotericin      NaN  NaN   3.0      NaN   NaN   9.0        NaN     NaN  0.9524
    Anidulafungin     NaN  NaN   4.0      NaN   NaN   9.0        NaN     NaN  0.0833
    Azithromycin      3.0  NaN   1.0      3.0   NaN   1.0     0.6667     NaN  1.0000
    Aztreonam        14.0  1.0  12.0     32.0   1.0  26.0     0.5381  0.0000  0.3972
    Caspofungin       NaN  NaN   3.0      NaN   NaN  10.0        NaN     NaN  1.0000
    Cefixime          1.0  NaN   NaN      1.0   NaN   NaN     1.0000     NaN     NaN
    Cefotaxime       18.0  5.0  23.0     37.0  16.0  42.0     0.5370  0.6000  0.6275


    Data ASAI (SPTCUL):
                  N_GENUS            N_SPECIE            ASAI_SCORE                
    gram                n    p     u        n    p     u          n       p       u
    ANTIBIOTIC                                                                     
    Amikacin         10.0  3.0  22.0     30.0  4.0  34.0     0.6750  0.6667  0.7727
    Amoxycillin      13.0  3.0  18.0     28.0  6.0  29.0     0.1115  0.7222  0.2222
    Amp c markers     9.0  1.0  12.0     17.0  1.0  17.0     0.1556  0.0000  0.3542
    Amphotericin      NaN  NaN   2.0      NaN  NaN   7.0        NaN     NaN  0.9167
    Anidulafungin     NaN  NaN   2.0      NaN  NaN   7.0        NaN     NaN  0.0000
    Azithromycin      1.0  NaN   NaN      1.0  NaN   NaN     1.0000     NaN     NaN
    Aztreonam        10.0  3.0  17.0     25.0  4.0  27.0     0.4700  0.1667  0.5490
    Caspofungin       NaN  NaN   2.0      NaN  NaN   7.0        NaN     NaN  0.9167
    Cefepime          1.0  NaN   NaN      2.0  NaN   NaN     0.0000     NaN     NaN
    Cefotaxime       14.0  4.0  25.0     30.0  4.0  39.0     0.4905  1.0000  0.6533


    Data ASAI (URICUL):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin         11.0  3.0  14.0     28.0   4.0  24.0     0.7197  0.6667  0.9048
    Amoxycillin       9.0  5.0   8.0     10.0  26.0  11.0     0.5556  0.7367  0.7500
    Amp c markers     9.0  NaN   9.0     19.0   NaN  16.0     0.1667     NaN  0.5278
    Amphotericin      NaN  NaN   2.0      NaN   NaN   9.0        NaN     NaN  1.0000
    Anidulafungin     NaN  NaN   2.0      NaN   NaN   9.0        NaN     NaN  0.0625
    Azithromycin      1.0  NaN   NaN      1.0   NaN   NaN     1.0000     NaN     NaN
    Aztreonam         8.0  NaN   1.0     11.0   NaN   1.0     0.4792     NaN  0.0000
    Caspofungin       NaN  NaN   2.0      NaN   NaN   9.0        NaN     NaN  1.0000
    Cefixime          1.0  NaN   NaN      1.0   NaN   NaN     1.0000     NaN     NaN
    Cefotaxime       11.0  5.0  12.0     25.0   6.0  20.0     0.2258  0.8000  0.7014


    Data ASAI (WOUCUL):
                  N_GENUS            N_SPECIE             ASAI_SCORE                
    gram                n    p     u        n     p     u          n       p       u
    ANTIBIOTIC                                                                      
    Amikacin         13.0  7.0  24.0     35.0  11.0  42.0     0.8462  0.8571  0.8646
    Amoxycillin      15.0  4.0  26.0     37.0  16.0  42.0     0.3667  0.2679  0.3462
    Amp c markers    10.0  2.0  15.0     20.0   3.0  23.0     0.3500  1.0000  0.4222
    Amphotericin      NaN  NaN   2.0      NaN   NaN   6.0        NaN     NaN  1.0000
    Anidulafungin     NaN  NaN   2.0      NaN   NaN   5.0        NaN     NaN  0.0000
    Azithromycin      1.0  NaN   NaN      4.0   NaN   NaN     1.0000     NaN     NaN
    Aztreonam        14.0  4.0  18.0     32.0   6.0  34.0     0.6071  1.0000  0.4296
    Bacitracin        2.0  2.0   1.0      2.0   7.0   1.0     1.0000  1.0000  0.0000
    Caspofungin       NaN  NaN   2.0      NaN   NaN   6.0        NaN     NaN  0.9000
    Cefixime          1.0  NaN   NaN      4.0   NaN   NaN     1.0000     NaN     NaN


    Data ASAI (XINCUL):
                  N_GENUS            N_SPECIE            ASAI_SCORE             
    gram                n    p     u        n    p     u          n    p       u
    ANTIBIOTIC                                                                  
    Amikacin          9.0  1.0  11.0     20.0  1.0  20.0     0.6296  1.0  0.7803
    Amoxycillin       9.0  1.0   7.0     12.0  2.0   8.0     0.1667  0.0  0.5714
    Amp c markers     8.0  NaN   5.0     14.0  NaN   9.0     0.3750  NaN  0.5500
    Amphotericin      NaN  NaN   1.0      NaN  NaN   2.0        NaN  NaN  1.0000
    Aztreonam         9.0  1.0   6.0     17.0  1.0  12.0     0.1944  1.0  0.4167
    Bacitracin        NaN  1.0   NaN      NaN  1.0   NaN        NaN  1.0     NaN
    Caspofungin       NaN  NaN   1.0      NaN  NaN   2.0        NaN  NaN  1.0000
    Cefepime          NaN  NaN   1.0      NaN  NaN   1.0        NaN  NaN  0.0000
    Cefixime          NaN  NaN   1.0      NaN  NaN   1.0        NaN  NaN  0.0000
    Cefotaxime        9.0  1.0   7.0     16.0  1.0  12.0     0.0556  1.0  0.4762






|

.. code-block:: default
   :lineno-start: 8


    # Import libraries
    import sys
    import glob
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.core.freq import Frequency
    from pyamr.core.sari import SARI
    from pyamr.core.asai import ASAI
    from pyamr.datasets.load import load_data_nhs

    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)


    # --------------------------------------------------------------------
    #                             Methods
    # --------------------------------------------------------------------
    def scalar_colormap(values, cmap, vmin, vmax):
        """This method creates a colormap based on values.

        Parameters
        ----------
        values : array-like
          The values to create the corresponding colors

        cmap : str
          The colormap

        vmin, vmax : float
          The minimum and maximum possible values

        Returns
        -------
        scalar colormap
        """
        # Create scalar mappable
        norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
        mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
        # Gete color map
        colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
        # Return
        return colormap


    def create_mapper(dataframe, column_key, column_value):
        """This method constructs a mapper

        Parameters
        ----------
        dataframe: dataframe-like
        The dataframe from which the columns are extracted

        column_key: string-like
        The name of the column with the values for the keys of the mapper

        column_value: string-like
        The name of the column with the values for the values of the mapper

        Returns
        -------
        dictionary
        """
        dataframe = dataframe[[column_key, column_value]]
        dataframe = dataframe.drop_duplicates()
        return dict(zip(dataframe[column_key], dataframe[column_value]))


    # --------------------------------------------------------------------
    #                               Main
    # --------------------------------------------------------------------
    # Load data
    data, antibiotics, organisms = load_data_nhs()

    # Count records per specimen code
    specimen_code_count = data.specimen_code.value_counts()

    # Filter most frequent specimens
    data = data[data.specimen_code.isin( \
        specimen_code_count.index.values[:5])]

    # Loop for each specimen
    for specimen_code, df in data.groupby(by='specimen_code'):

        # ----------------------------
        # Compute frequencies and SARI
        # ----------------------------
        # Create instance
        freq = Frequency(column_antibiotic='antimicrobial_code',
                         column_organism='microorganism_code',
                         column_date='date_received',
                         column_outcome='sensitivity')

        # Compute frequencies overall
        freq_overall = freq.compute(df, strategy='overall',
                                        by_category='pairs')

        # Compute sari
        sari_overall = SARI(strategy='medium').compute(freq_overall)

        # ------------------------
        # Format dataframe
        #-------------------------
        # Create mappers
        abx_map = create_mapper(antibiotics, 'antimicrobial_code', 'category')
        org_map = create_mapper(organisms, 'microorganism_code', 'genus')
        grm_map = create_mapper(organisms, 'microorganism_code', 'gram_stain')
        name_map = create_mapper(antibiotics, 'antimicrobial_code', 'name')

        # Copy dataframe
        dataframe = sari_overall.copy(deep=True)
        dataframe = dataframe.reset_index()

        # Include categories
        dataframe['category'] = dataframe['ANTIBIOTIC'].map(abx_map)
        dataframe['genus'] = dataframe['SPECIE'].map(org_map)
        dataframe['gram'] = dataframe['SPECIE'].map(grm_map)
        dataframe['ANTIBIOTIC'] = dataframe.ANTIBIOTIC.map(name_map)

        # Empty grams are a new category (unknown - u)
        dataframe.gram = dataframe.gram.fillna('u')

        # ------------------------
        # Compute spectrum index
        # ------------------------
        # Create antimicrobial spectrum of activity instance
        asai = ASAI(weights='uniform', threshold=0.05,
                                       column_genus='genus',
                                       column_specie='SPECIE',
                                       column_antibiotic='ANTIBIOTIC',
                                       column_resistance='sari')

        # Compute
        scores = asai.compute(dataframe, by_category='gram')

        # Show scores
        print("\n\nData ASAI (%s):" % specimen_code)
        print(scores.head(10))

        # Sort
        scores = scores.fillna(0.0)
        scores['width'] = np.abs(scores['ASAI_SCORE']['n']+scores['ASAI_SCORE']['p'])
        scores['gmean'] = np.sqrt(scores['ASAI_SCORE']['n']*scores['ASAI_SCORE']['p'])
        scores = scores.sort_values(by='gmean', ascending=False)

        # Variables to plot.
        x = scores.index.values
        y_n = scores['ASAI_SCORE']['n'].values
        y_p = scores['ASAI_SCORE']['p'].values
        y_u = scores['ASAI_SCORE']['u'].values

        # Constants
        colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
        colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)
        colormap_u = scalar_colormap(y_u, cmap='Greens', vmin=-0.1, vmax=1.1)

        # ----------
        # Example
        # ----------
        # This example shows a diverging figure using exclusively the gram-positive
        # and gram-negative categories. Note that the gram negative categories has
        # values in the range [-1,0] while the gram-positive category has values
        # within the range [0, 1]
        # Create figure
        f, axes = plt.subplots(1, 3, figsize=(7, 12), sharey=True)

        # Plot
        sns.barplot(x=y_p, y=x, palette=colormap_p, ax=axes[0], orient='h',
         saturation=0.5, label='Gram-positive')
        sns.barplot(x=y_n, y=x, palette=colormap_n, ax=axes[1], orient='h',
         saturation=0.5, label='Gram-negative')
        sns.barplot(x=y_u, y=x, palette=colormap_u, ax=axes[2], orient='h',
          saturation=0.5, label='Gram-unknown')

        # Configure
        sns.despine(bottom=True)

        # Show legend.
        plt.legend(loc=8)
        plt.suptitle(specimen_code)
        plt.tight_layout()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.466 seconds)


.. _sphx_glr_download__examples_reports_nhs_plot_spectrum_multiple.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_spectrum_multiple.py <plot_spectrum_multiple.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_spectrum_multiple.ipynb <plot_spectrum_multiple.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

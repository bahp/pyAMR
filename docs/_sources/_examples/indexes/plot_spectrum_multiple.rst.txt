
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\indexes\plot_spectrum_multiple.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_indexes_plot_spectrum_multiple.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_indexes_plot_spectrum_multiple.py:


ASAI - multiple
---------------

.. todo:: Explain...

.. GENERATED FROM PYTHON SOURCE LINES 8-174



.. image:: /_examples/indexes/images/sphx_glr_plot_spectrum_multiple_001.png
    :alt: Gram-positive, Gram-negative, Gram-unknown
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Data input:
       Unnamed: 0         specie       specieCode              genus organismCode         antibiotic antibioticCode gram  resistance
    0           0  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO           amikacin           AAMI    u         1.0
    1           1  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO          augmentin           AAUG    u         0.0
    2           2  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO        ceftazidime           ACAZ    u         0.0
    3           3  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO         cephalexin          ACELX    u         1.0
    4           4  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO      ciprofloxacin           ACIP    u         1.0
    5           5  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO  colistin sulphate           ACOL    u         0.0
    6           6  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO         cefotaxime           ACTX    u         1.0
    7           7  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO          cefoxitin           ACXT    u         1.0
    8           8  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO          ertapenem           AERT    u         0.0
    9           9  achromobacter  A_ACHROMOBACTER  achromobacter sp.        ACHRO       esbl markers          AESBL    u         1.0
    Data output:
                   N_GENUS            N_SPECIE             ASAI_SCORE                   width   gmean
    gram                 n    p     u        n     p     u          n       p       u                
    ANTIBIOTIC                                                                                       
    vancomycin         2.0  5.0   7.0      2.0  25.0   9.0     1.0000  0.7500  1.0000  1.7500  0.8660
    tazocin            8.0  3.0  15.0     23.0   4.0  28.0     0.6250  1.0000  0.7722  1.6250  0.7906
    meropenem          8.0  4.0  17.0     23.0   5.0  31.0     0.7333  0.7500  0.9118  1.4833  0.7416
    amikacin           9.0  3.0  14.0     24.0   4.0  27.0     0.6667  0.6667  0.8452  1.3333  0.6667
    amoxycillin        5.0  5.0   9.0      6.0  27.0  13.0     0.6000  0.7375  0.6667  1.3375  0.6652
    ceftazidime        8.0  3.0  14.0     23.0   4.0  27.0     0.5604  0.6667  0.5655  1.2271  0.6112
    ertapenem          7.0  4.0  13.0     19.0   5.0  24.0     0.4857  0.7500  0.7000  1.2357  0.6036
    clindamycin        1.0  5.0   5.0      1.0  27.0   7.0     1.0000  0.3571  0.8000  1.3571  0.5976
    erythromycin       1.0  5.0   4.0      1.0  26.0   6.0     1.0000  0.3363  0.7500  1.3363  0.5799
    tigecycline        3.0  2.0   4.0      5.0   4.0   5.0     0.3333  1.0000  0.7500  1.3333  0.5774
    gentamicin        10.0  6.0  19.0     25.0  27.0  35.0     0.5733  0.5400  0.7009  1.1134  0.5564
    augmentin          8.0  6.0  20.0     19.0  31.0  36.0     0.3333  0.8631  0.5917  1.1964  0.5364
    nitrofurantoin     8.0  6.0  13.0     18.0  32.0  28.0     0.3167  0.6667  0.5308  0.9833  0.4595
    cephalexin         6.0  6.0  13.0     14.0  29.0  28.0     0.3333  0.5417  0.5513  0.8750  0.4249
    cefotaxime         6.0  4.0  13.0     19.0   5.0  24.0     0.2056  0.7500  0.6731  0.9556  0.3926
    ciprofloxacin     10.0  6.0  16.0     26.0  26.0  33.0     0.3133  0.2698  0.5979  0.5832  0.2908
    mecillinam         7.0  2.0  10.0     19.0   3.0  22.0     0.1500  0.5000  0.5467  0.6500  0.2739
    cefoxitin          6.0  4.0  12.0     17.0   8.0  22.0     0.0972  0.6875  0.4306  0.7847  0.2585
    trimethoprim       8.0  5.0  12.0     20.0  29.0  27.0     0.2062  0.1375  0.3361  0.3438  0.1684
    aztreonam          7.0  0.0   2.0     10.0   0.0   2.0     0.4048  0.0000  0.5000  0.4048  0.0000






|

.. code-block:: default
   :lineno-start: 9


    # Import libraries
    import sys
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.datasets import load
    from pyamr.core.asai import ASAI

    # -------------------------
    # Configuration
    # -------------------------
    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)


    # -------------------------------
    # Load data
    # -------------------------------
    # Save
    dataframe = pd.read_csv('../_data/data-spectrum.csv')

    # Empty grams are a new category (unknown - u)
    dataframe.loc[pd.isnull(dataframe['gram']), 'gram'] = 'u'

    # Show
    print("Data input:")
    print(dataframe.head(10))

    # -------------------------------
    # Create antimicrobial spectrum
    # -------------------------------
    # Create antimicrobial spectrum of activity instance
    asai = ASAI(weights='uniform', threshold=0.05,
                                   column_genus='specie',
                                   column_specie='genus', 
                                   column_antibiotic='antibiotic', 
                                   column_resistance='resistance')

    # Compute
    scores = asai.compute(dataframe, by_category='gram')

    # -------------------------------
    # Filter and reoorder
    # -------------------------------
    # Antibiotics to display
    abxs_urine = ['cephalexin', 'ciprofloxacin', 'ampicillin', 'trimethoprim',
      'augmentin', 'meropenem', 'nitrofurantoin', 'amikacin', 'cefotaxime',
      'tazocin', 'gentamicin', 'ertapenem', 'ceftazidime', 'mecillinam',
      'cefoxitin', 'vancomycin', 'clindamycin', 'erythromycin', 'aztreonam',
      'tigecycline', 'amoxycillin']

    # Filter by antibiotics
    scores = scores[scores.index.isin(abxs_urine)]

    # Sort
    scores = scores.fillna(0.0)
    scores['width'] = np.abs(scores['ASAI_SCORE']['n']+scores['ASAI_SCORE']['p'])
    scores['gmean'] = np.sqrt(scores['ASAI_SCORE']['n']*scores['ASAI_SCORE']['p'])
    scores = scores.sort_values(by='gmean', ascending=False)

    # Show scores
    print("Data output:")
    print(scores)


    # ----------------
    # Plot
    # ----------------
    def scalar_colormap(values, cmap, vmin, vmax):
      """This method creates a colormap based on values.

      Parameters
      ----------
      values : array-like
        The values to create the corresponding colors

      cmap : str
        The colormap

      vmin, vmax : float
        The minimum and maximum possible values

      Returns
      -------
      scalar colormap
      """
      # Create scalar mappable
      norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
      mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
      # Gete color map
      colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
      # Return
      return colormap

    # Variables to plot.
    x = scores.index.values
    y_n = scores['ASAI_SCORE']['n'].values
    y_p = scores['ASAI_SCORE']['p'].values
    y_u = scores['ASAI_SCORE']['u'].values

    # Constants
    colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
    colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)
    colormap_u = scalar_colormap(y_u, cmap='Greens', vmin=-0.1, vmax=1.1)

    # ----------
    # Example
    # ----------
    # This example shows an stacked figure using more than two categories. 
    # For instance, it uses gram-positive, gram-negative and gram-unknown. 
    # All theindexes go within the range [0,1].
    # Create the figure
    f, axes = plt.subplots(1, 3, figsize=(7, 4))

    # Plot each category
    sns.barplot(x=y_p, y=x, palette=colormap_p, ax=axes[0], orient='h', 
      saturation=0.5, label='Gram-positive')
    sns.barplot(x=y_n, y=x, palette=colormap_n, ax=axes[1], orient='h', 
      saturation=0.5, label='Gram-negative')
    sns.barplot(x=y_u, y=x, palette=colormap_u, ax=axes[2], orient='h', 
      saturation=0.5, label='Gram-unknown')

    # Configure
    sns.despine(bottom=True)

    # Format figure
    plt.subplots_adjust(wspace=0.0, hspace=0.0)

    # Remove yticks
    axes[1].set_yticks([])
    axes[2].set_yticks([])

    # Set title
    axes[0].set_title('Gram-positive')
    axes[1].set_title('Gram-negative')
    axes[2].set_title('Gram-unknown')

    # Set x-axis
    axes[0].set_xlim([0,1.1])
    axes[1].set_xlim([0,1.1])
    axes[2].set_xlim([0,1.1])

    # Adjust
    plt.tight_layout()

    # Show
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.986 seconds)


.. _sphx_glr_download__examples_indexes_plot_spectrum_multiple.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_spectrum_multiple.py <plot_spectrum_multiple.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_spectrum_multiple.ipynb <plot_spectrum_multiple.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

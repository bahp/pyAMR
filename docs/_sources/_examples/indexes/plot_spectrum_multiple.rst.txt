
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\indexes\plot_spectrum_multiple.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_indexes_plot_spectrum_multiple.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_indexes_plot_spectrum_multiple.py:


ASAI - Multiple
---------------

.. warning: Implement using sample data

.. GENERATED FROM PYTHON SOURCE LINES 8-233



.. image:: /_examples/indexes/images/sphx_glr_plot_spectrum_multiple_001.png
    :alt: Gram-positive, Gram-negative, Gram-unknown
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
                  date_received         date_outcome LastActDateODBC  patient_id  ... microorganism_genus microorganism_specie microorganism_gram_type antimicrobial_class
    0       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020           0  ...            coliform                  NaN                     NaN                 NaN
    1       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020           0  ...            coliform                  NaN                     NaN      cephalosporins
    2       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020           0  ...            coliform                  NaN                     NaN    fluoroquinolones
    3       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020           0  ...            coliform                  NaN                     NaN     aminoglycosides
    4       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020           0  ...            coliform                  NaN                     NaN                 NaN
    ...                     ...                  ...             ...         ...  ...                 ...                  ...                     ...                 ...
    124640  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22        7785  ...         citrobacter                  NaN                     NaN          meropenems
    124641  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22        7785  ...         citrobacter                  NaN                     NaN                 NaN
    124642  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22        7785  ...         citrobacter                  NaN                     NaN         penicillins
    124643  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22        7785  ...         citrobacter                  NaN                     NaN                 NaN
    124644  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22        7785  ...         citrobacter                  NaN                     NaN     aminoglycosides

    [124645 rows x 22 columns]

    Columns:
    Index(['date_received', 'date_outcome', 'LastActDateODBC', 'patient_id', 'laboratory_number', 'specimen_code', 'specimen_name', 'specimen_description', 'microorganism_piece_counter', 'microorganism_code', 'microorganism_name', 'antimicrobial_code', 'antimicrobial_name', 'sensitivity_method',
           'sensitivity_code', 'mic', 'reported', 'sensitivity', 'microorganism_genus', 'microorganism_specie', 'microorganism_gram_type', 'antimicrobial_class'],
          dtype='object')
    Data output:
                            N_GENUS            N_SPECIE             ASAI_SCORE                   width   gmean
    microorganism_gram_type       n    p     u        n     p     u          n       p       u                
    ANTIBIOTIC                                                                                                
    AMER                        6.0  1.0  16.0     18.0   1.0  25.0     0.7889  1.0000  0.7604  1.7889  0.8882
    ACHL                        5.0  6.0  10.0      6.0  16.0  14.0     0.6000  0.7222  0.7667  1.3222  0.6583
    ACOT                        7.0  1.0  20.0     15.0   1.0  27.0     0.3810  1.0000  0.7375  1.3810  0.6172
    AGEN                        6.0  3.0  22.0     18.0   9.0  31.0     0.5222  0.5778  0.7333  1.1000  0.5493
    AFOX                        5.0  1.0  15.0     12.0   1.0  17.0     0.2667  1.0000  0.6222  1.2667  0.5164
    ...                         ...  ...   ...      ...   ...   ...        ...     ...     ...     ...     ...
    AESBL                       5.0  0.0   4.0      7.0   0.0   5.0     0.0000  0.0000  0.0000  0.0000  0.0000
    AFLUZ                       0.0  0.0   1.0      0.0   0.0   3.0     0.0000  0.0000  1.0000  0.0000  0.0000
    AFOS                        5.0  0.0   5.0     10.0   0.0   9.0     0.4333  0.0000  0.2000  0.4333  0.0000
    AFUS                        0.0  4.0   2.0      0.0   9.0   2.0     0.0000  0.5417  0.5000  0.5417  0.0000
    AVOR                        0.0  0.0   1.0      0.0   0.0   3.0     0.0000  0.0000  1.0000  0.0000  0.0000

    [62 rows x 11 columns]






|

.. code-block:: default
   :lineno-start: 9


    # Import libraries
    import sys
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.core.asai import ASAI
    from pyamr.core.sari import SARI
    from pyamr.core.freq import Frequency
    from pyamr.datasets.load import make_susceptibility

    # -------------------------
    # Configuration
    # -------------------------
    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)

    # ------------------------
    # Methods
    # ------------------------
    def create_mapper(dataframe, column_key, column_value):
        """This method constructs a mapper

        Parameters
        ----------
        dataframe: dataframe-like
          The dataframe from which the columns are extracted

        column_key: string-like
          The name of the column with the values for the keys of the mapper

        column_value: string-like
          The name of the column with the values for the values of the mapper

        Returns
        -------
        dictionary
        """
        dataframe = dataframe[[column_key, column_value]]
        dataframe = dataframe.drop_duplicates()
        return dict(zip(dataframe[column_key], dataframe[column_value]))

    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data = make_susceptibility()

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.columns)



    # -------------------------------------------
    # Compute Freq and SARI
    # -------------------------------------------
    # Create instance
    freq = Frequency(column_antibiotic='antimicrobial_code',
                     column_organism='microorganism_code',
                     column_date='date_received',
                     column_outcome='sensitivity')

    # Compute frequencies (overall)
    freq_overall = freq.compute(data, by_category='pairs')

    # Compute SARI
    sari_overall = SARI(strategy='hard').compute(freq_overall)



    # -------------------------------------------
    # Compute Freq and SARI
    # -------------------------------------------
    # Create mappers
    genus_map = create_mapper(data, 'microorganism_code', 'microorganism_genus')
    gramt_map = create_mapper(data, 'microorganism_code', 'microorganism_gram_type')

    # Create matrix
    matrix = sari_overall.copy(deep=True)
    matrix = matrix.reset_index()
    matrix['microorganism_genus'] = matrix.SPECIE.map(genus_map)
    matrix['microorganism_gram_type'] = matrix.SPECIE.map(gramt_map)

    # # Empty grams are a new category (unknown - u)
    matrix.microorganism_gram_type = \
        matrix.microorganism_gram_type.fillna('u')

    # Create instance
    asai = ASAI(weights='uniform',
                threshold=0.05,
                column_genus='microorganism_genus',
                column_specie='SPECIE',
                column_antibiotic='ANTIBIOTIC',
                column_resistance='sari')
    # Compute
    scores = asai.compute(matrix,
        by_category='microorganism_gram_type')


    # -------------------------------
    # Filter and reoorder
    # -------------------------------
    # Antibiotics to display (use codes instead)
    abxs_urine = ['cephalexin', 'ciprofloxacin', 'ampicillin', 'trimethoprim',
      'augmentin', 'meropenem', 'nitrofurantoin', 'amikacin', 'cefotaxime',
      'tazocin', 'gentamicin', 'ertapenem', 'ceftazidime', 'mecillinam',
      'cefoxitin', 'vancomycin', 'clindamycin', 'erythromycin', 'aztreonam',
      'tigecycline', 'amoxycillin']

    # Filter by antibiotics
    #scores = scores[scores.index.isin(abxs_urine)]

    # Sort
    scores = scores.fillna(0.0)
    scores['width'] = np.abs(scores['ASAI_SCORE']['n']+scores['ASAI_SCORE']['p'])
    scores['gmean'] = np.sqrt(scores['ASAI_SCORE']['n']*scores['ASAI_SCORE']['p'])
    scores = scores.sort_values(by='gmean', ascending=False)

    # Show scores
    print("Data output:")
    print(scores)


    # ----------------
    # Plot
    # ----------------
    def scalar_colormap(values, cmap, vmin, vmax):
      """This method creates a colormap based on values.

      Parameters
      ----------
      values : array-like
        The values to create the corresponding colors

      cmap : str
        The colormap

      vmin, vmax : float
        The minimum and maximum possible values

      Returns
      -------
      scalar colormap
      """
      # Create scalar mappable
      norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
      mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
      # Gete color map
      colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
      # Return
      return colormap

    # Variables to plot.
    x = scores.index.values
    y_n = scores['ASAI_SCORE']['n'].values
    y_p = scores['ASAI_SCORE']['p'].values
    y_u = scores['ASAI_SCORE']['u'].values

    # Constants
    colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
    colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)
    colormap_u = scalar_colormap(y_u, cmap='Greens', vmin=-0.1, vmax=1.1)

    # ----------
    # Example
    # ----------
    # This example shows an stacked figure using more than two categories.
    # For instance, it uses gram-positive, gram-negative and gram-unknown.
    # All theindexes go within the range [0,1].
    # Create the figure
    f, axes = plt.subplots(1, 3, figsize=(7, 8))

    # Plot each category
    sns.barplot(x=y_p, y=x, palette=colormap_p, ax=axes[0], orient='h',
      saturation=0.5, label='Gram-positive')
    sns.barplot(x=y_n, y=x, palette=colormap_n, ax=axes[1], orient='h',
      saturation=0.5, label='Gram-negative')
    sns.barplot(x=y_u, y=x, palette=colormap_u, ax=axes[2], orient='h',
      saturation=0.5, label='Gram-unknown')

    # Configure
    sns.despine(bottom=True)

    # Format figure
    plt.subplots_adjust(wspace=0.0, hspace=0.0)

    # Remove yticks
    axes[1].set_yticks([])
    axes[2].set_yticks([])

    # Set title
    axes[0].set_title('Gram-positive')
    axes[1].set_title('Gram-negative')
    axes[2].set_title('Gram-unknown')

    # Set x-axis
    axes[0].set_xlim([0,1.1])
    axes[1].set_xlim([0,1.1])
    axes[2].set_xlim([0,1.1])

    # Adjust
    plt.tight_layout()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.926 seconds)


.. _sphx_glr_download__examples_indexes_plot_spectrum_multiple.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_spectrum_multiple.py <plot_spectrum_multiple.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_spectrum_multiple.ipynb <plot_spectrum_multiple.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

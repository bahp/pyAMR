
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\indexes\plot_spectrum_temporal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_indexes_plot_spectrum_temporal.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_indexes_plot_spectrum_temporal.py:


ASAI - Timeseries
-----------------

.. |1D30| replace:: 1D\ :sub:`30`
.. |1M1| replace:: 1M\ :sub:`1`
.. |1M30| replace:: 1M\ :sub:`30`
.. |7D4| replace:: 1M\ :sub:`12`
.. |1M12| replace:: 1M\ :sub:`12`
.. |1M6| replace:: 1M\ :sub:`6`
.. |1M3| replace:: 1M\ :sub:`3`
.. |12M1| replace:: 12M\ :sub:`1`
.. |SP| replace:: SHIFT\ :sub:`period`

In order to study the temporal evolution of AMR, it is necessary to generate a resistance
time series from the susceptibility test data. This is often achieved by computing the
resistance index on consecutive partitions of the data. Note that each partition contains
the susceptibility tests required to compute a resistance index. The traditional strategy
of dealing with partitions considers independent time intervals (see yearly, monthly or
weekly time series in Table 4.2). Unfortunately, this strategy forces to trade-off between
granularity (level of detail) and accuracy. On one side, weekly time series are highly
granular  but inaccurate. On the other hand, yearly time series are accurate but rough.
Note that the granularity is represented by the number of observations in a time series
while the accuracy is closely related with the number of susceptibility tests used to compute
the resistance index. Conversely, the overlapping time intervals strategy drops such dependence
by defining a window of fixed size which is moved across time. The length of the window is
denoted as period and the time step as shift. For instance, three time series obtained using
the overlapping time intervals strategy with a monthly shift (1M) and window lengths of 12,
6 and 3 have been presented for the sake of clarity (see |1M12|, |1M6| and |1M3| in Table 4.2).

.. image:: ../../_static/imgs/timeseries-generation.png
   :width: 500
   :align: center
   :alt: Generation of Time-Series

The notation to define the time series generation methodology (|SP|) is described with
various examples in Table 4.2. For instance, |7D4| defines a time series with weekly resistance
indexes (7D) calculated using the microbiology records available for the previous four weeks
(4x7D). It is important to note that some notations are equivalent representations of the same
susceptibility data at different granularities, hence their trends are comparable. As an example,
the trend estimated for |1M1| should be approximately thirty times the trend estimated for |1D30|.

.. GENERATED FROM PYTHON SOURCE LINES 46-50

Let's see how to compute ASAI time series with examples.

We first load the data and select one single pair for clarity.


.. GENERATED FROM PYTHON SOURCE LINES 51-137

.. code-block:: default
   :lineno-start: 54




    # Libraries
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import own libraries
    from pyamr.core.sari import sari
    from pyamr.core.asai import asai
    from pyamr.datasets.load import load_data_nhs


    # -------------------------
    # Methods
    # -------------------------
    def create_mapper(dataframe, column_key, column_value):
        """This method constructs a mapper

        Parameters
        ----------
        dataframe: dataframe-like
        The dataframe from which the columns are extracted

        column_key: string-like
        The name of the column with the values for the keys of the mapper

        column_value: string-like
        The name of the column with the values for the values of the mapper

        Returns
        -------
        dictionary
        """
        dataframe = dataframe[[column_key, column_value]]
        dataframe = dataframe.drop_duplicates()
        return dict(zip(dataframe[column_key], dataframe[column_value]))

    # -------------------------
    # Configuration
    # -------------------------
    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)

    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data, antimicrobials, microorganisms = load_data_nhs()

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.columns)
    print("\nDtypes:")
    print(data.dtypes)

    # Filter
    idxs_spec = data.specimen_code.isin(['URICUL'])
    idxs_abxs = data.antimicrobial_code.isin(['AAUG'])

    # Filter
    data = data[idxs_spec & idxs_abxs]

    # Filter dates (2016-2018 missing)
    data = data[data.date_received.between('2008-01-01', '2016-12-31')]






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
               date_received         date_outcome patient_id laboratory_number specimen_code  ...       antimicrobial_name sensitivity_method sensitivity  mic reported
    0    2009-01-03 00:00:00                  NaN      20091           X428501        BLDCUL  ...                 amikacin                NaN   sensitive  NaN      NaN
    1    2009-01-03 00:00:00                  NaN      20091           X428501        BLDCUL  ...              amoxycillin                NaN   resistant  NaN      NaN
    2    2009-01-03 00:00:00                  NaN      20091           X428501        BLDCUL  ...                augmentin                NaN   sensitive  NaN      NaN
    3    2009-01-03 00:00:00                  NaN      20091           X428501        BLDCUL  ...                aztreonam                NaN   sensitive  NaN      NaN
    4    2009-01-03 00:00:00                  NaN      20091           X428501        BLDCUL  ...              ceftazidime                NaN   sensitive  NaN      NaN
    ...                  ...                  ...        ...               ...           ...  ...                      ...                ...         ...  ...      ...
    7929 2021-01-21 23:56:00  2021-01-22 00:00:00     199863          H2230229         FBCUL  ...               gentamicin                 DD   resistant  NaN        Y
    7930 2021-01-21 23:56:00  2021-01-22 00:00:00     199863          H2230229         FBCUL  ...                meropenem                 DD   sensitive  NaN        Y
    7931 2021-01-21 23:56:00  2021-01-22 00:00:00     199863          H2230229         FBCUL  ...  piperacillin-tazobactam                 DD   sensitive  NaN        N
    7932 2021-01-21 23:56:00  2021-01-22 00:00:00     199863          H2230229         FBCUL  ...               temocillin                 DD   sensitive  NaN        N
    7933 2021-01-21 23:56:00  2021-01-22 00:00:00     199863          H2230229         FBCUL  ...              tigecycline                 DD   sensitive  NaN        N

    [3770034 rows x 15 columns]

    Columns:
    Index(['date_received', 'date_outcome', 'patient_id', 'laboratory_number', 'specimen_code', 'specimen_name', 'specimen_description', 'microorganism_code', 'microorganism_name', 'antimicrobial_code', 'antimicrobial_name', 'sensitivity_method', 'sensitivity', 'mic', 'reported'], dtype='object')

    Dtypes:
    date_received           datetime64[ns]
    date_outcome                    object
    patient_id                      object
    laboratory_number               object
    specimen_code                   object
    specimen_name                   object
    specimen_description            object
    microorganism_code              object
    microorganism_name              object
    antimicrobial_code              object
    antimicrobial_name              object
    sensitivity_method              object
    sensitivity                     object
    mic                             object
    reported                        object
    dtype: object




.. GENERATED FROM PYTHON SOURCE LINES 138-148

Independent Time Intervals (ITI)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is the traditional method used in antimicrobial surveillance systems where
the time spans considered are independent; that is, they do not overlap (e.g.
monthly time series - |1M1| or yearly timeseries - |12M1|).

.. todo :: Include in ASAI an option to filter and keep only those genus
           and species that have values over all the time period? or at
           least for more than 80 percent of the period?

.. GENERATED FROM PYTHON SOURCE LINES 149-315

.. code-block:: default
   :lineno-start: 150


    # -------------------------------------------
    # Compute ITI sari (temporal)
    # -------------------------------------------
    from pyamr.core.sari import SARI

    # Create SARI instance
    sari = SARI(groupby=['specimen_code',
                        'microorganism_code',
                        'antimicrobial_code',
                        'sensitivity'])

    # Create constants
    shift, period = '6M', '800D'

    # Compute sari timeseries
    temp = sari.compute(data, shift=shift,
        period=period, cdate='date_received')

    # Reset index
    temp = temp.reset_index()

    # Show
    print("\nSARI (temporal)")
    print(temp)


    # -------------------------------------------
    # Filter for sari (temporal)
    # -------------------------------------------
    # Appearance of organisms by date (or even freq instead of 1/0).
    s = pd.crosstab(temp['microorganism_code'], temp['date_received'])

    # Filter
    #temp = temp[temp['microorganism_code'].isin(s[s.all(axis=1)].index)]

    # Show
    print("Remaining microorganisms:")
    print(temp.microorganism_code.unique())

    # -------------------------
    # Format dataframe
    # -------------------------
    # Create mappers
    abx_map = create_mapper(antimicrobials, 'antimicrobial_code', 'category')
    org_map = create_mapper(microorganisms, 'microorganism_code', 'genus')
    grm_map = create_mapper(microorganisms, 'microorganism_code', 'gram_stain')

    #iti = iti[['date_received', 'freq', 'sari', 'antimicrobial_code', 'microorganism_code']]

    # Include categories
    temp['category'] = temp['antimicrobial_code'].map(abx_map)
    temp['genus'] = temp['microorganism_code'].map(org_map)
    temp['gram'] = temp['microorganism_code'].map(grm_map)

    # Empty grams are a new category (unknown - u)
    temp.gram = temp.gram.fillna('u')

    # Show
    print("\nMicroorganisms without gram stain:")
    print(temp[temp.gram=='u'].microorganism_code.unique())

    # -------------------------------
    # Create antimicrobial spectrum
    # -------------------------------
    # Libraries
    from pyamr.core.asai import ASAI

    # Create antimicrobial spectrum of activity instance
    asai = ASAI(column_genus='genus',
                column_specie='microorganism_code',
                column_resistance='sari',
                column_frequency='freq')
    # Compute
    scores = asai.compute(temp,
        groupby=['date_received',
                 'antimicrobial_code',
                 'gram'],
        weights='uniform',
        threshold=None,
        min_freq=0)

    # Unstack
    scores = scores

    # Show scores
    print("\nASAI:")
    print(scores.unstack())

    # Plot
    # ----
    # Create figure
    fig, axes = plt.subplots(1, 2, figsize=(10, 3), sharey=True)

    # Show
    sns.lineplot(data=scores, x='date_received', y='ASAI_SCORE',
                 hue='gram', palette="tab10", linewidth=0.75, linestyle='--',
                 marker='o', markersize=3, markeredgecolor='k',
                 markeredgewidth=0.5, markerfacecolor=None,
                 alpha=0.5, ax=axes[0])


    plt.show()

    """
    # -------------------------
    # Compute ASAI
    # -------------------------
    iti = iti.rename(columns={
        'microorganism_code': 'SPECIE',
        'sari': 'RESISTANCE',
        'genus': 'GENUS'
    })


    fig, axes = plt.subplots(1, 2, figsize=(10, 3), sharey=True)

    # Variable for filtering
    s = pd.crosstab(iti['SPECIE'], iti['date_received'])

    # Create aux (non filtered)
    aux = iti.copy(deep=True)
    aux = aux.groupby(['date_received',
                       'antimicrobial_code',
                       'gram'])\
             .apply(asai, weights='uniform', threshold=0.5)


    plt.show()

    # Create aux (filtered)
    aux2 = iti.copy(deep=True)
    aux2 = aux2[aux2['SPECIE'].isin(s[s.all(axis=1)].index)]
    aux2 = aux2.groupby(['date_received',
                       'antimicrobial_code',
                       'gram'])\
             .apply(asai, weights='uniform', threshold=0.8)

    a = 1
    # Display
    print("\nCrosstab:")
    print(s)
    print("\nSelected:")
    print(s[s.all(axis=1)])
    print("\nRemaining:")
    print(iti)
    print(aux.unstack())
    print(aux2.unstack())

    sns.lineplot(data=aux.reset_index(),
                 x='date_received',
                 y='ASAI_SCORE',
                 palette="tab10",
                 linewidth=0.75,
                 hue='gram',
                 marker='o',
                 ax=axes[0])

    sns.lineplot(data=aux2.reset_index(),
                 x='date_received',
                 y='ASAI_SCORE',
                 palette="tab10",
                 linewidth=0.75,
                 hue='gram',
                 marker='o',
                 ax=axes[1])
    """


.. image:: /_examples/indexes/images/sphx_glr_plot_spectrum_temporal_001.png
    :alt: plot spectrum temporal
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SARI (temporal)
    sensitivity specimen_code microorganism_code antimicrobial_code date_received  hide  intermediate  not done  resistant  sensitive  freq    sari
    0                  URICUL               ABAU               AAUG    2009-07-31   0.0           0.0       0.0        3.0        2.0   5.0  0.6000
    1                  URICUL               ABAU               AAUG    2010-01-31   0.0           0.0       0.0        4.0        3.0   7.0  0.5714
    2                  URICUL               ABAU               AAUG    2010-07-31   0.0           0.0       0.0        8.0        6.0  14.0  0.5714
    3                  URICUL               ABAU               AAUG    2011-01-31   0.0           0.0       0.0       11.0        8.0  19.0  0.5789
    4                  URICUL               ABAU               AAUG    2011-07-31   0.0           0.0       0.0       13.0        9.0  22.0  0.5909
    ..                    ...                ...                ...           ...   ...           ...       ...        ...        ...   ...     ...
    514                URICUL              VIRST               AAUG    2012-07-31   0.0           0.0       0.0        0.0        1.0   1.0  0.0000
    515                URICUL              VIRST               AAUG    2013-07-31   0.0           0.0       0.0        0.0        2.0   2.0  0.0000
    516                URICUL              VIRST               AAUG    2014-01-31   0.0           0.0       0.0        0.0        3.0   3.0  0.0000
    517                URICUL              YEAST               AAUG    2015-01-31   0.0           0.0       0.0        0.0        1.0   1.0  0.0000
    518                URICUL              YEAST               AAUG    2015-07-31   0.0           0.0       0.0        0.0        2.0   2.0  0.0000

    [519 rows x 11 columns]
    Remaining microorganisms:
    ['ABAU' 'ACHRO' 'ACINE' 'AEROC' 'AEROM' 'AFAE' 'AHS' 'AHYD' 'ALWO' 'AVIR'
     'AXYL' 'A_ARADIORES' 'A_BSGD' 'A_CHRYSEOB' 'A_CHRYSEOM' 'A_CTESTOSTE'
     'A_EAVIUM' 'A_ELUDWIGII' 'A_FLAVOBAC' 'A_HAFNIA S' 'A_ISOLATED'
     'A_LACTOBAC' 'A_MBG' 'A_PROVIDEN' 'A_RAOULTEL' 'A_SBOVIS' 'A_SODORIFER'
     'BACIL' 'BCEP' 'BHSA' 'BHSB' 'BHSC' 'BHSCG' 'BHSG' 'CAMA' 'CBRA' 'CFRE'
     'CIND' 'CITRO' 'CKOS' 'CNS' 'COLIF' 'CORYN' 'CSTR' 'DACI' 'DIPHT' 'EAER'
     'EASB' 'ECLO' 'ECOL' 'EFAM' 'EFAS' 'ENTB' 'ENTC' 'HAEMO' 'HALV' 'HINF'
     'KLEBS' 'KOXY' 'KPNE' 'LFC' 'MCOL' 'MICROC' 'MMOR' 'MODO' 'NEISS' 'NLF'
     'PAER' 'PANTO' 'PMIR' 'PPUT' 'PRET' 'PROTE' 'PSEUD' 'PSTUA' 'PVUL'
     'QMCOL' 'QMIXY' 'SAGA' 'SALMO' 'SAUR' 'SEPI' 'SERRA' 'SHAEM' 'SLIQ'
     'SLUG' 'SMAL' 'SMAR' 'SMIL' 'SMIT' 'SPYO' 'SSAL' 'SSAP' 'STAPH' 'STREP'
     'VIRST' 'YEAST']

    Microorganisms without gram stain:
    ['A_CHRYSEOM' 'A_ISOLATED' 'A_MBG' 'COLIF' 'DIPHT' 'LFC' 'MCOL' 'MODO'
     'NLF' 'QMCOL' 'QMIXY' 'YEAST']
    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:527: UserWarning:


                     Extreme resistances were found in the DataFrame. These rows
                     should be reviewed since these resistances might correspond
                     to pairs with low number of records.


    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:309: UserWarning:



                      The threshold has not been defined using either 
                      an input parameter (threshold=None) or a column in the 
                      dataframe 'THRESHOLD'. Thus a default threshold value 
                      of '0.5' will be used.


    ASAI:
                                     N_GENUS           N_SPECIE            ASAI_SCORE                
    gram                                   n    p    u        n     p    u          n       p       u
    date_received antimicrobial_code                                                                 
    2009-01-31    AAUG                   5.0  3.0  1.0      5.0   4.0  1.0     0.6000  1.0000  1.0000
    2009-07-31    AAUG                  13.0  3.0  1.0     14.0   8.0  1.0     0.5000  1.0000  1.0000
    2010-01-31    AAUG                   9.0  3.0  1.0     11.0   7.0  1.0     0.2778  1.0000  1.0000
    2010-07-31    AAUG                  13.0  3.0  2.0     15.0   8.0  2.0     0.3462  1.0000  1.0000
    2011-01-31    AAUG                  10.0  4.0  1.0     11.0  10.0  1.0     0.2500  1.0000  1.0000
    2011-07-31    AAUG                  11.0  3.0  1.0     12.0   6.0  1.0     0.3182  1.0000  1.0000
    2012-01-31    AAUG                  11.0  4.0  1.0     14.0   7.0  1.0     0.3182  1.0000  1.0000
    2012-07-31    AAUG                  11.0  4.0  2.0     21.0  10.0  3.0     0.2879  1.0000  1.0000
    2013-01-31    AAUG                  14.0  6.0  3.0     29.0  17.0  5.0     0.4048  0.9667  0.8333
    2013-07-31    AAUG                  19.0  4.0  3.0     36.0  13.0  3.0     0.5000  1.0000  1.0000
    2014-01-31    AAUG                  14.0  6.0  4.0     34.0  14.0  5.0     0.5179  1.0000  1.0000
    2014-07-31    AAUG                  16.0  4.0  4.0     36.0  16.0  6.0     0.4271  1.0000  0.8750
    2015-01-31    AAUG                  16.0  6.0  5.0     34.0  19.0  7.0     0.5458  1.0000  1.0000
    2015-07-31    AAUG                  13.0  4.0  3.0     27.0  13.0  3.0     0.4423  1.0000  1.0000
    2016-01-31    AAUG                  11.0  1.0  2.0     22.0   4.0  2.0     0.4394  1.0000  1.0000

    '\n# -------------------------\n# Compute ASAI\n# -------------------------\niti = iti.rename(columns={\n    \'microorganism_code\': \'SPECIE\',\n    \'sari\': \'RESISTANCE\',\n    \'genus\': \'GENUS\'\n})\n\n\nfig, axes = plt.subplots(1, 2, figsize=(10, 3), sharey=True)\n\n# Variable for filtering\ns = pd.crosstab(iti[\'SPECIE\'], iti[\'date_received\'])\n\n# Create aux (non filtered)\naux = iti.copy(deep=True)\naux = aux.groupby([\'date_received\',\n                   \'antimicrobial_code\',\n                   \'gram\'])         .apply(asai, weights=\'uniform\', threshold=0.5)\n\n\nplt.show()\n\n# Create aux (filtered)\naux2 = iti.copy(deep=True)\naux2 = aux2[aux2[\'SPECIE\'].isin(s[s.all(axis=1)].index)]\naux2 = aux2.groupby([\'date_received\',\n                   \'antimicrobial_code\',\n                   \'gram\'])         .apply(asai, weights=\'uniform\', threshold=0.8)\n\na = 1\n# Display\nprint("\nCrosstab:")\nprint(s)\nprint("\nSelected:")\nprint(s[s.all(axis=1)])\nprint("\nRemaining:")\nprint(iti)\nprint(aux.unstack())\nprint(aux2.unstack())\n\nsns.lineplot(data=aux.reset_index(),\n             x=\'date_received\',\n             y=\'ASAI_SCORE\',\n             palette="tab10",\n             linewidth=0.75,\n             hue=\'gram\',\n             marker=\'o\',\n             ax=axes[0])\n\nsns.lineplot(data=aux2.reset_index(),\n             x=\'date_received\',\n             y=\'ASAI_SCORE\',\n             palette="tab10",\n             linewidth=0.75,\n             hue=\'gram\',\n             marker=\'o\',\n             ax=axes[1])\n'




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.080 seconds)


.. _sphx_glr_download__examples_indexes_plot_spectrum_temporal.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_spectrum_temporal.py <plot_spectrum_temporal.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_spectrum_temporal.ipynb <plot_spectrum_temporal.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

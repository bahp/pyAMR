
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\indexes\plot_relmap_01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_indexes_plot_relmap_01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_indexes_plot_relmap_01.py:


SARI - Relplot (overall)
-------------------------

.. todo:: Explain...

.. GENERATED FROM PYTHON SOURCE LINES 8-195



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/indexes/images/sphx_glr_plot_relmap_01_001.png
          :alt: Antibiogram (with frequency)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/indexes/images/sphx_glr_plot_relmap_01_002.png
          :alt: Artist: Bernard Hernandez   Collection: Through the (AM) resistance glass   Exhibition: The fight for our lives  Location: Tate-Modern
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
                date_received         date_outcome LastActDateODBC  ...  microorganism_specie microorganism_gram_type antimicrobial_class
    0     2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN                 NaN
    1     2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN      cephalosporins
    2     2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN    fluoroquinolones
    3     2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN     aminoglycosides
    4     2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN                 NaN
    ...                   ...                  ...             ...  ...                   ...                     ...                 ...
    9995  2020-05-15 18:43:00  2020-05-19 00:00:00      2020-05-21  ...                   NaN                       n        sulfonamides
    9996  2020-05-15 18:43:00  2020-05-19 00:00:00      2020-05-21  ...                   NaN                       n      cephalosporins
    9997  2020-05-15 18:43:00  2020-05-19 00:00:00      2020-05-21  ...                   NaN                       n                 NaN
    9998  2020-05-15 18:43:00  2020-05-19 00:00:00      2020-05-21  ...                   NaN                       n          meropenems
    9999  2020-05-15 18:43:00  2020-05-19 00:00:00      2020-05-21  ...                   NaN                       n                 NaN

    [10000 rows x 22 columns]

    Columns:
    Index(['date_received', 'date_outcome', 'LastActDateODBC', 'patient_id', 'laboratory_number', 'specimen_code', 'specimen_name', 'specimen_description', 'microorganism_piece_counter', 'microorganism_code', 'microorganism_name', 'antimicrobial_code', 'antimicrobial_name', 'sensitivity_method',
           'sensitivity_code', 'mic', 'reported', 'sensitivity', 'microorganism_genus', 'microorganism_specie', 'microorganism_gram_type', 'antimicrobial_class'],
          dtype='object')

    Data:
    SENSITIVITY  SPECIE ANTIBIOTIC  highly resistant  intermediate  not determined  ...  sensitive    sari  freq  microorganism_genus antimicrobial_class
    0              ABAU       AAMI               0.0           0.0             0.0  ...        9.0  0.0000   9.0        acinetobacter     aminoglycosides
    1              ABAU       AAMP               0.0           0.0             0.0  ...        0.0  1.0000   1.0        acinetobacter                 NaN
    2              ABAU       AAUG               0.0           0.0             0.0  ...        0.0  1.0000   2.0        acinetobacter                 NaN
    3              ABAU       AAZT               0.0           0.0             0.0  ...        0.0  1.0000   1.0        acinetobacter         monobactams
    4              ABAU       ACAZ               0.0           0.0             0.0  ...        0.0  1.0000   1.0        acinetobacter      cephalosporins
    ..              ...        ...               ...           ...             ...  ...        ...     ...   ...                  ...                 ...
    576          SPARAS       AMLS               0.0           0.0             0.0  ...        0.0  1.0000   1.0        streptococcus                 NaN
    577           STREP       APEN               0.0           1.0             0.0  ...        2.0  0.3333   3.0        streptococcus         penicillins
    578           STREP       AVAN               0.0           0.0             0.0  ...        3.0  0.0000   3.0        streptococcus        glycopeptide
    579           STREP       ACLI               0.0           0.0             0.0  ...        2.0  0.3333   3.0        streptococcus          macrolides
    580           STREP       AMLS               0.0           0.0             0.0  ...        0.0  1.0000   1.0        streptococcus                 NaN

    [581 rows x 11 columns]

    Columns:
    Index(['SPECIE', 'ANTIBIOTIC', 'highly resistant', 'intermediate', 'not determined', 'resistant', 'sensitive', 'sari', 'freq', 'microorganism_genus', 'antimicrobial_class'], dtype='object', name='SENSITIVITY')

    Frequencies:
    count    581.0000
    mean      15.8468
    std       28.6783
    min        1.0000
    25%        1.0000
    50%        4.0000
    75%       13.0000
    max      195.0000
    Name: freq, dtype: float64






|

.. code-block:: default
   :lineno-start: 9


    # Libraries
    import sys
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.core.sari import SARI
    from pyamr.core.freq import Frequency
    from pyamr.datasets.load import make_susceptibility

    # -------------------------
    # Configuration
    # -------------------------
    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)

    # ------------------------
    # Methods
    # ------------------------
    def create_mapper(dataframe, column_key, column_value):
        """This method constructs a mapper

        Parameters
        ----------
        dataframe: dataframe-like
          The dataframe from which the columns are extracted

        column_key: string-like
          The name of the column with the values for the keys of the mapper

        column_value: string-like
          The name of the column with the values for the values of the mapper

        Returns
        -------
        dictionary
        """
        dataframe = dataframe[[column_key, column_value]]
        dataframe = dataframe.drop_duplicates()
        return dict(zip(dataframe[column_key], dataframe[column_value]))

    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data = make_susceptibility()
    data = data.head(10000)

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.columns)

    # -------------------------------------------
    # Compute Freq and SARI
    # -------------------------------------------
    # Create instance
    freq = Frequency(column_antibiotic='antimicrobial_code',
                     column_organism='microorganism_code',
                     column_date='date_received',
                     column_outcome='sensitivity')

    # Compute frequencies (overall)
    freq_overall = freq.compute(data, by_category='pairs')

    # Compute SARI
    sari_overall = SARI(strategy='hard').compute(freq_overall)


    # -------------------------------------------
    # Plot antibiogram clustered
    # -------------------------------------------

    # -------------------------------
    # Create matrix
    # -------------------------------
    # Create mappers
    abx_map = create_mapper(data, 'antimicrobial_code', 'antimicrobial_class')
    org_map = create_mapper(data, 'microorganism_code', 'microorganism_genus')

    # Create matrix
    matrix = sari_overall.copy(deep=True)
    matrix['freq'] = freq_overall.sum(axis=1)
    matrix = matrix.reset_index()
    matrix['microorganism_genus'] = matrix.SPECIE.map(org_map)
    matrix['antimicrobial_class'] = matrix.ANTIBIOTIC.map(abx_map)

    # Show
    print("\nData:")
    print(matrix)
    print("\nColumns:")
    print(matrix.columns)
    print("\nFrequencies:")
    print(matrix.freq.describe())


    # -------------------------------
    # Plot
    # -------------------------------
    # Create colormap
    cmap = sns.color_palette("Reds", desat=0.5, n_colors=10)

    # Configura
    sizes = (matrix.freq.min(), matrix.freq.max())

    # Plot
    g = sns.relplot(data=matrix, x='SPECIE',
        y='ANTIBIOTIC', hue="sari", size="freq",
        palette='Reds', hue_norm=(0, 1), edgecolor=".7", # 'k'
        linewidth=1.0, height=10, sizes=sizes, # size_norm=(0, 100000),
        dashes=True, legend='brief',
    )

    # Configure plot
    g.set(xlabel="Microorganisms",
          ylabel="Antimicrobials",
          aspect="equal")
    g.despine(left=True, bottom=True)
    g.ax.margins(.02)

    # Configure xticks
    for label in g.ax.get_xticklabels():
        label.set_rotation(90)

    # Configure legend
    for artist in g.legend.legendHandles:
        artist.set_edgecolor(".7")
        artist.set_linewidth(1.0)

    # Set suptitle
    plt.suptitle('Antibiogram (with frequency)', fontsize=12)

    # Add grid lines.
    #plt.grid(linestyle='-', linewidth=0.5, color='.7')

    # Tight layout
    plt.tight_layout()

    # ----------------------------------
    # Plotting a useless piece of art!
    # ----------------------------------
    # Plot piece of art
    g = sns.relplot(data=matrix, x='SPECIE',
        y='ANTIBIOTIC', hue="sari", size="freq",
        palette="Reds", hue_norm=(0, 1),
        linewidth=0.5, kind='line',
        height=10, sizes=sizes)

    # Configure plot
    g.set(xlabel="", ylabel="",
          title='Artist: Bernard Hernandez \n '
                'Collection: Through the (AM) resistance glass \n '
                'Exhibition: The fight for our lives \n'
                'Location: Tate-Modern',
          aspect="equal")
    g.despine(left=True, bottom=True)
    g.ax.margins(.02)

    # Configure xticks
    for label in g.ax.get_xticklabels():
        label.set_rotation(90)

    # Configure legend
    for artist in g.legend.legendHandles:
        artist.set_linewidth(0.5)

    # Show
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.189 seconds)


.. _sphx_glr_download__examples_indexes_plot_relmap_01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_relmap_01.py <plot_relmap_01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_relmap_01.ipynb <plot_relmap_01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\indexes\plot_trend_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_indexes_plot_trend_basic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_indexes_plot_trend_basic.py:


SART - Trend as slope of WLS
----------------------------

.. todo: Explain

.. note: The slope of the fitted straight line is what we denote
         as SART (Single Antibiotic Resistance Trend). Need to
         find the code that computes and plots the trends as
         in the PhD thesis.

.. GENERATED FROM PYTHON SOURCE LINES 14-127



.. image-sg:: /_examples/indexes/images/sphx_glr_plot_trend_basic_001.png
   :alt: plot trend basic
   :srcset: /_examples/indexes/images/sphx_glr_plot_trend_basic_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\kelda\desktop\repositories\virtualenvs\test-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log


    Series:
    wls-rsquared                  0.5778
    wls-rsquared_adj              0.5735
    wls-fvalue                  134.1006
    wls-fprob                        0.0
    wls-aic                          inf
    wls-bic                          inf
    wls-llf                         -inf
    wls-mse_model            201334.5339
    wls-mse_resid              1501.3696
    wls-mse_total              3519.8864
    wls-const_coef              251.5555
    wls-const_std                 17.319
    wls-const_tvalue             14.5248
    wls-const_tprob                  0.0
    wls-const_cil               217.1864
    wls-const_ciu               285.9245
    wls-x1_coef                   2.8026
    wls-x1_std                     0.242
    wls-x1_tvalue                11.5802
    wls-x1_tprob                     0.0
    wls-x1_cil                    2.3223
    wls-x1_ciu                    3.2829
    wls-s_dw               Jarque-Ber...
    wls-s_jb_value             Prob(JB):
    wls-s_jb_prob              Cond. No.
    wls-s_skew                 Kurtosis:
    wls-s_kurtosis                      
    wls-s_omnibus_value    Prob(Omnib...
    wls-s_omnibus_prob             Skew:
    wls-m_dw                      0.1245
    wls-m_jb_value                6.7158
    wls-m_jb_prob                 0.0348
    wls-m_skew                   -0.5869
    wls-m_kurtosis                3.4836
    wls-m_nm_value                 7.234
    wls-m_nm_prob                 0.0269
    wls-m_ks_value                0.6035
    wls-m_ks_prob                    0.0
    wls-m_shp_value               0.9338
    wls-m_shp_prob                0.0001
    wls-m_ad_value                 2.875
    wls-m_ad_nnorm                 False
    wls-missing                    raise
    wls-exog               [[1.0, 0.0...
    wls-endog              [39.829307...
    wls-trend                          c
    wls-weights            [0.0752208...
    wls-W                  <pyamr.met...
    wls-model              <statsmode...
    wls-id                 WLS(c,Sig(...
    dtype: object

    Regression line:
    [251.55549109 254.35808977 257.16068845 259.96328712 262.7658858
     265.56848448 268.37108315 271.17368183 273.97628051 276.77887919]

    Summary:
                                WLS Regression Results                            
    ==============================================================================
    Dep. Variable:                      y   R-squared:                       0.578
    Model:                            WLS   Adj. R-squared:                  0.573
    Method:                 Least Squares   F-statistic:                     134.1
    Date:                Wed, 15 Feb 2023   Prob (F-statistic):           4.71e-20
    Time:                        13:32:39   Log-Likelihood:                   -inf
    No. Observations:                 100   AIC:                               inf
    Df Residuals:                      98   BIC:                               inf
    Df Model:                           1                                         
    Covariance Type:            nonrobust                                         
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        251.5555     17.319     14.525      0.000     217.186     285.925
    x1             2.8026      0.242     11.580      0.000       2.322       3.283
    ==============================================================================
    Omnibus:                        9.879   Durbin-Watson:                   0.388
    Prob(Omnibus):                  0.007   Jarque-Bera (JB):               12.517
    Skew:                           0.507   Prob(JB):                      0.00191
    Kurtosis:                       4.405   Cond. No.                         224.
    Normal (N):                     7.234   Prob(N):                         0.027
    ==============================================================================






|

.. code-block:: default
   :lineno-start: 14

    # Import class.
    import sys
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.api as sm
    import statsmodels.robust.norms as norms

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.wls import WLSWrapper
    from pyamr.metrics.weights import SigmoidA

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create method to compute weights from frequencies
    W = SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0)

    # Note that the function fit will call M.weights(weights) inside and will
    # store the M converter in the instance. Therefore, the code executed is
    # equivalent to <weights=M.weights(f)> with the only difference being that
    # the weight converter is not saved.
    wls = WLSWrapper(estimator=sm.WLS).fit( \
        exog=x, endog=y, trend='c', weights=f,
        W=W, missing='raise')

    # Print series.
    print("\nSeries:")
    print(wls.as_series())

    # Print regression line.
    print("\nRegression line:")
    print(wls.line(np.arange(10)))

    # Print summary.
    print("\nSummary:")
    print(wls.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/wls-sample.pickle'

    # Save
    #wls.save(fname=fname)

    # Load
    #wls = WLSWrapper().load(fname=fname)

    # -------------
    #  Example I
    # -------------
    # This example shows how to make predictions using the wrapper and how
    # to plot the resultin data. In addition, it compares the intervales
    # provided by get_prediction (confidence intervals) and the intervals
    # provided by wls_prediction_std (prediction intervals). 
    #
    # To Do: Implement methods to compute CI and PI (see regression).

    # Variables.
    start, end = None, 180

    # Compute predictions (exogenous?). It returns a 2D array
    # where the rows contain the time (t), the mean, the lower
    # and upper confidence (or prediction?) interval.
    preds = wls.get_prediction(start=start, end=end)


    # Create figure
    fig, ax = plt.subplots(1, 1, figsize=(11,5))

    # Plotting confidence intervals
    # -----------------------------
    # Plot truth values.
    ax.plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
                  markeredgecolor='k', markeredgewidth=0.5,
                  markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    ax.plot(preds[0,:], preds[1, :], color='#FF0000', alpha=1.00,
                    linewidth=2.0, label=wls._identifier(short=True))

    # Plot the confidence intervals.
    ax.fill_between(preds[0, :], preds[2, :],
                                 preds[3, :],
                                 color='r',
                                 alpha=0.1)

    # Legend
    plt.legend()

    # Show
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.025 seconds)


.. _sphx_glr_download__examples_indexes_plot_trend_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_trend_basic.py <plot_trend_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_trend_basic.ipynb <plot_trend_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

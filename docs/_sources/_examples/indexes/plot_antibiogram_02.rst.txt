
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\indexes\plot_antibiogram_02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_indexes_plot_antibiogram_02.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_indexes_plot_antibiogram_02.py:


SARI - Antibiogram (by culture)
-------------------------------

.. todo:: Explain...

.. GENERATED FROM PYTHON SOURCE LINES 8-158



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_examples/indexes/images/sphx_glr_plot_antibiogram_02_001.png
          :alt: Antibiogram (BLDCUL)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/indexes/images/sphx_glr_plot_antibiogram_02_002.png
          :alt: Antibiogram (SPTCUL)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/indexes/images/sphx_glr_plot_antibiogram_02_003.png
          :alt: Antibiogram (URICUL)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/indexes/images/sphx_glr_plot_antibiogram_02_004.png
          :alt: Antibiogram (URNCUL)
          :class: sphx-glr-multi-img

    *

      .. image:: /_examples/indexes/images/sphx_glr_plot_antibiogram_02_005.png
          :alt: Antibiogram (WOUCUL)
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
                  date_received         date_outcome LastActDateODBC  ...  microorganism_specie microorganism_gram_type antimicrobial_class
    0       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN                 NaN
    1       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN      cephalosporins
    2       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN    fluoroquinolones
    3       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN     aminoglycosides
    4       2020-04-24 18:09:00  2020-04-27 00:00:00      27/04/2020  ...                   NaN                     NaN                 NaN
    ...                     ...                  ...             ...  ...                   ...                     ...                 ...
    124640  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22  ...                   NaN                     NaN          meropenems
    124641  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22  ...                   NaN                     NaN                 NaN
    124642  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22  ...                   NaN                     NaN         penicillins
    124643  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22  ...                   NaN                     NaN                 NaN
    124644  2021-01-18 16:09:00  2021-01-22 00:00:00      2021-01-22  ...                   NaN                     NaN     aminoglycosides

    [124645 rows x 22 columns]

    Columns:
    Index(['date_received', 'date_outcome', 'LastActDateODBC', 'patient_id', 'laboratory_number', 'specimen_code', 'specimen_name', 'specimen_description', 'microorganism_piece_counter', 'microorganism_code', 'microorganism_name', 'antimicrobial_code', 'antimicrobial_name', 'sensitivity_method',
           'sensitivity_code', 'mic', 'reported', 'sensitivity', 'microorganism_genus', 'microorganism_specie', 'microorganism_gram_type', 'antimicrobial_class'],
          dtype='object')






|

.. code-block:: default
   :lineno-start: 9


    # Libraries
    import sys
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.core.sari import SARI
    from pyamr.core.freq import Frequency
    from pyamr.datasets.load import make_susceptibility

    # -------------------------
    # Configuration
    # -------------------------
    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)

    # ------------------
    # Methods
    # ------------------
    def get_category_colors(index, category, cmap='tab10'):
        """This method creates the colors for the different elements in
        categorical feature vector.

        Parameters
        ----------
        values : array-like
            The vector with the categorical values

        cmap: string-like
            The colormap to use

        default: string-like
            The color to be used for the first value. Note that this
            value needs to appear first on the the sorted list, as such
            it is recommended to set is as _default.

        Returns
        -------
        """
        # Get categories
        categories = index.get_level_values(category)
        # Get unique elements
        unique = np.unique(categories)
        # Create the palette
        palette = sns.color_palette(cmap, desat=0.5, n_colors=unique.shape[0])
        # Create mappers from category to color
        mapper = dict(zip(map(str, unique), palette))
        # Create list with colors for each category
        colors = pd.Series(categories, index=index).map(mapper)
        # Return
        return colors


    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data = make_susceptibility()

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.columns)

    # -------------------------------------------
    # For each culture type
    # -------------------------------------------
    # Count records per order code
    specimen_code_count = data.specimen_code.value_counts()

    # Filter most frequent order codes
    data = data[data.specimen_code.isin( \
        specimen_code_count.index.values[:5])]

    # Loop
    for specimen_code, df in data.groupby(by='specimen_code'):

        # -------------------------------------------
        # Compute Freq and SARI
        # -------------------------------------------
        # Create instance
        freq = Frequency(column_antibiotic='antimicrobial_code',
                         column_organism='microorganism_code',
                         column_date='date_received',
                         column_outcome='sensitivity')

        # Compute frequencies (overall)
        freq_overall = freq.compute(df, by_category='pairs')

        # Compute SARI
        sari_overall = SARI(strategy='hard').compute(freq_overall)

        # ------------
        # Plot Heatmap
        # ------------
        # Create matrix
        matrix = sari_overall[['sari']]
        matrix = matrix.unstack() * 100
        matrix.columns = matrix.columns.droplevel()

        # Create figure
        f, ax = plt.subplots(1, 1, figsize=(8,8))

        # Create colormap
        cmap = sns.color_palette("Reds", desat=0.5, n_colors=10)

        # Specify cbar axes
        #cbar_ax = f.add_axes([.925, .3, .05, .3])

        # Plot
        ax = sns.heatmap(data=matrix, annot=True, fmt=".0f",
                         annot_kws={'fontsize': 7}, cmap=cmap,
                         linewidth=0.5, vmin=0, vmax=100, ax=ax,
                         xticklabels=1, yticklabels=1)
                         # cbar_ax=cbar_ax)

        # Configure axes
        ax.set(aspect="equal")

        # Set rotation
        plt.yticks(rotation=0)

        # Add title
        plt.suptitle("Antibiogram (%s)" % specimen_code,
            fontsize=15)

        # Tight layout
        plt.tight_layout()
        #plt.subplots_adjust(right=0.91)

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.162 seconds)


.. _sphx_glr_download__examples_indexes_plot_antibiogram_02.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_antibiogram_02.py <plot_antibiogram_02.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_antibiogram_02.ipynb <plot_antibiogram_02.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

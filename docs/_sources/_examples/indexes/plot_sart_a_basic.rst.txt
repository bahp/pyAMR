
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\indexes\plot_sart_a_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_indexes_plot_sart_a_basic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_indexes_plot_sart_a_basic.py:


``SART`` - Trend as slope of ``WLS``
------------------------------------

.. todo: Explain

.. note: The slope of the fitted straight line is what we denote
         as SART (Single Antibiotic Resistance Trend). Need to
         find the code that computes and plots the trends as
         in the PhD thesis.

.. GENERATED FROM PYTHON SOURCE LINES 14-127



.. image-sg:: /_examples/indexes/images/sphx_glr_plot_sart_a_basic_001.png
   :alt: plot sart a basic
   :srcset: /_examples/indexes/images/sphx_glr_plot_sart_a_basic_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\kelda\desktop\repositories\virtualenvs\venv-py3790-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log


    Series:
    wls-rsquared                  0.4966
    wls-rsquared_adj              0.4914
    wls-fvalue                   96.6641
    wls-fprob                        0.0
    wls-aic                          inf
    wls-bic                          inf
    wls-llf                         -inf
    wls-mse_model            157551.3332
    wls-mse_resid              1629.8847
    wls-mse_total              3204.8488
    wls-const_coef              266.5654
    wls-const_std                18.5348
    wls-const_tvalue             14.3819
    wls-const_tprob                  0.0
    wls-const_cil               229.7838
    wls-const_ciu               303.3471
    wls-x1_coef                   2.5438
    wls-x1_std                    0.2587
    wls-x1_tvalue                 9.8318
    wls-x1_tprob                     0.0
    wls-x1_cil                    2.0303
    wls-x1_ciu                    3.0572
    wls-s_dw                       0.499
    wls-s_jb_value                36.748
    wls-s_jb_prob                    0.0
    wls-s_skew                     0.765
    wls-s_kurtosis                 5.545
    wls-s_omnibus_value            19.46
    wls-s_omnibus_prob               0.0
    wls-m_dw                      0.1159
    wls-m_jb_value                6.9992
    wls-m_jb_prob                 0.0302
    wls-m_skew                   -0.5603
    wls-m_kurtosis                3.6513
    wls-m_nm_value                7.4381
    wls-m_nm_prob                 0.0243
    wls-m_ks_value                0.6095
    wls-m_ks_prob                    0.0
    wls-m_shp_value               0.9304
    wls-m_shp_prob                0.0001
    wls-m_ad_value                3.2366
    wls-m_ad_nnorm                 False
    wls-missing                    raise
    wls-exog               [[1.0, 0.0...
    wls-endog              [24.086375...
    wls-trend                          c
    wls-weights            [0.2088840...
    wls-W                  <pyamr.met...
    wls-model              <statsmode...
    wls-id                 WLS(c,Sig(...
    dtype: object

    Regression line:
    [266.57 269.11 271.65 274.2  276.74 279.28 281.83 284.37 286.92 289.46]

    Summary:
                                WLS Regression Results                            
    ==============================================================================
    Dep. Variable:                      y   R-squared:                       0.497
    Model:                            WLS   Adj. R-squared:                  0.491
    Method:                 Least Squares   F-statistic:                     96.66
    Date:                Mon, 12 Jun 2023   Prob (F-statistic):           2.81e-16
    Time:                        16:01:52   Log-Likelihood:                   -inf
    No. Observations:                 100   AIC:                               inf
    Df Residuals:                      98   BIC:                               inf
    Df Model:                           1                                         
    Covariance Type:            nonrobust                                         
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        266.5654     18.535     14.382      0.000     229.784     303.347
    x1             2.5438      0.259      9.832      0.000       2.030       3.057
    ==============================================================================
    Omnibus:                       19.460   Durbin-Watson:                   0.499
    Prob(Omnibus):                  0.000   Jarque-Bera (JB):               36.748
    Skew:                           0.765   Prob(JB):                     1.05e-08
    Kurtosis:                       5.545   Cond. No.                         232.
    Normal (N):                     7.438   Prob(N):                         0.024
    ==============================================================================






|

.. code-block:: default
   :lineno-start: 14

    # Import class.
    import sys
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.api as sm
    import statsmodels.robust.norms as norms

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.wls import WLSWrapper
    from pyamr.metrics.weights import SigmoidA

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create method to compute weights from frequencies
    W = SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0)

    # Note that the function fit will call M.weights(weights) inside and will
    # store the M converter in the instance. Therefore, the code executed is
    # equivalent to <weights=M.weights(f)> with the only difference being that
    # the weight converter is not saved.
    wls = WLSWrapper(estimator=sm.WLS).fit( \
        exog=x, endog=y, trend='c', weights=f,
        W=W, missing='raise')

    # Print series.
    print("\nSeries:")
    print(wls.as_series())

    # Print regression line.
    print("\nRegression line:")
    print(wls.line(np.arange(10)))

    # Print summary.
    print("\nSummary:")
    print(wls.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/wls-sample.pickle'

    # Save
    #wls.save(fname=fname)

    # Load
    #wls = WLSWrapper().load(fname=fname)

    # -------------
    #  Example I
    # -------------
    # This example shows how to make predictions using the wrapper and how
    # to plot the resultin data. In addition, it compares the intervales
    # provided by get_prediction (confidence intervals) and the intervals
    # provided by wls_prediction_std (prediction intervals). 
    #
    # To Do: Implement methods to compute CI and PI (see regression).

    # Variables.
    start, end = None, 180

    # Compute predictions (exogenous?). It returns a 2D array
    # where the rows contain the time (t), the mean, the lower
    # and upper confidence (or prediction?) interval.
    preds = wls.get_prediction(start=start, end=end)


    # Create figure
    fig, ax = plt.subplots(1, 1, figsize=(11,5))

    # Plotting confidence intervals
    # -----------------------------
    # Plot truth values.
    ax.plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
                  markeredgecolor='k', markeredgewidth=0.5,
                  markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    ax.plot(preds[0,:], preds[1, :], color='#FF0000', alpha=1.00,
                    linewidth=2.0, label=wls._identifier(short=True))

    # Plot the confidence intervals.
    ax.fill_between(preds[0, :], preds[2, :],
                                 preds[3, :],
                                 color='r',
                                 alpha=0.1)

    # Legend
    plt.legend()

    # Show
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.100 seconds)


.. _sphx_glr_download__examples_indexes_plot_sart_a_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sart_a_basic.py <plot_sart_a_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sart_a_basic.ipynb <plot_sart_a_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\forecasting\plot_wls_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_forecasting_plot_wls_search.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_forecasting_plot_wls_search.py:


WLS - Search
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 6-140



.. image-sg:: /_examples/forecasting/images/sphx_glr_plot_wls_search_001.png
   :alt: plot wls search
   :srcset: /_examples/forecasting/images/sphx_glr_plot_wls_search_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    c:\users\kelda\desktop\repositories\virtualenvs\test-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\test-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\test-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\test-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\test-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log


    Grid search:
                                0              1              2              3              4              5
    wls-rsquared           0.7356         0.4892         0.4635         0.4089         0.4274         0.2755
    wls-rsquare...         0.7329          0.484          0.458         0.4028         0.4215         0.2681
    wls-fvalue           272.7119        93.8611        84.6652        67.7846        73.1409        37.2598
    wls-fprob                 0.0            0.0            0.0            0.0            0.0            0.0
    wls-aic             1138.3265            inf            inf            inf            inf            inf
    wls-bic             1143.5369            inf            inf            inf            inf            inf
    wls-llf             -567.1633           -inf           -inf           -inf           -inf           -inf
    wls-mse_model    1375058.5724    117112.1279    101910.5722     69171.6848     65373.8791     23727.4174
    wls-mse_resid       5042.1656      1247.7177      1203.6891      1020.4632       893.8077       636.8106
    wls-mse_total      18880.7152      2418.0652      2220.9303      1708.8594      1545.1215        870.049
    wls-const_coef       164.2037       283.2499       293.5027        315.996       311.1219       367.4127
    wls-const_std         14.0958        17.2107        17.1333        16.7212        16.7739        14.4935
    wls-const_t...        11.6491        16.4577        17.1306        18.8979         18.548        25.3502
    wls-const_t...            0.0            0.0            0.0            0.0            0.0            0.0
    wls-const_cil        136.2311       249.0957       259.5023       282.8134       277.8346       338.6509
    wls-const_ciu        192.1764       317.4041       327.5031       349.1787       344.4091       396.1745
    wls-x1_coef            4.0623         2.3115         2.1788         1.8844         1.9397          1.205
    wls-x1_std              0.246         0.2386         0.2368         0.2289         0.2268         0.1974
    wls-x1_tvalue          16.514         9.6882         9.2014         8.2331         8.5522         6.1041
    wls-x1_tprob              0.0            0.0            0.0            0.0            0.0            0.0
    wls-x1_cil             3.5741          1.838         1.7089         1.4302         1.4896         0.8132
    wls-x1_ciu             4.5505         2.7849         2.6486         2.3387         2.3898         1.5967
    wls-s_dw                0.175           0.56          0.602          0.723          0.729          1.077
    wls-s_jb_value          4.267         15.201         19.086         28.726          22.99         75.413
    wls-s_jb_prob           0.118         0.0005         0.0001            0.0            0.0            0.0
    wls-s_skew              0.506          0.397          0.402          0.457          0.476          1.118
    wls-s_kurtosis          2.966          4.737          4.983          5.461          5.148          6.619
    wls-s_omnib...          4.457          9.735         10.873         13.647         12.628         31.065
    wls-s_omnib...          0.108          0.008          0.004          0.001          0.002            0.0
    wls-m_dw               0.1746         0.1016         0.0945         0.0804         0.0833         0.0562
    wls-m_jb_value         4.2672         11.584        13.1438        15.9629        15.5062        18.9737
    wls-m_jb_prob          0.1184         0.0031         0.0014         0.0003         0.0004         0.0001
    wls-m_skew             0.5057        -0.8024        -0.8613        -0.9609        -0.9452        -1.0629
    wls-m_kurtosis         2.9657         3.4522         3.4323         3.3716         3.3844         3.1861
    wls-m_nm_value         4.4575        11.2374        12.3852         14.295         14.001        15.9591
    wls-m_nm_prob          0.1077         0.0036          0.002         0.0008         0.0009         0.0003
    wls-m_ks_value         0.5799         0.5933           0.61         0.6397          0.633           0.68
    wls-m_ks_prob             0.0            0.0            0.0            0.0            0.0            0.0
    wls-m_shp_v...         0.9602         0.9213         0.9137         0.8988         0.9014         0.8732
    wls-m_shp_prob         0.0042            0.0            0.0            0.0            0.0            0.0
    wls-m_ad_value         1.4746         3.3882          3.718         4.3288         4.2222         5.2432
    wls-m_ad_nnorm          False          False          False          False          False          False
    wls-exog        [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...
    wls-endog       [25.659629...  [25.659629...  [25.659629...  [25.659629...  [25.659629...  [25.659629...
    wls-trend                   c              c              c              c              c              c
    wls-weights     [1.0, 1.0,...  [0.0106259...  [0.0079270...  [0.0035695...  [0.0039110...  [1.0949992...
    wls-W           <statsmode...  <pyamr.met...  <pyamr.met...  <pyamr.met...  <pyamr.met...  <pyamr.met...
    wls-model       <statsmode...  <statsmode...  <statsmode...  <statsmode...  <statsmode...  <statsmode...
    wls-id          WLS(c,Leas...  WLS(c,Sig(...  WLS(c,Sig(...  WLS(c,Sig(...  WLS(c,Sig(...  WLS(c,Sig(...






|

.. code-block:: default
   :lineno-start: 6

    # Import class.
    import sys
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.api as sm
    import statsmodels.robust.norms as norms

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.wls import WLSWrapper
    from pyamr.metrics.weights import SigmoidA

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # -----------------------------
    # Example II
    # -----------------------------
    # This example performs grid search on a number of possible configurations
    # of the WLSWrapper. In particular, it tests the effect of different 
    # objects to compute the weights from the frequencies. It presents both
    # the resulting pandas dataframe and also a figure.

    # Configuration
    # -------------
    # This variable contains the weight functions to test. Note that in 
    # the norms module there are other options such as [norms.HuberT(), 
    # norms.Hampel(), norms.TrimmedMean(), norms.TukeyBiweight(), 
    # norms.AndreWave(), norms.RamsayE()]
    w_func = [
        norms.LeastSquares(),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[10, 90]),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[25, 75]),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[25, 90]),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[40, 50])]

    # The grid search parameters.
    grid_params = [
        # {'exog': [x], 'endog': [y], 'trend': ['c']},
        {'exog': [x], 'endog': [y], 'trend': ['c'], 'weights': [f], 'W': w_func}
    ]

    # Grid search
    # ------------
    # Perform grid search.
    summary = WLSWrapper(estimator=sm.WLS) \
        .grid_search(grid_params=grid_params)

    # Show grid results
    # ..todo: It is weird to create an WLSWrapper jut to
    #         be able to use themethod from_list_dataframe.
    #         try to implemented separately.
    print("\nGrid search:")
    print(WLSWrapper().from_list_dataframe(summary).T)

    # Prediction
    # ----------
    # Variables.
    start, end = 10, 150

    # Create figure
    fig, axes = plt.subplots(1, 3, figsize=(10, 5))

    # Plot truth values.
    axes[0].plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot frequencies
    axes[0].bar(x, f, color='gray', alpha=0.7, label='Frequency')

    # For each of the models in summary
    for i, model in enumerate(summary):

        # Compute predictions.
        preds = model.get_prediction(start=start, end=end)

        # Plot forecasted values.
        axes[0].plot(preds[0, :], preds[1, :],
                     linewidth=1.0,
                     label=model._identifier(short=True))

        # Plot the confidence intervals.
        axes[0].fill_between(preds[0, :],
                             preds[2, :],
                             preds[3, :],
                             alpha=0.1)

        # Plot weights assigned to each observation
        axes[1].plot(model.weights, marker='o', alpha=0.5,
                     markeredgecolor='k', markeredgewidth=0.5,
                     markersize=4, linewidth=0.00,
                     label=model._identifier(short=True))

        # Plot weights converter (W) functions.
        if model.W is not None:
            axes[2].plot(np.linspace(0, 1, 100),
                         model.W.weights(np.linspace(0, 1, 100)),
                         label=model._identifier(short=True))

    # Grid.
    axes[0].grid(linestyle='--', linewidth=0.35, alpha=0.5)
    axes[1].grid(linestyle='--', linewidth=0.35, alpha=0.5)
    axes[2].grid(linestyle='--', linewidth=0.35, alpha=0.5)

    # Legend.
    axes[0].legend(loc=0)
    axes[1].legend(loc=0)
    axes[2].legend(loc=0)

    # Tight layout
    plt.tight_layout()

    # Show.
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.483 seconds)


.. _sphx_glr_download__examples_forecasting_plot_wls_search.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_wls_search.py <plot_wls_search.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_wls_search.ipynb <plot_wls_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\forecasting\plot_wls_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_forecasting_plot_wls_search.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_forecasting_plot_wls_search.py:


WLS - Search
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 6-140



.. image-sg:: /_examples/forecasting/images/sphx_glr_plot_wls_search_001.png
   :alt: plot wls search
   :srcset: /_examples/forecasting/images/sphx_glr_plot_wls_search_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\kelda\desktop\repositories\virtualenvs\venv-py3790-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\venv-py3790-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\venv-py3790-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\venv-py3790-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log

    c:\users\kelda\desktop\repositories\virtualenvs\venv-py3790-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log


    Grid search:
                                0              1              2              3              4              5
    wls-rsquared           0.7193         0.5418         0.5178         0.3945         0.4314         0.2296
    wls-rsquare...         0.7164         0.5372         0.5129         0.3883         0.4256         0.2218
    wls-fvalue           251.1265       115.9009       105.2425        63.8457        74.3506        29.2112
    wls-fprob                 0.0            0.0            0.0            0.0            0.0            0.0
    wls-aic             1139.6154            inf            inf            inf            inf            inf
    wls-bic             1144.8257            inf            inf            inf            inf            inf
    wls-llf             -567.8077           -inf           -inf           -inf           -inf           -inf
    wls-mse_model     1282646.633    172131.1767    142993.7285     52845.9283     53244.0338     14922.2101
    wls-mse_resid       5107.5719      1485.1587      1358.7076        827.713       716.1208       510.8386
    wls-mse_total      18012.0068      3208.8559      2789.3643      1353.1496      1246.7058        656.408
    wls-const_coef       173.7848        264.957       275.6143       329.7484        317.595       391.5266
    wls-const_std         14.1869        16.6975        16.6926        15.5979        15.9144        11.9208
    wls-const_t...        12.2497        15.8681        16.5111        21.1405        19.9564        32.8439
    wls-const_t...            0.0            0.0            0.0            0.0            0.0            0.0
    wls-const_cil        145.6313       231.8215       242.4883       298.7948       286.0134         367.87
    wls-const_ciu        201.9383       298.0926       308.7402        360.702       349.1766       415.1831
    wls-x1_coef            3.9234         2.5288         2.3867         1.6813         1.8235         0.8882
    wls-x1_std             0.2476         0.2349         0.2326         0.2104         0.2115         0.1643
    wls-x1_tvalue          15.847        10.7657        10.2588         7.9904         8.6227         5.4047
    wls-x1_tprob              0.0            0.0            0.0            0.0            0.0            0.0
    wls-x1_cil             3.4321         2.0627          1.925         1.2637         1.4038         0.5621
    wls-x1_ciu             4.4147          2.995         2.8484         2.0989         2.2432         1.2143
    wls-s_dw                0.157          0.466          0.509          0.769          0.713          1.082
    wls-s_jb_value          3.396          8.411           9.94         29.277         16.087        208.853
    wls-s_jb_prob           0.183         0.0149         0.0069            0.0         0.0003            0.0
    wls-s_skew              0.443          0.497          0.493          0.594          0.501          1.818
    wls-s_kurtosis          2.829          4.015           4.19          5.369           4.69          9.074
    wls-s_omnib...          3.454          7.969          8.678         15.509          11.05         54.182
    wls-s_omnib...          0.178          0.019          0.013            0.0          0.004            0.0
    wls-m_dw               0.1572         0.1112         0.1037         0.0709         0.0774         0.0465
    wls-m_jb_value         3.3959         7.6549         9.7479        17.9558        16.7411        20.7495
    wls-m_jb_prob          0.1831         0.0218         0.0076         0.0001         0.0002            0.0
    wls-m_skew             0.4432        -0.6431        -0.7328        -1.0222        -0.9832        -1.1132
    wls-m_kurtosis         2.8293         3.4279         3.4376         3.3606         3.3889          3.152
    wls-m_nm_value         3.4541         8.0365          9.785        15.5973        14.8412        16.9908
    wls-m_nm_prob          0.1778          0.018         0.0075         0.0004         0.0006         0.0002
    wls-m_ks_value         0.5345         0.5593         0.5671         0.6298         0.6019         0.7061
    wls-m_ks_prob             0.0            0.0            0.0            0.0            0.0            0.0
    wls-m_shp_v...         0.9777         0.9361         0.9234         0.8696          0.878         0.8438
    wls-m_shp_prob         0.0881         0.0001            0.0            0.0            0.0            0.0
    wls-m_ad_value         0.7496         2.9908         3.6036         6.1379         5.7746         6.9825
    wls-m_ad_nnorm           True          False          False          False          False          False
    wls-exog        [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...  [[1.0, 0.0...
    wls-endog       [20.059024...  [20.059024...  [20.059024...  [20.059024...  [20.059024...  [20.059024...
    wls-trend                   c              c              c              c              c              c
    wls-weights     [1.0, 1.0,...  [0.0268926...  [0.0195792...  [0.0033369...  [0.0049872...  [1.0462147...
    wls-W           <statsmode...  <pyamr.met...  <pyamr.met...  <pyamr.met...  <pyamr.met...  <pyamr.met...
    wls-model       <statsmode...  <statsmode...  <statsmode...  <statsmode...  <statsmode...  <statsmode...
    wls-id          WLS(c,Leas...  WLS(c,Sig(...  WLS(c,Sig(...  WLS(c,Sig(...  WLS(c,Sig(...  WLS(c,Sig(...






|

.. code-block:: default
   :lineno-start: 6

    # Import class.
    import sys
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.api as sm
    import statsmodels.robust.norms as norms

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.wls import WLSWrapper
    from pyamr.metrics.weights import SigmoidA

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # -----------------------------
    # Example II
    # -----------------------------
    # This example performs grid search on a number of possible configurations
    # of the WLSWrapper. In particular, it tests the effect of different 
    # objects to compute the weights from the frequencies. It presents both
    # the resulting pandas dataframe and also a figure.

    # Configuration
    # -------------
    # This variable contains the weight functions to test. Note that in 
    # the norms module there are other options such as [norms.HuberT(), 
    # norms.Hampel(), norms.TrimmedMean(), norms.TukeyBiweight(), 
    # norms.AndreWave(), norms.RamsayE()]
    w_func = [
        norms.LeastSquares(),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[10, 90]),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[25, 75]),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[25, 90]),
        SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[40, 50])]

    # The grid search parameters.
    grid_params = [
        # {'exog': [x], 'endog': [y], 'trend': ['c']},
        {'exog': [x], 'endog': [y], 'trend': ['c'], 'weights': [f], 'W': w_func}
    ]

    # Grid search
    # ------------
    # Perform grid search.
    summary = WLSWrapper(estimator=sm.WLS) \
        .grid_search(grid_params=grid_params)

    # Show grid results
    # ..todo: It is weird to create an WLSWrapper jut to
    #         be able to use themethod from_list_dataframe.
    #         try to implemented separately.
    print("\nGrid search:")
    print(WLSWrapper().from_list_dataframe(summary).T)

    # Prediction
    # ----------
    # Variables.
    start, end = 10, 150

    # Create figure
    fig, axes = plt.subplots(1, 3, figsize=(10, 5))

    # Plot truth values.
    axes[0].plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot frequencies
    axes[0].bar(x, f, color='gray', alpha=0.7, label='Frequency')

    # For each of the models in summary
    for i, model in enumerate(summary):

        # Compute predictions.
        preds = model.get_prediction(start=start, end=end)

        # Plot forecasted values.
        axes[0].plot(preds[0, :], preds[1, :],
                     linewidth=1.0,
                     label=model._identifier(short=True))

        # Plot the confidence intervals.
        axes[0].fill_between(preds[0, :],
                             preds[2, :],
                             preds[3, :],
                             alpha=0.1)

        # Plot weights assigned to each observation
        axes[1].plot(model.weights, marker='o', alpha=0.5,
                     markeredgecolor='k', markeredgewidth=0.5,
                     markersize=4, linewidth=0.00,
                     label=model._identifier(short=True))

        # Plot weights converter (W) functions.
        if model.W is not None:
            axes[2].plot(np.linspace(0, 1, 100),
                         model.W.weights(np.linspace(0, 1, 100)),
                         label=model._identifier(short=True))

    # Grid.
    axes[0].grid(linestyle='--', linewidth=0.35, alpha=0.5)
    axes[1].grid(linestyle='--', linewidth=0.35, alpha=0.5)
    axes[2].grid(linestyle='--', linewidth=0.35, alpha=0.5)

    # Legend.
    axes[0].legend(loc=0)
    axes[1].legend(loc=0)
    axes[2].legend(loc=0)

    # Tight layout
    plt.tight_layout()

    # Show.
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.492 seconds)


.. _sphx_glr_download__examples_forecasting_plot_wls_search.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_wls_search.py <plot_wls_search.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_wls_search.ipynb <plot_wls_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

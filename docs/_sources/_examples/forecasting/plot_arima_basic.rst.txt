
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\forecasting\plot_arima_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_forecasting_plot_arima_basic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_forecasting_plot_arima_basic.py:


ARIMA - Basic
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 6-148



.. image-sg:: /_examples/forecasting/images/sphx_glr_plot_arima_basic_001.png
   :alt: ARIMA non-dynamic, ARIMA dynamic
   :srcset: /_examples/forecasting/images/sphx_glr_plot_arima_basic_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Series:
    arima-aic                   790.8599
    arima-bic                    798.006
    arima-hqic                   793.725
    arima-llf                    -392.43
    arima-const_coef            277.4599
    arima-const_std             135.0188
    arima-const_tvalue             2.055
    arima-const_tprob             0.0399
    arima-const_cil              12.8279
    arima-const_ciu             542.0919
    arima-ar.L1_coef              0.9861
    arima-ar.L1_std               0.0211
    arima-ar.L1_tvalue           46.7468
    arima-ar.L1_tprob                0.0
    arima-ar.L1_cil               0.9447
    arima-ar.L1_ciu               1.0274
    arima-sigma2_coef          1020.4152
    arima-sigma2_std            164.1814
    arima-sigma2_tvalue           6.2152
    arima-sigma2_tprob               0.0
    arima-sigma2_cil            698.6256
    arima-sigma2_ciu           1342.2048
    arima-m_dw                    1.9186
    arima-m_jb_value           1073.5552
    arima-m_jb_prob                  0.0
    arima-m_skew                 -3.1626
    arima-m_kurtosis             19.7946
    arima-m_nm_value             85.0844
    arima-m_nm_prob                  0.0
    arima-m_ks_value              0.5889
    arima-m_ks_prob                  0.0
    arima-m_shp_value             0.7595
    arima-m_shp_prob                 0.0
    arima-m_ad_value              3.0312
    arima-m_ad_nnorm               False
    arima-converged                 True
    arima-endog            [12.085319...
    arima-order                (1, 0, 0)
    arima-trend                        c
    arima-disp                         0
    arima-model            <statsmode...
    arima-id               ARIMA(1, 0...
    dtype: object

    Summary:
                                   SARIMAX Results                                
    ==============================================================================
    Dep. Variable:                      y   No. Observations:                   80
    Model:                 ARIMA(1, 0, 0)   Log Likelihood                -392.430
    Date:                Mon, 12 Jun 2023   AIC                            790.860
    Time:                        16:01:52   BIC                            798.006
    Sample:                             0   HQIC                           793.725
                                     - 80                                         
    Covariance Type:                  opg                                         
    ==============================================================================
                     coef    std err          z      P>|z|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        277.4599    135.019      2.055      0.040      12.828     542.092
    ar.L1          0.9861      0.021     46.747      0.000       0.945       1.027
    sigma2      1020.4152    164.181      6.215      0.000     698.626    1342.205
    ==============================================================================
                                        Manual                                    
    ------------------------------------------------------------------------------
    Omnibus:                        0.000  Durbin-Watson:                    1.919
    Prob(Omnibus):                  0.000  Jarque-Bera (JB):              1073.555
    Skew:                          -3.163  Prob(JB):                         0.000
    Kurtosis_m:                    19.795  Cond No:                 
    Normal (N):                    85.084  Prob(N):                          0.000
    ==============================================================================






|

.. code-block:: default
   :lineno-start: 6

    # Import.
    import sys
    import warnings
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import ARIMA from statsmodels.
    from statsmodels.tsa.arima.model import ARIMA

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.arima import ARIMAWrapper

    # Filter warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create exogenous variable
    exog = x

    # ----------------------------
    # fit the model
    # ----------------------------
    # Create specific arima model.
    arima = ARIMAWrapper(estimator=ARIMA).fit( \
        endog=y[:80], order=(1,0,0), trend='c', disp=0)

    # Print series
    print("\nSeries:")
    print(arima.as_series())

    # Print summary.
    print("\nSummary:")
    print(arima.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/arima-sample.pickle'

    # Save
    #arima.save(fname=fname)

    # Load
    #arima = ARIMAWrapper().load(fname=fname)


    # -----------------
    #  Predict and plot
    # -----------------
    # This example shows how to make predictions using the wrapper which has
    # been previously fitted. It also demonstrateds how to plot the resulting
    # data for visualization purposes. It shows two different types of
    # predictions:
    #    - dynamic predictions in which the prediction is done based on the
    #      previously predicted values. Note that for the case of ARIMA(0,1,1)
    #      it returns a line.
    #    - not dynamic in which the prediction is done based on the real
    #      values of the time series, no matter what the prediction was for
    #      those values.

    # Variables.
    s, e = 50, 120

    # Compute predictions
    preds_1 = arima.get_prediction(start=s, end=e, dynamic=False)
    preds_2 = arima.get_prediction(start=s, end=e, dynamic=True)

    # Create figure
    fig, axes = plt.subplots(1, 2, figsize=(8,3))

    # ----------------
    # Plot non-dynamic
    # ----------------
    # Plot truth values.
    axes[0].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                    markeredgecolor='k', markeredgewidth=0.5,
                    markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[0].plot(preds_1[0,:], preds_1[1,:], color='#FF0000', alpha=1.00, 
                linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[0].fill_between(preds_1[0,:], preds_1[2,:], 
                                       preds_1[3,:], 
                                       color='#FF0000', 
                                       alpha=0.25)

    # ------------
    # Plot dynamic
    # ------------
    # Plot truth values.
    axes[1].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                    markeredgecolor='k', markeredgewidth=0.5,
                    markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[1].plot(preds_2[0,:], preds_2[1,:], color='#FF0000', alpha=1.00, 
                linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[1].fill_between(preds_2[0,:], preds_2[2,:], 
                                       preds_2[3,:], 
                                       color='#FF0000', 
                                       alpha=0.25)

    # Configure axes
    axes[0].set_title("ARIMA non-dynamic")
    axes[1].set_title("ARIMA dynamic")

    # Format axes
    axes[0].grid(True, linestyle='--', linewidth=0.25)
    axes[1].grid(True, linestyle='--', linewidth=0.25)

    # Legend 
    axes[0].legend()
    axes[1].legend()

    # Show
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.194 seconds)


.. _sphx_glr_download__examples_forecasting_plot_arima_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_arima_basic.py <plot_arima_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_arima_basic.ipynb <plot_arima_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\forecasting\plot_sarimax_search.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_forecasting_plot_sarimax_search.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_forecasting_plot_sarimax_search.py:


SARIMAX search
----------------------------

.. note: Explain

See ```SARIMAX`` <https://www.statsmodels.org/stable/generated/statsmodels.tsa.statespace.sarimax.SARIMAX.html>`_

.. GENERATED FROM PYTHON SOURCE LINES 10-127



.. image:: /_examples/forecasting/images/sphx_glr_plot_sarimax_search_001.png
    :alt: Non-dynamic predictions for SARIMAX
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Summary:
        sarimax-order sarimax-seasonal_order sarimax-trend sarimax-aic sarimax-bic
    0       (1, 1, 0)  (0, 0, 0, 12)                     c    773.0056    780.1139
    1       (1, 1, 0)  (0, 0, 0, 12)                     n    776.6224    781.3613
    2       (1, 1, 0)  (0, 0, 0, 12)                    ct    772.6583    782.1361
    3       (0, 1, 1)  (0, 0, 0, 12)                     c    775.3428    782.4511
    4       (0, 1, 1)  (0, 0, 0, 12)                    ct    773.3319    782.8097
    ..            ...            ...                   ...         ...         ...
    281     (0, 0, 1)  (0, 0, 1, 12)                     n   1019.5597   1026.7058
    282     (0, 0, 2)  (0, 0, 0, 12)                     n    1024.999   1032.1451
    283     (0, 0, 1)  (0, 0, 0, 12)                     n   1076.9456   1081.7096
    284     (0, 0, 0)  (0, 0, 1, 12)                     n   1103.4904   1108.2545
    285     (0, 0, 0)  (0, 0, 0, 12)                     n   1174.6955   1177.0776

    [286 rows x 5 columns]
     0. Estimator (bic=780.11): SARIMAX(1, 1, 0)x(0, 0, 0, 12) [c,False] 
     1. Estimator (bic=781.36): SARIMAX(1, 1, 0)x(0, 0, 0, 12) [n,False] 
     2. Estimator (bic=782.14): SARIMAX(1, 1, 0)x(0, 0, 0, 12) [ct,False] 
     3. Estimator (bic=782.45): SARIMAX(0, 1, 1)x(0, 0, 0, 12) [c,False] 
     4. Estimator (bic=782.81): SARIMAX(0, 1, 1)x(0, 0, 0, 12) [ct,False] 
     5. Estimator (bic=783.52): SARIMAX(2, 1, 1)x(0, 0, 0, 12) [c,False] 
     6. Estimator (bic=783.57): SARIMAX(2, 1, 0)x(0, 0, 0, 12) [c,False] 
     7. Estimator (bic=783.65): SARIMAX(0, 1, 2)x(0, 0, 0, 12) [c,False] 
     8. Estimator (bic=783.84): SARIMAX(1, 1, 1)x(0, 0, 0, 12) [c,False] 






|

.. code-block:: default
   :lineno-start: 10

    # Import.
    import sys
    import warnings
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import sarimax
    from statsmodels.tsa.statespace.sarimax import SARIMAX

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.sarimax import SARIMAXWrapper

    # Filter warnings
    #warnings.simplefilter(action='ignore', category=FutureWarning)

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create exogenous variable
    exog = x

    # Variables.
    s, e = 50, 120

    # -------------------------------
    # create arima model
    # -------------------------------
    # This example shows how to use auto to find the best overall model using
    # a particular seletion criteria. It also demonstrates how to plot the 
    # resulting data for visualization purposes. Note that it only prints
    # the top best classifier according to the information criteria.

    # Find the best arima model (bruteforce).
    models, best = SARIMAXWrapper(estimator=SARIMAX) \
        .auto(endog=y[:80], ic='bic',
                            max_ar=2,
                            max_ma=3,
                            max_d=1,
                            max_P=1,
                            max_D=0,
                            max_Q=1,
                            list_s=[12],
                            return_fits=True)

    # Sort the list (from lower to upper)
    models.sort(key=lambda x: x.bic, reverse=False)

    # Summary
    summary = SARIMAXWrapper().from_list_dataframe(models)

    # Show summary
    print("\nSummary:")
    print(summary[['sarimax-order',
                   'sarimax-seasonal_order',
                   'sarimax-trend', 
                   'sarimax-aic', 
                   'sarimax-bic']])

    # -------------------------------
    # plot results
    # -------------------------------
    # Create figure
    fig, axes = plt.subplots(3,3, figsize=(10,6))
    axes = axes.flatten()

    # Loop for the selected models
    for i,estimator in enumerate(models[:9]):

      # Show information
      print("%2d. Estimator (bic=%.2f): %s " % \
        (i, estimator.bic, estimator._identifier()))

      # Get the predictions
      preds = estimator.get_prediction(start=s, end=e, dynamic=False)

      # Plot truth values.
      axes[i].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                      markeredgecolor='k', markeredgewidth=0.5,
                      markersize=5, linewidth=0.75, label='Observed')

      # Plot forecasted values.
      axes[i].plot(preds[0,:], preds[1,:], color='#FF0000', alpha=1.00, 
                   linewidth=2.0, label=estimator._identifier())
  
      # Plot the confidence intervals.
      axes[i].fill_between(preds[0,:], preds[2,:], 
                                       preds[3,:], 
                                       color='#FF0000', 
                                       alpha=0.25)

      # Configure axes
      axes[i].legend(loc=3)
      axes[i].grid(True, linestyle='--', linewidth=0.25)

    # Set superior title
    plt.suptitle("Non-dynamic predictions for SARIMAX")

    # Show
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.142 seconds)


.. _sphx_glr_download__examples_forecasting_plot_sarimax_search.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sarimax_search.py <plot_sarimax_search.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sarimax_search.ipynb <plot_sarimax_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

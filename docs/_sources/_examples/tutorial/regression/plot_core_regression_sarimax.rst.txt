
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\regression\plot_core_regression_sarimax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_regression_plot_core_regression_sarimax.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_regression_plot_core_regression_sarimax.py:


Using SARIMAX (seasonal)
===========================================

.. GENERATED FROM PYTHON SOURCE LINES 6-148



.. image-sg:: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_sarimax_001.png
   :alt: ARIMA non-dynamic, ARIMA dynamic
   :srcset: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_sarimax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Series:
    sarimax-aic                    767.2865
    sarimax-bic                    781.5032
    sarimax-hqic                   772.9822
    sarimax-llf                   -377.6433
    sarimax-intercept_coef           4.5355
                                  ...      
    sarimax-seasonal_order    (1, 0, 1, 12)
    sarimax-order                 (0, 1, 1)
    sarimax-disp                          0
    sarimax-model             <statsmode...
    sarimax-id                SARIMAX(0,...
    Length: 73, dtype: object

    Summary:
                                         SARIMAX Results                                      
    ==========================================================================================
    Dep. Variable:                                  y   No. Observations:                   80
    Model:             SARIMAX(0, 1, 1)x(1, 0, 1, 12)   Log Likelihood                -377.643
    Date:                            Mon, 20 Feb 2023   AIC                            767.287
    Time:                                    17:41:35   BIC                            781.503
    Sample:                                         0   HQIC                           772.982
                                                 - 80                                         
    Covariance Type:                              opg                                         
    ==============================================================================
                     coef    std err          z      P>|z|      [0.025      0.975]
    ------------------------------------------------------------------------------
    intercept      4.5355     13.268      0.342      0.732     -21.470      30.541
    drift         -0.0904      0.150     -0.602      0.547      -0.384       0.204
    ma.L1         -0.5287      0.089     -5.970      0.000      -0.702      -0.355
    ar.S.L12       0.5857      1.107      0.529      0.597      -1.584       2.756
    ma.S.L12      -0.6475      1.045     -0.619      0.536      -2.696       1.401
    sigma2       823.5711    123.123      6.689      0.000     582.255    1064.887
    ==============================================================================
    Ljung-Box(L1)(Q):                0.05   Jarque-Bera (JB):                 4.41
    Prob(Q):                         0.83   Prob(JB):                         0.11
    Heteroskedasticity(H):           1.06   Skew:                            -0.47
    Prob(H)(two-sided):              0.89   Kurtosis:                         3.68
    ==============================================================================
                                        Manual                                    
    ------------------------------------------------------------------------------
    Omnibus:                        0.000   Durbin-Watson:                   1.986
    Normal (N):                     4.364   Prob(N):                         0.113
    ==============================================================================
    Note that JB, P(JB), skew and kurtosis have different values.
    Note that Prob(Q) tests no correlation of residuals.






|

.. code-block:: default
   :lineno-start: 6

    # Import.
    import sys
    import warnings
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import sarimax
    from statsmodels.tsa.statespace.sarimax import SARIMAX

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.sarimax import SARIMAXWrapper

    # Filter warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create exogenous variable
    exog = x

    # ----------------------------
    # fit the model
    # ----------------------------
    # Create specific sarimax model.
    sarimax = SARIMAXWrapper(estimator=SARIMAX) \
        .fit(endog=y[:80], exog=None, trend='ct',
             seasonal_order=(1, 0, 1, 12), order=(0, 1, 1),
             disp=0)

    # Print series
    print("\nSeries:")
    print(sarimax.as_series())

    # Print summary.
    print("\nSummary:")
    print(sarimax.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    # fname = '../../examples/saved/arima-sample.pickle'

    # Save
    # arima.save(fname=fname)

    # Load
    # arima = ARIMAWrapper().load(fname=fname)


    # -----------------
    #  Predict and plot
    # -----------------
    # This example shows how to make predictions using the wrapper which has
    # been previously fitted. It also demonstrateds how to plot the resulting
    # data for visualization purposes. It shows two different types of
    # predictions:
    #    - dynamic predictions in which the prediction is done based on the
    #      previously predicted values. Note that for the case of ARIMA(0,1,1)
    #      it returns a line.
    #    - not dynamic in which the prediction is done based on the real
    #      values of the time series, no matter what the prediction was for
    #      those values.

    # Variables.
    s, e = 50, 120

    # Compute predictions
    preds_1 = sarimax.get_prediction(start=s, end=e, dynamic=False)
    preds_2 = sarimax.get_prediction(start=s, end=e, dynamic=True)

    # Create figure
    fig, axes = plt.subplots(1, 2, figsize=(8, 3))

    # ----------------
    # Plot non-dynamic
    # ----------------
    # Plot truth values.
    axes[0].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[0].plot(preds_1[0, :], preds_1[1, :], color='#FF0000', alpha=1.00,
                 linewidth=2.0, label=sarimax._identifier())

    # Plot the confidence intervals.
    axes[0].fill_between(preds_1[0, :], preds_1[2, :],
                         preds_1[3, :],
                         color='#FF0000',
                         alpha=0.25)

    # ------------
    # Plot dynamic
    # ------------
    # Plot truth values.
    axes[1].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[1].plot(preds_2[0, :], preds_2[1, :], color='#FF0000', alpha=1.00,
                 linewidth=2.0, label=sarimax._identifier())

    # Plot the confidence intervals.
    axes[1].fill_between(preds_2[0, :], preds_2[2, :],
                         preds_2[3, :],
                         color='#FF0000',
                         alpha=0.25)

    # Configure axes
    axes[0].set_title("ARIMA non-dynamic")
    axes[1].set_title("ARIMA dynamic")

    # Format axes
    axes[0].grid(True, linestyle='--', linewidth=0.25)
    axes[1].grid(True, linestyle='--', linewidth=0.25)

    # Legend
    axes[0].legend()
    axes[1].legend()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.502 seconds)


.. _sphx_glr_download__examples_tutorial_regression_plot_core_regression_sarimax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_core_regression_sarimax.py <plot_core_regression_sarimax.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_core_regression_sarimax.ipynb <plot_core_regression_sarimax.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

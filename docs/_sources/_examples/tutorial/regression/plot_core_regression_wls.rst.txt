
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\regression\plot_core_regression_wls.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_regression_plot_core_regression_wls.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_regression_plot_core_regression_wls.py:


Using weighted least squares (WLS)
==================================

.. GENERATED FROM PYTHON SOURCE LINES 6-119



.. image-sg:: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_wls_001.png
   :alt: plot core regression wls
   :srcset: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_wls_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    c:\users\kelda\desktop\repositories\virtualenvs\test-pyamr\lib\site-packages\statsmodels\regression\linear_model.py:792: RuntimeWarning:

    divide by zero encountered in log


    Series:
    wls-rsquared                  0.5781
    wls-rsquared_adj              0.5738
    wls-fvalue                    134.28
    wls-fprob                        0.0
    wls-aic                          inf
    wls-bic                          inf
    wls-llf                         -inf
    wls-mse_model            196704.7792
    wls-mse_resid              1464.8851
    wls-mse_total              3437.0052
    wls-const_coef              247.9736
    wls-const_std                16.9095
    wls-const_tvalue             14.6647
    wls-const_tprob                  0.0
    wls-const_cil               214.4172
    wls-const_ciu                 281.53
    wls-x1_coef                   2.7372
    wls-x1_std                    0.2362
    wls-x1_tvalue                11.5879
    wls-x1_tprob                     0.0
    wls-x1_cil                    2.2685
    wls-x1_ciu                     3.206
    wls-s_dw                       0.466
    wls-s_jb_value                 9.892
    wls-s_jb_prob                 0.0071
    wls-s_skew                      0.52
    wls-s_kurtosis                 4.136
    wls-s_omnibus_value            8.882
    wls-s_omnibus_prob             0.012
    wls-m_dw                      0.1536
    wls-m_jb_value                3.0502
    wls-m_jb_prob                 0.2176
    wls-m_skew                   -0.4056
    wls-m_kurtosis                3.2723
    wls-m_nm_value                3.6621
    wls-m_nm_prob                 0.1602
    wls-m_ks_value                0.5484
    wls-m_ks_prob                    0.0
    wls-m_shp_value               0.9499
    wls-m_shp_prob                0.0008
    wls-m_ad_value                2.2156
    wls-m_ad_nnorm                 False
    wls-missing                    raise
    wls-exog               [[1.0, 0.0...
    wls-endog              [51.606878...
    wls-trend                          c
    wls-weights            [0.1055152...
    wls-W                  <pyamr.met...
    wls-model              <statsmode...
    wls-id                 WLS(c,Sig(...
    dtype: object

    Regression line:
    [247.97 250.71 253.45 256.19 258.92 261.66 264.4  267.13 269.87 272.61]

    Summary:
                                WLS Regression Results                            
    ==============================================================================
    Dep. Variable:                      y   R-squared:                       0.578
    Model:                            WLS   Adj. R-squared:                  0.574
    Method:                 Least Squares   F-statistic:                     134.3
    Date:                Mon, 20 Feb 2023   Prob (F-statistic):           4.54e-20
    Time:                        17:41:35   Log-Likelihood:                   -inf
    No. Observations:                 100   AIC:                               inf
    Df Residuals:                      98   BIC:                               inf
    Df Model:                           1                                         
    Covariance Type:            nonrobust                                         
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        247.9736     16.910     14.665      0.000     214.417     281.530
    x1             2.7372      0.236     11.588      0.000       2.268       3.206
    ==============================================================================
    Omnibus:                        8.882   Durbin-Watson:                   0.466
    Prob(Omnibus):                  0.012   Jarque-Bera (JB):                9.892
    Skew:                           0.520   Prob(JB):                      0.00711
    Kurtosis:                       4.136   Cond. No.                         223.
    Normal (N):                     3.662   Prob(N):                         0.160
    ==============================================================================






|

.. code-block:: default
   :lineno-start: 6

    # Import class.
    import sys
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.api as sm
    import statsmodels.robust.norms as norms

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.wls import WLSWrapper
    from pyamr.metrics.weights import SigmoidA

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create method to compute weights from frequencies
    W = SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0)

    # Note that the function fit will call M.weights(weights) inside and will
    # store the M converter in the instance. Therefore, the code execute is
    # equivalent to <weights=M.weights(f)> with the only difference being that
    # the weight converter is not saved.
    wls = WLSWrapper(estimator=sm.WLS).fit( \
        exog=x, endog=y, trend='c', weights=f,
        W=W, missing='raise')

    # Print series.
    print("\nSeries:")
    print(wls.as_series())

    # Print regression line.
    print("\nRegression line:")
    print(wls.line(np.arange(10)))

    # Print summary.
    print("\nSummary:")
    print(wls.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/wls-sample.pickle'

    # Save
    #wls.save(fname=fname)

    # Load
    #wls = WLSWrapper().load(fname=fname)

    # -------------
    #  Example I
    # -------------
    # This example shows how to make predictions using the wrapper and how
    # to plot the resultin data. In addition, it compares the intervales
    # provided by get_prediction (confidence intervals) and the intervals
    # provided by wls_prediction_std (prediction intervals).
    #
    # To Do: Implement methods to compute CI and PI (see regression).

    # Variables.
    start, end = None, 180

    # Compute predictions (exogenous?). It returns a 2D array
    # where the rows contain the time (t), the mean, the lower
    # and upper confidence (or prediction?) interval.
    preds = wls.get_prediction(start=start, end=end)


    # Create figure
    fig, ax = plt.subplots(1, 1, figsize=(11,5))

    # Plotting confidence intervals
    # -----------------------------
    # Plot truth values.
    ax.plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
                  markeredgecolor='k', markeredgewidth=0.5,
                  markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    ax.plot(preds[0,:], preds[1, :], color='#FF0000', alpha=1.00,
                    linewidth=2.0, label=wls._identifier(short=True))

    # Plot the confidence intervals.
    ax.fill_between(preds[0, :],
                    preds[2, :],
                    preds[3, :],
                    color='r',
                    alpha=0.1)

    # Legend
    plt.legend()

    # Show
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.095 seconds)


.. _sphx_glr_download__examples_tutorial_regression_plot_core_regression_wls.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_core_regression_wls.py <plot_core_regression_wls.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_core_regression_wls.ipynb <plot_core_regression_wls.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples/tutorial/regression/plot_core_regression_wls.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_regression_plot_core_regression_wls.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_regression_plot_core_regression_wls.py:


Regression - WLS
================

.. GENERATED FROM PYTHON SOURCE LINES 6-120



.. image:: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_wls_001.png
    :alt: plot core regression wls
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/cbit/Desktop/repositories/environments/venv-py37-pyamr/lib/python3.7/site-packages/statsmodels/regression/linear_model.py:764: RuntimeWarning: divide by zero encountered in log
      llf += 0.5 * np.sum(np.log(self.weights))

    Series:
    wls-rsquared                  0.4975
    wls-rsquared_adj              0.4924
    wls-fvalue                   97.0346
    wls-fprob                        0.0
    wls-aic                          inf
    wls-bic                          inf
    wls-llf                         -inf
    wls-mse_model            146354.4012
    wls-mse_resid               1508.271
    wls-mse_total              2971.3632
    wls-const_coef              280.0966
    wls-const_std                17.0801
    wls-const_tvalue              16.399
    wls-const_tprob                  0.0
    wls-const_cil               246.2017
    wls-const_ciu               313.9915
    wls-x1_coef                   2.3731
    wls-x1_std                    0.2409
    wls-x1_tvalue                 9.8506
    wls-x1_tprob                     0.0
    wls-x1_cil                     1.895
    wls-x1_ciu                    2.8512
    wls-s_dw               Jarque-Ber...
    wls-s_jb_value             Prob(JB):
    wls-s_jb_prob              Cond. No.
    wls-s_skew                 Kurtosis:
    wls-s_kurtosis                      
    wls-s_omnibus_value    Prob(Omnib...
    wls-s_omnibus_prob             Skew:
    wls-m_dw                      0.1435
    wls-m_jb_value               10.9355
    wls-m_jb_prob                 0.0042
    wls-m_skew                   -0.7711
    wls-m_kurtosis                3.4961
    wls-m_nm_value               10.7664
    wls-m_nm_prob                 0.0046
    wls-m_ks_value                0.5772
    wls-m_ks_prob                    0.0
    wls-m_shp_value               0.9276
    wls-m_shp_prob                   0.0
    wls-m_ad_value                3.1425
    wls-m_ad_nnorm                 False
    wls-missing                    raise
    wls-exog               [[1.0, 0.0...
    wls-endog              [4.4520272...
    wls-trend                          c
    wls-weights            [0.0, 0.20...
    wls-W                  <pyamr.met...
    wls-model              <statsmode...
    wls-id                 WLS(c,Sig(...
    dtype: object

    Regression line:
    [280.1  282.47 284.84 287.22 289.59 291.96 294.34 296.71 299.08 301.45]

    Summary:
                                WLS Regression Results                            
    ==============================================================================
    Dep. Variable:                      y   R-squared:                       0.498
    Model:                            WLS   Adj. R-squared:                  0.492
    Method:                 Least Squares   F-statistic:                     97.03
    Date:                Tue, 30 Mar 2021   Prob (F-statistic):           2.55e-16
    Time:                        14:34:20   Log-Likelihood:                   -inf
    No. Observations:                 100   AIC:                               inf
    Df Residuals:                      98   BIC:                               inf
    Df Model:                           1                                         
    Covariance Type:            nonrobust                                         
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        280.0966     17.080     16.399      0.000     246.202     313.991
    x1             2.3731      0.241      9.851      0.000       1.895       2.851
    ==============================================================================
    Omnibus:                        5.226   Durbin-Watson:                   0.641
    Prob(Omnibus):                  0.073   Jarque-Bera (JB):                5.679
    Skew:                           0.288   Prob(JB):                       0.0584
    Kurtosis:                       4.016   Cond. No.                         222.
    Normal (N):                    10.766   Prob(N):                         0.005
    ==============================================================================






|

.. code-block:: default
   :lineno-start: 6

    # Import class.
    import sys
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.api as sm
    import statsmodels.robust.norms as norms

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.wls import WLSWrapper
    from pyamr.metrics.weights import SigmoidA

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create method to compute weights from frequencies
    W = SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0)

    # Note that the function fit will call M.weights(weights) inside and will
    # store the M converter in the instance. Therefore, the code execute is
    # equivalent to <weights=M.weights(f)> with the only difference being that
    # the weight converter is not saved.
    wls = WLSWrapper(estimator=sm.WLS).fit( \
        exog=x, endog=y, trend='c', weights=f,
        W=W, missing='raise')

    # Print series.
    print("\nSeries:")
    print(wls.as_series())

    # Print regression line.
    print("\nRegression line:")
    print(wls.line(np.arange(10)))

    # Print summary.
    print("\nSummary:")
    print(wls.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/wls-sample.pickle'

    # Save
    #wls.save(fname=fname)

    # Load
    #wls = WLSWrapper().load(fname=fname)

    # -------------
    #  Example I
    # -------------
    # This example shows how to make predictions using the wrapper and how
    # to plot the resultin data. In addition, it compares the intervales
    # provided by get_prediction (confidence intervals) and the intervals
    # provided by wls_prediction_std (prediction intervals).
    #
    # To Do: Implement methods to compute CI and PI (see regression).

    # Variables.
    start, end = None, 180

    # Compute predictions (exogenous?). It returns a 2D array
    # where the rows contain the time (t), the mean, the lower
    # and upper confidence (or prediction?) interval.
    preds = wls.get_prediction(start=start, end=end)


    # Create figure
    fig, ax = plt.subplots(1, 1, figsize=(11,5))

    # Plotting confidence intervals
    # -----------------------------
    # Plot truth values.
    ax.plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
                  markeredgecolor='k', markeredgewidth=0.5,
                  markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    ax.plot(preds[0,:], preds[1, :], color='#FF0000', alpha=1.00,
                    linewidth=2.0, label=wls._identifier(short=True))

    # Plot the confidence intervals.
    ax.fill_between(preds[0, :],
                    preds[2, :],
                    preds[3, :],
                    color='r',
                    alpha=0.1)

    # Legend
    plt.legend()

    # Show
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.160 seconds)


.. _sphx_glr_download__examples_tutorial_regression_plot_core_regression_wls.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_core_regression_wls.py <plot_core_regression_wls.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_core_regression_wls.ipynb <plot_core_regression_wls.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

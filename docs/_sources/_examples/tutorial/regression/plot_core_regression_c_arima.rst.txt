
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\regression\plot_core_regression_c_arima.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__examples_tutorial_regression_plot_core_regression_c_arima.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_regression_plot_core_regression_c_arima.py:


Using autoregressive model ARIMA
================================

Approximate a function using Autoregressive Integrated Moving Average (ARIMA)

.. GENERATED FROM PYTHON SOURCE LINES 8-150



.. image-sg:: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_c_arima_001.png
   :alt: ARIMA non-dynamic, ARIMA dynamic
   :srcset: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_c_arima_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Series:
    arima-aic                   787.9221
    arima-bic                   795.0681
    arima-hqic                  790.7871
    arima-llf                   -390.961
    arima-const_coef             295.273
    arima-const_std             112.5006
    arima-const_tvalue            2.6246
    arima-const_tprob             0.0087
    arima-const_cil              74.7759
    arima-const_ciu               515.77
    arima-ar.L1_coef              0.9829
    arima-ar.L1_std               0.0218
    arima-ar.L1_tvalue           45.0214
    arima-ar.L1_tprob                0.0
    arima-ar.L1_cil               0.9401
    arima-ar.L1_ciu               1.0257
    arima-sigma2_coef           986.1961
    arima-sigma2_std            151.4148
    arima-sigma2_tvalue           6.5132
    arima-sigma2_tprob               0.0
    arima-sigma2_cil            689.4286
    arima-sigma2_ciu           1282.9636
    arima-m_dw                    1.9881
    arima-m_jb_value            674.0007
    arima-m_jb_prob                  0.0
    arima-m_skew                  -2.686
    arima-m_kurtosis              16.166
    arima-m_nm_value             73.4145
    arima-m_nm_prob                  0.0
    arima-m_ks_value               0.549
    arima-m_ks_prob                  0.0
    arima-m_shp_value             0.7978
    arima-m_shp_prob                 0.0
    arima-m_ad_value              2.1004
    arima-m_ad_nnorm               False
    arima-converged                 True
    arima-endog            [59.839700...
    arima-order                (1, 0, 0)
    arima-trend                        c
    arima-disp                         0
    arima-model            <statsmode...
    arima-id               ARIMA(1, 0...
    dtype: object

    Summary:
                                   SARIMAX Results                                
    ==============================================================================
    Dep. Variable:                      y   No. Observations:                   80
    Model:                 ARIMA(1, 0, 0)   Log Likelihood                -390.961
    Date:                Thu, 15 Jun 2023   AIC                            787.922
    Time:                        18:15:49   BIC                            795.068
    Sample:                             0   HQIC                           790.787
                                     - 80                                         
    Covariance Type:                  opg                                         
    ==============================================================================
                     coef    std err          z      P>|z|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        295.2730    112.501      2.625      0.009      74.776     515.770
    ar.L1          0.9829      0.022     45.021      0.000       0.940       1.026
    sigma2       986.1961    151.415      6.513      0.000     689.429    1282.964
    ==============================================================================
                                        Manual                                    
    ------------------------------------------------------------------------------
    Omnibus:                        0.000  Durbin-Watson:                    1.988
    Prob(Omnibus):                  0.000  Jarque-Bera (JB):               674.001
    Skew:                          -2.686  Prob(JB):                         0.000
    Kurtosis_m:                    16.166  Cond No:                 
    Normal (N):                    73.415  Prob(N):                          0.000
    ==============================================================================






|

.. code-block:: default
   :lineno-start: 9


    # Import.
    import sys
    import warnings
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import ARIMA from statsmodels.
    #from statsmodels.tsa.arima_model import ARIMA
    from statsmodels.tsa.arima.model import ARIMA

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.arima import ARIMAWrapper

    # Filter warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create exogenous variable
    exog = x

    # ----------------------------
    # fit the model
    # ----------------------------
    # Create specific arima model.
    arima = ARIMAWrapper(estimator=ARIMA).fit( \
     endog=y[:80], order=(1,0,0), trend='c', disp=0)

    # Print series
    print("\nSeries:")
    print(arima.as_series())

    # Print summary.
    print("\nSummary:")
    print(arima.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/arima-sample.pickle'

    # Save
    #arima.save(fname=fname)

    # Load
    #arima = ARIMAWrapper().load(fname=fname)


    # -----------------
    #  Predict and plot
    # -----------------
    # This example shows how to make predictions using the wrapper which has
    # been previously fitted. It also demonstrateds how to plot the resulting
    # data for visualization purposes. It shows two different types of
    # predictions:
    #    - dynamic predictions in which the prediction is done based on the
    #      previously predicted values. Note that for the case of ARIMA(0,1,1)
    #      it returns a line.
    #    - not dynamic in which the prediction is done based on the real
    #      values of the time series, no matter what the prediction was for
    #      those values.

    # Variables.
    s, e = 50, 120

    # Compute predictions
    preds_1 = arima.get_prediction(start=s, end=e, dynamic=False)
    preds_2 = arima.get_prediction(start=s, end=e, dynamic=True)

    # Create figure
    fig, axes = plt.subplots(1, 2, figsize=(8,3))

    # ----------------
    # Plot non-dynamic
    # ----------------
    # Plot truth values.
    axes[0].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[0].plot(preds_1[0,:], preds_1[1,:], color='#FF0000', alpha=1.00,
             linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[0].fill_between(preds_1[0,:], preds_1[2,:],
                                    preds_1[3,:],
                                    color='#FF0000',
                                    alpha=0.25)

    # ------------
    # Plot dynamic
    # ------------
    # Plot truth values.
    axes[1].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[1].plot(preds_2[0,:], preds_2[1,:], color='#FF0000', alpha=1.00,
             linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[1].fill_between(preds_2[0,:], preds_2[2,:],
                                    preds_2[3,:],
                                    color='#FF0000',
                                    alpha=0.25)

    # Configure axes
    axes[0].set_title("ARIMA non-dynamic")
    axes[1].set_title("ARIMA dynamic")

    # Format axes
    axes[0].grid(True, linestyle='--', linewidth=0.25)
    axes[1].grid(True, linestyle='--', linewidth=0.25)

    # Legend
    axes[0].legend()
    axes[1].legend()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.175 seconds)


.. _sphx_glr_download__examples_tutorial_regression_plot_core_regression_c_arima.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_core_regression_c_arima.py <plot_core_regression_c_arima.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_core_regression_c_arima.ipynb <plot_core_regression_c_arima.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

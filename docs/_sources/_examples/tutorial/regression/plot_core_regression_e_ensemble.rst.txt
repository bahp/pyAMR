
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\regression\plot_core_regression_e_ensemble.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__examples_tutorial_regression_plot_core_regression_e_ensemble.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_regression_plot_core_regression_e_ensemble.py:


Using an ensemble WLS + ARMA
============================

This method shows an ensemble method that combines the use of Weighted
Linear Regression (WLS) to fit the main function and ARMA to fit the
residuals.

.. warning:: Not working yet!

.. GENERATED FROM PYTHON SOURCE LINES 12-227




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    "\n# Import class.\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport statsmodels.robust.norms as norms\n\nfrom statsmodels.tsa.arima_model import ARIMA\n\n\n# import weights.\nfrom pyamr.datasets.load import make_timeseries\nfrom pyamr.metrics.weights import SigmoidA\nfrom pyamr.core.regression.wls import WLSWrapper\nfrom pyamr.core.regression.wlsarma import WLSARMAWrapper\n\n# Matplotlib options\nmpl.rc('legend', fontsize=6)\nmpl.rc('xtick', labelsize=6)\nmpl.rc('ytick', labelsize=6)\n\n# Set pandas configuration.\npd.set_option('display.max_colwidth', 14)\npd.set_option('display.width', 150)\npd.set_option('display.precision', 4)\n\n# Create timeseries data\nx, y, f = make_timeseries()\n\n# Create method to compute weights from frequencies\nW = SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0)\n\n# Note that the function fit will call M.weights(weights) inside and will\n# store the M converter in the instance. Therefore, the code execute is\n# equivalent to <weights=M.weights(f)> with the only difference being that\n# the weight converter is not saved.\nwls = WLSWrapper(estimator=sm.WLS).fit(     exog=x, endog=y, trend='c', weights=f,\n    W=W, missing='raise')\n\n# Create WLS + ARIMA model.\nwlsarima = WLSARMAWrapper().fit(endog=y, exog=x, weights=f,\n    wls_kwargs={'W': W, 'trend': 'c', 'missing': 'raise'},\n     arima_kwargs={'exog': None, 'max_ar': 1,\n                   'max_ma': 1, 'max_d': 0, 'ic': 'bic',\n                   'order': (1,0,0)})\n\npred1 = wlsarima.get_prediction(start=None, end=140)\npred2 = wls.get_prediction(start=None, end=140)\n\nendog = getattr(wlsarima._wls, 'endog')\nexog = getattr(wlsarima._wls, 'exog')[:, 1]\n\n# Create figures.\nfig, axes = plt.subplots(1, 2, figsize=(10, 4), sharey=True, sharex=True)\n# Plot observations.\naxes[0].plot(exog, endog, color='#A6CEE3', alpha=0.5, marker='o',\n             markeredgecolor='k', markeredgewidth=0.5,\n             markersize=5, linewidth=0.75, label='Observed')\naxes[0].plot(pred1[0, :], pred1[1, :], color='#39ac73',\n             alpha=0.95, marker='o', markersize=2, linewidth=1.0,\n             markeredgewidth=0.2, markeredgecolor='k',\n             label='WLSARMA')\naxes[1].plot(pred2[0, :], pred2[1, :], color='r',\n             alpha=0.95, marker='o', markersize=2, linewidth=1.0,\n             markeredgewidth=0.2, markeredgecolor='k',\n             label='WLS')\n\nplt.legend()\nplt.show()\n\nimport sys\n\nsys.exit()\n\n# Create WLS + SARIMAX model.\nwlssarimax = WLSARMAWrapper().fit(endog=y, exog=x, weights=f,\n                                  wls_kwargs={'W': W, 'trend': 'c', 'missing': 'raise'},\n                                  sarimax_kwargs={'exog': None, 'ic': 'bic', 'max_ar': 1, 'max_ma': 1, 'max_d': 0,\n                                                  'max_P': 0, 'max_D': 0, 'max_Q': 0, 'list_s': [12]})\n\n# Create best SARIMAX model\nmodels, sarimax = SARIMAXWrapper().fit(endog=y, ic='bic',\n                                       max_ar=1, max_ma=1, max_d=1,\n                                       max_P=0, max_D=0, max_Q=0,\n                                       list_s=[0], return_fits=True)\n\n# Print series.\nprint(wlsarima.as_series())\n\n# Print summaries.\nprint(wlsarima.as_summary())\nprint(wlssarimax.as_summary())\nprint(wlsarima._arma.as_summary())\nprint(wlssarimax._arma.as_summary())\n\n# -----------------\n# Save & Load\n# -----------------\n# File location\nfname_wlsarima = '../../examples/saved/wlsarima-sample.pickle'\nfname_wlssarimax = '../../examples/saved/wlssarimax-sample.pickle'\n\n# Save\nwlsarima.save(fname=fname_wlsarima)\n# wlssarimax.save(fname=fname_wlssarimax) (zstatespace can't be pickled)\n\n# Load\nwlsarima = WLSARMAWrapper().load(fname=fname_wlsarima)\n# wlssarimax = WLSARMAWrapper().load(fname=fname_wlssarimax)\n\n# -----------------\n#  Predictions\n# -----------------\n# Variables.\nstart, end = None, None\n\n# Compute predictions.\npreds_wls = wlsarima.get_prediction(start=start, end=end, ptype='wls')\npreds_arima = wlsarima.get_prediction(start=start, end=end, ptype='arma')\npreds_sarimax = wlssarimax.get_prediction(start=start, end=end, ptype='arma')\npreds_wlsarima = wlsarima.get_prediction(start=start, end=end)\npreds_wlssarimax = wlssarimax.get_prediction(start=start, end=end)\npreds_sarimax = sarimax.get_prediction(start=start, end=end)\n\n# Create figures.\nfig, axes = plt.subplots(1, 2, figsize=(10, 4))\n\n# Subplot 0\n# ---------\n# Plot observed values\nendog = getattr(wlsarima._wls, 'endog')\nexog = getattr(wlsarima._wls, 'exog')[:, 1]\naxes[0].plot(exog, endog, color='#A6CEE3', alpha=0.5, marker='o',\n             markeredgecolor='k', markeredgewidth=0.5,\n             markersize=5, linewidth=0.75, label='Observed')\n\n# Plot forecasted values (WLS-ARIMA).\naxes[0].plot(preds_wlsarima[0, :], preds_wlsarima[1, :], color='#39ac73',\n             alpha=0.95, marker='o', markersize=2, linewidth=1.0,\n             markeredgewidth=0.2, markeredgecolor='k',\n             label=wlsarima._identifier(short=True))\n\n# Plot confidence intervals (WLS-ARIMA)\naxes[0].fill_between(preds_wlsarima[0, 3:],\n                     preds_wlsarima[2, 3:],\n                     preds_wlsarima[3, 3:],\n                     color='#39ac73', alpha=0.1)\n\n# Plot forecasted values (WLS-SARIMAX).\naxes[0].plot(preds_wlssarimax[0, :], preds_wlssarimax[1, :], color='b',\n             alpha=0.95, marker='o', markersize=2, linewidth=1.0,\n             markeredgewidth=0.2, markeredgecolor='k',\n             label=wlssarimax._identifier(short=True))\n\n# Plot confidence intervals (WLS-SARIMAX)\naxes[0].fill_between(preds_wlssarimax[0, 3:],\n                     preds_wlssarimax[2, 3:],\n                     preds_wlssarimax[3, 3:],\n                     color='b', alpha=0.1)\n\n# Plot forecasted values and confidence intervals (SARIMAX).\naxes[0].plot(preds_sarimax[0, :], preds_sarimax[1, :], color='#FF0000',\n             alpha=0.95, marker='o', markersize=2, linewidth=1.0,\n             markeredgewidth=0.2, markeredgecolor='k',\n             label=sarimax._identifier())\n\n# Plot confidence intervals\naxes[0].fill_between(preds_sarimax[0, 3:],\n                     preds_sarimax[2, 3:],\n                     preds_sarimax[3, 3:],\n                     color='#FF0000', alpha=0.1)\n\n# Subplot 1\n# ---------\n# Plot observed values.\naxes[1].plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',\n             markeredgecolor='k', markeredgewidth=0.5,\n             markersize=5, linewidth=0.75, label='Observed')\n\n# Plot wls separately.\naxes[1].plot(preds_wls[0, :], preds_wls[1, :], color='#39ac73',\n             alpha=0.95, marker='o', markersize=2, linewidth=1.0,\n             markeredgewidth=0.2, markeredgecolor='k',\n             label=wlsarima._wls._identifier(short=True))\n\naxes[1].fill_between(preds_wls[0, :],\n                     preds_wls[2, :],\n                     preds_wls[3, :],\n                     color='#39ac73', alpha=0.1)\n\n# Plot arma separately.\naxes[1].plot(preds_arima[0, :], preds_arima[1, :], color='#FF0000',\n             alpha=0.95, marker='o', markersize=2, linewidth=1.0,\n             markeredgewidth=0.2, markeredgecolor='k',\n             label=wlsarima._arma._identifier())\n\naxes[1].fill_between(preds_arima[0, :],\n                     preds_arima[2, :],\n                     preds_arima[3, :],\n                     color='#FF0000', alpha=0.1)\n\n# Grid\naxes[0].grid(linestyle='--', linewidth=0.35, alpha=0.5)\naxes[1].grid(linestyle='--', linewidth=0.35, alpha=0.5)\n\n# Legend\naxes[0].legend()\naxes[1].legend()\n\n# Show\nplt.show()\n"





|

.. code-block:: default
   :lineno-start: 13


    """
    # Import class.
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.api as sm
    import statsmodels.robust.norms as norms

    from statsmodels.tsa.arima_model import ARIMA


    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.metrics.weights import SigmoidA
    from pyamr.core.regression.wls import WLSWrapper
    from pyamr.core.regression.wlsarma import WLSARMAWrapper

    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # Create timeseries data
    x, y, f = make_timeseries()

    # Create method to compute weights from frequencies
    W = SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0)

    # Note that the function fit will call M.weights(weights) inside and will
    # store the M converter in the instance. Therefore, the code execute is
    # equivalent to <weights=M.weights(f)> with the only difference being that
    # the weight converter is not saved.
    wls = WLSWrapper(estimator=sm.WLS).fit( \
        exog=x, endog=y, trend='c', weights=f,
        W=W, missing='raise')

    # Create WLS + ARIMA model.
    wlsarima = WLSARMAWrapper().fit(endog=y, exog=x, weights=f,
        wls_kwargs={'W': W, 'trend': 'c', 'missing': 'raise'},
         arima_kwargs={'exog': None, 'max_ar': 1,
                       'max_ma': 1, 'max_d': 0, 'ic': 'bic',
                       'order': (1,0,0)})

    pred1 = wlsarima.get_prediction(start=None, end=140)
    pred2 = wls.get_prediction(start=None, end=140)

    endog = getattr(wlsarima._wls, 'endog')
    exog = getattr(wlsarima._wls, 'exog')[:, 1]

    # Create figures.
    fig, axes = plt.subplots(1, 2, figsize=(10, 4), sharey=True, sharex=True)
    # Plot observations.
    axes[0].plot(exog, endog, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')
    axes[0].plot(pred1[0, :], pred1[1, :], color='#39ac73',
                 alpha=0.95, marker='o', markersize=2, linewidth=1.0,
                 markeredgewidth=0.2, markeredgecolor='k',
                 label='WLSARMA')
    axes[1].plot(pred2[0, :], pred2[1, :], color='r',
                 alpha=0.95, marker='o', markersize=2, linewidth=1.0,
                 markeredgewidth=0.2, markeredgecolor='k',
                 label='WLS')

    plt.legend()
    plt.show()

    import sys

    sys.exit()

    # Create WLS + SARIMAX model.
    wlssarimax = WLSARMAWrapper().fit(endog=y, exog=x, weights=f,
                                      wls_kwargs={'W': W, 'trend': 'c', 'missing': 'raise'},
                                      sarimax_kwargs={'exog': None, 'ic': 'bic', 'max_ar': 1, 'max_ma': 1, 'max_d': 0,
                                                      'max_P': 0, 'max_D': 0, 'max_Q': 0, 'list_s': [12]})

    # Create best SARIMAX model
    models, sarimax = SARIMAXWrapper().fit(endog=y, ic='bic',
                                           max_ar=1, max_ma=1, max_d=1,
                                           max_P=0, max_D=0, max_Q=0,
                                           list_s=[0], return_fits=True)

    # Print series.
    print(wlsarima.as_series())

    # Print summaries.
    print(wlsarima.as_summary())
    print(wlssarimax.as_summary())
    print(wlsarima._arma.as_summary())
    print(wlssarimax._arma.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    fname_wlsarima = '../../examples/saved/wlsarima-sample.pickle'
    fname_wlssarimax = '../../examples/saved/wlssarimax-sample.pickle'

    # Save
    wlsarima.save(fname=fname_wlsarima)
    # wlssarimax.save(fname=fname_wlssarimax) (zstatespace can't be pickled)

    # Load
    wlsarima = WLSARMAWrapper().load(fname=fname_wlsarima)
    # wlssarimax = WLSARMAWrapper().load(fname=fname_wlssarimax)

    # -----------------
    #  Predictions
    # -----------------
    # Variables.
    start, end = None, None

    # Compute predictions.
    preds_wls = wlsarima.get_prediction(start=start, end=end, ptype='wls')
    preds_arima = wlsarima.get_prediction(start=start, end=end, ptype='arma')
    preds_sarimax = wlssarimax.get_prediction(start=start, end=end, ptype='arma')
    preds_wlsarima = wlsarima.get_prediction(start=start, end=end)
    preds_wlssarimax = wlssarimax.get_prediction(start=start, end=end)
    preds_sarimax = sarimax.get_prediction(start=start, end=end)

    # Create figures.
    fig, axes = plt.subplots(1, 2, figsize=(10, 4))

    # Subplot 0
    # ---------
    # Plot observed values
    endog = getattr(wlsarima._wls, 'endog')
    exog = getattr(wlsarima._wls, 'exog')[:, 1]
    axes[0].plot(exog, endog, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values (WLS-ARIMA).
    axes[0].plot(preds_wlsarima[0, :], preds_wlsarima[1, :], color='#39ac73',
                 alpha=0.95, marker='o', markersize=2, linewidth=1.0,
                 markeredgewidth=0.2, markeredgecolor='k',
                 label=wlsarima._identifier(short=True))

    # Plot confidence intervals (WLS-ARIMA)
    axes[0].fill_between(preds_wlsarima[0, 3:],
                         preds_wlsarima[2, 3:],
                         preds_wlsarima[3, 3:],
                         color='#39ac73', alpha=0.1)

    # Plot forecasted values (WLS-SARIMAX).
    axes[0].plot(preds_wlssarimax[0, :], preds_wlssarimax[1, :], color='b',
                 alpha=0.95, marker='o', markersize=2, linewidth=1.0,
                 markeredgewidth=0.2, markeredgecolor='k',
                 label=wlssarimax._identifier(short=True))

    # Plot confidence intervals (WLS-SARIMAX)
    axes[0].fill_between(preds_wlssarimax[0, 3:],
                         preds_wlssarimax[2, 3:],
                         preds_wlssarimax[3, 3:],
                         color='b', alpha=0.1)

    # Plot forecasted values and confidence intervals (SARIMAX).
    axes[0].plot(preds_sarimax[0, :], preds_sarimax[1, :], color='#FF0000',
                 alpha=0.95, marker='o', markersize=2, linewidth=1.0,
                 markeredgewidth=0.2, markeredgecolor='k',
                 label=sarimax._identifier())

    # Plot confidence intervals
    axes[0].fill_between(preds_sarimax[0, 3:],
                         preds_sarimax[2, 3:],
                         preds_sarimax[3, 3:],
                         color='#FF0000', alpha=0.1)

    # Subplot 1
    # ---------
    # Plot observed values.
    axes[1].plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot wls separately.
    axes[1].plot(preds_wls[0, :], preds_wls[1, :], color='#39ac73',
                 alpha=0.95, marker='o', markersize=2, linewidth=1.0,
                 markeredgewidth=0.2, markeredgecolor='k',
                 label=wlsarima._wls._identifier(short=True))

    axes[1].fill_between(preds_wls[0, :],
                         preds_wls[2, :],
                         preds_wls[3, :],
                         color='#39ac73', alpha=0.1)

    # Plot arma separately.
    axes[1].plot(preds_arima[0, :], preds_arima[1, :], color='#FF0000',
                 alpha=0.95, marker='o', markersize=2, linewidth=1.0,
                 markeredgewidth=0.2, markeredgecolor='k',
                 label=wlsarima._arma._identifier())

    axes[1].fill_between(preds_arima[0, :],
                         preds_arima[2, :],
                         preds_arima[3, :],
                         color='#FF0000', alpha=0.1)

    # Grid
    axes[0].grid(linestyle='--', linewidth=0.35, alpha=0.5)
    axes[1].grid(linestyle='--', linewidth=0.35, alpha=0.5)

    # Legend
    axes[0].legend()
    axes[1].legend()

    # Show
    plt.show()
    """

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.001 seconds)


.. _sphx_glr_download__examples_tutorial_regression_plot_core_regression_e_ensemble.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_core_regression_e_ensemble.py <plot_core_regression_e_ensemble.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_core_regression_e_ensemble.ipynb <plot_core_regression_e_ensemble.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

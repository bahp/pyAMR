
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\regression\plot_core_regression_arima.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_regression_plot_core_regression_arima.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_regression_plot_core_regression_arima.py:


Regression - ARIMA
==================

.. GENERATED FROM PYTHON SOURCE LINES 6-148



.. image-sg:: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_arima_001.png
   :alt: ARIMA non-dynamic, ARIMA dynamic
   :srcset: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_arima_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Series:
    arima-aic                   772.5507
    arima-bic                   779.6967
    arima-hqic                  775.4157
    arima-llf                  -383.2753
    arima-const_coef            280.5548
    arima-const_std             128.5142
    arima-const_tvalue            2.1831
    arima-const_tprob              0.029
    arima-const_cil              28.6716
    arima-const_ciu             532.4381
    arima-ar.L1_coef              0.9865
    arima-ar.L1_std               0.0214
    arima-ar.L1_tvalue           46.0299
    arima-ar.L1_tprob                0.0
    arima-ar.L1_cil               0.9445
    arima-ar.L1_ciu               1.0285
    arima-sigma2_coef            811.444
    arima-sigma2_std            124.1604
    arima-sigma2_tvalue           6.5355
    arima-sigma2_tprob               0.0
    arima-sigma2_cil            568.0942
    arima-sigma2_ciu           1054.7939
    arima-m_dw                    1.8124
    arima-m_jb_value            939.4603
    arima-m_jb_prob                  0.0
    arima-m_skew                 -2.9302
    arima-m_kurtosis             18.7319
    arima-m_nm_value             80.3127
    arima-m_nm_prob                  0.0
    arima-m_ks_value              0.5373
    arima-m_ks_prob                  0.0
    arima-m_shp_value             0.7755
    arima-m_shp_prob                 0.0
    arima-m_ad_value              2.7755
    arima-m_ad_nnorm               False
    arima-converged                 True
    arima-endog            [50.502151...
    arima-order                (1, 0, 0)
    arima-trend                        c
    arima-disp                         0
    arima-model            <statsmode...
    arima-id               ARIMA(1, 0...
    dtype: object

    Summary:
                                   SARIMAX Results                                
    ==============================================================================
    Dep. Variable:                      y   No. Observations:                   80
    Model:                 ARIMA(1, 0, 0)   Log Likelihood                -383.275
    Date:                Tue, 14 Feb 2023   AIC                            772.551
    Time:                        18:29:32   BIC                            779.697
    Sample:                             0   HQIC                           775.416
                                     - 80                                         
    Covariance Type:                  opg                                         
    ==============================================================================
                     coef    std err          z      P>|z|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        280.5548    128.514      2.183      0.029      28.672     532.438
    ar.L1          0.9865      0.021     46.030      0.000       0.944       1.028
    sigma2       811.4440    124.160      6.535      0.000     568.094    1054.794
    ==============================================================================
                                        Manual                                    
    ------------------------------------------------------------------------------
    Omnibus:                        0.000  Durbin-Watson:                    1.812
    Prob(Omnibus):                  0.000  Jarque-Bera (JB):               939.460
    Skew:                          -2.930  Prob(JB):                         0.000
    Kurtosis_m:                    18.732  Cond No:                 
    Normal (N):                    80.313  Prob(N):                          0.000
    ==============================================================================
    {'_results': <statsmodels.tsa.arima.model.ARIMAResults object at 0x000001685F8177C8>, '__doc__': '\nClass to hold results from fitting an SARIMAX model.\n\nParameters\n----------\nmodel : SARIMAX instance\n    The fitted model instance\n\nAttributes\n----------\nspecification : dictionary\n    Dictionary including all attributes from the SARIMAX model instance.\npolynomial_ar : ndarray\n    Array containing autoregressive lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_ma : ndarray\n    Array containing moving average lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_seasonal_ar : ndarray\n    Array containing seasonal autoregressive lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_seasonal_ma : ndarray\n    Array containing seasonal moving average lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_trend : ndarray\n    Array containing trend polynomial coefficients, ordered from lowest\n    degree to highest. Initialized with ones, unless a coefficient is\n    constrained to be zero (in which case it is zero).\nmodel_orders : list of int\n    The orders of each of the polynomials in the model.\nparam_terms : list of str\n    List of parameters actually included in the model, in sorted order.\n\nSee Also\n--------\nstatsmodels.tsa.statespace.kalman_filter.FilterResults\nstatsmodels.tsa.statespace.mlemodel.MLEResults\n', 'mlefit': <statsmodels.base.model.LikelihoodModelResults object at 0x0000016871927048>, 'mle_retvals': {'fopt': 4.790941621111053, 'gopt': array([-2.33590925e-08, -1.85176319e-06,  3.04467562e-07]), 'fcalls': 88, 'warnflag': 0, 'converged': True, 'iterations': 20}, 'mle_settings': {'optimizer': 'lbfgs', 'start_params': array([341.557404  ,  -3.06827459,  27.78689141]), 'maxiter': 50, 'full_output': 1, 'disp': 0, 'fargs': ({'transformed': False, 'includes_fixed': False, 'score_method': None, 'approx_complex_step': True},), 'callback': None, 'retall': False, 'extra_fit_funcs': {}, 'approx_grad': True, 'epsilon': 1e-05, 'bounds': [(None, None), (None, None), (None, None)], 'iprint': 0}, 'fit_details': <statsmodels.base.model.LikelihoodModelResults object at 0x0000016871927048>}
    <statsmodels.tsa.arima.model.ARIMAResultsWrapper object at 0x0000016871927788>
    {'aic': 772.5506593777685, 'bic': 779.6967392817902, 'hqic': 775.4157272938994, 'llf': -383.27532968888426, 'const_coef': 280.5548291508317, 'const_std': 128.5142230378763, 'const_tvalue': 2.1830644306828617, 'const_tprob': 0.02903106552484044, 'const_cil': 28.671580495446506, 'const_ciu': 532.4380778062169, 'ar.L1_coef': 0.9864623740930366, 'ar.L1_std': 0.021430884326901028, 'ar.L1_tvalue': 46.02994253740541, 'ar.L1_tprob': 0.0, 'ar.L1_cil': 0.9444586126554667, 'ar.L1_ciu': 1.0284661355306066, 'sigma2_coef': 811.4440284418251, 'sigma2_std': 124.1603688680386, 'sigma2_tvalue': 6.535451173669212, 'sigma2_tprob': 6.341806953948638e-11, 'sigma2_cil': 568.0941771532613, 'sigma2_ciu': 1054.7938797303889, 'm_dw': 1.8124239044261825, 'm_jb_value': 939.4602529074716, 'm_jb_prob': 9.972363430002255e-205, 'm_skew': -2.930242473488615, 'm_kurtosis': 18.731903637465326, 'm_nm_value': 80.31265697254318, 'm_nm_prob': 3.633524768006779e-18, 'm_ks_value': 0.5372661850574851, 'm_ks_prob': 4.0107764086728166e-22, 'm_shp_value': 0.7755306363105774, 'm_shp_prob': 1.0342352529946197e-09, 'm_ad_value': 2.7755160635854708, 'm_ad_nnorm': False, 'converged': True}
    <statsmodels.tsa.arima.model.ARIMAResults object at 0x000001685F8177C8>
    [0.98646237]
    {'_results': <statsmodels.tsa.arima.model.ARIMAResults object at 0x000001685F8177C8>, '__doc__': '\nClass to hold results from fitting an SARIMAX model.\n\nParameters\n----------\nmodel : SARIMAX instance\n    The fitted model instance\n\nAttributes\n----------\nspecification : dictionary\n    Dictionary including all attributes from the SARIMAX model instance.\npolynomial_ar : ndarray\n    Array containing autoregressive lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_ma : ndarray\n    Array containing moving average lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_seasonal_ar : ndarray\n    Array containing seasonal autoregressive lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_seasonal_ma : ndarray\n    Array containing seasonal moving average lag polynomial coefficients,\n    ordered from lowest degree to highest. Initialized with ones, unless\n    a coefficient is constrained to be zero (in which case it is zero).\npolynomial_trend : ndarray\n    Array containing trend polynomial coefficients, ordered from lowest\n    degree to highest. Initialized with ones, unless a coefficient is\n    constrained to be zero (in which case it is zero).\nmodel_orders : list of int\n    The orders of each of the polynomials in the model.\nparam_terms : list of str\n    List of parameters actually included in the model, in sorted order.\n\nSee Also\n--------\nstatsmodels.tsa.statespace.kalman_filter.FilterResults\nstatsmodels.tsa.statespace.mlemodel.MLEResults\n', 'mlefit': <statsmodels.base.model.LikelihoodModelResults object at 0x0000016871927048>, 'mle_retvals': {'fopt': 4.790941621111053, 'gopt': array([-2.33590925e-08, -1.85176319e-06,  3.04467562e-07]), 'fcalls': 88, 'warnflag': 0, 'converged': True, 'iterations': 20}, 'mle_settings': {'optimizer': 'lbfgs', 'start_params': array([341.557404  ,  -3.06827459,  27.78689141]), 'maxiter': 50, 'full_output': 1, 'disp': 0, 'fargs': ({'transformed': False, 'includes_fixed': False, 'score_method': None, 'approx_complex_step': True},), 'callback': None, 'retall': False, 'extra_fit_funcs': {}, 'approx_grad': True, 'epsilon': 1e-05, 'bounds': [(None, None), (None, None), (None, None)], 'iprint': 0}, 'fit_details': <statsmodels.base.model.LikelihoodModelResults object at 0x0000016871927048>}
    <statsmodels.tsa.arima.model.ARIMAResultsWrapper object at 0x0000016871927788>
    {'aic': 772.5506593777685, 'bic': 779.6967392817902, 'hqic': 775.4157272938994, 'llf': -383.27532968888426, 'const_coef': 280.5548291508317, 'const_std': 128.5142230378763, 'const_tvalue': 2.1830644306828617, 'const_tprob': 0.02903106552484044, 'const_cil': 28.671580495446506, 'const_ciu': 532.4380778062169, 'ar.L1_coef': 0.9864623740930366, 'ar.L1_std': 0.021430884326901028, 'ar.L1_tvalue': 46.02994253740541, 'ar.L1_tprob': 0.0, 'ar.L1_cil': 0.9444586126554667, 'ar.L1_ciu': 1.0284661355306066, 'sigma2_coef': 811.4440284418251, 'sigma2_std': 124.1603688680386, 'sigma2_tvalue': 6.535451173669212, 'sigma2_tprob': 6.341806953948638e-11, 'sigma2_cil': 568.0941771532613, 'sigma2_ciu': 1054.7938797303889, 'm_dw': 1.8124239044261825, 'm_jb_value': 939.4602529074716, 'm_jb_prob': 9.972363430002255e-205, 'm_skew': -2.930242473488615, 'm_kurtosis': 18.731903637465326, 'm_nm_value': 80.31265697254318, 'm_nm_prob': 3.633524768006779e-18, 'm_ks_value': 0.5372661850574851, 'm_ks_prob': 4.0107764086728166e-22, 'm_shp_value': 0.7755306363105774, 'm_shp_prob': 1.0342352529946197e-09, 'm_ad_value': 2.7755160635854708, 'm_ad_nnorm': False, 'converged': True}
    <statsmodels.tsa.arima.model.ARIMAResults object at 0x000001685F8177C8>
    [0.98646237]






|

.. code-block:: default
   :lineno-start: 7


    # Import.
    import sys
    import warnings
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import ARIMA from statsmodels.
    #from statsmodels.tsa.arima_model import ARIMA
    from statsmodels.tsa.arima.model import ARIMA

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.arima import ARIMAWrapper

    # Filter warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create exogenous variable
    exog = x

    # ----------------------------
    # fit the model
    # ----------------------------
    # Create specific arima model.
    arima = ARIMAWrapper(estimator=ARIMA).fit( \
     endog=y[:80], order=(1,0,0), trend='c', disp=0)

    # Print series
    print("\nSeries:")
    print(arima.as_series())

    # Print summary.
    print("\nSummary:")
    print(arima.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/arima-sample.pickle'

    # Save
    #arima.save(fname=fname)

    # Load
    #arima = ARIMAWrapper().load(fname=fname)


    # -----------------
    #  Predict and plot
    # -----------------
    # This example shows how to make predictions using the wrapper which has
    # been previously fitted. It also demonstrateds how to plot the resulting
    # data for visualization purposes. It shows two different types of
    # predictions:
    #    - dynamic predictions in which the prediction is done based on the
    #      previously predicted values. Note that for the case of ARIMA(0,1,1)
    #      it returns a line.
    #    - not dynamic in which the prediction is done based on the real
    #      values of the time series, no matter what the prediction was for
    #      those values.

    # Variables.
    s, e = 50, 120

    # Compute predictions
    preds_1 = arima.get_prediction(start=s, end=e, dynamic=False)
    preds_2 = arima.get_prediction(start=s, end=e, dynamic=True)

    # Create figure
    fig, axes = plt.subplots(1, 2, figsize=(8,3))

    # ----------------
    # Plot non-dynamic
    # ----------------
    # Plot truth values.
    axes[0].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[0].plot(preds_1[0,:], preds_1[1,:], color='#FF0000', alpha=1.00,
             linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[0].fill_between(preds_1[0,:], preds_1[2,:],
                                    preds_1[3,:],
                                    color='#FF0000',
                                    alpha=0.25)

    # ------------
    # Plot dynamic
    # ------------
    # Plot truth values.
    axes[1].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                 markeredgecolor='k', markeredgewidth=0.5,
                 markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[1].plot(preds_2[0,:], preds_2[1,:], color='#FF0000', alpha=1.00,
             linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[1].fill_between(preds_2[0,:], preds_2[2,:],
                                    preds_2[3,:],
                                    color='#FF0000',
                                    alpha=0.25)

    # Configure axes
    axes[0].set_title("ARIMA non-dynamic")
    axes[1].set_title("ARIMA dynamic")

    # Format axes
    axes[0].grid(True, linestyle='--', linewidth=0.25)
    axes[1].grid(True, linestyle='--', linewidth=0.25)

    # Legend
    axes[0].legend()
    axes[1].legend()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.137 seconds)


.. _sphx_glr_download__examples_tutorial_regression_plot_core_regression_arima.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_core_regression_arima.py <plot_core_regression_arima.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_core_regression_arima.ipynb <plot_core_regression_arima.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\regression\plot_core_regression_theilsens.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_regression_plot_core_regression_theilsens.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_regression_plot_core_regression_theilsens.py:


Regression - Theil-Sen
======================

.. warning: This TheilSensWrapper imports the Regression
            base from a different file. Why do we have
            wbase.py, wreg.py and wregression.py?

.. GENERATED FROM PYTHON SOURCE LINES 10-104



.. image:: /_examples/tutorial/regression/images/sphx_glr_plot_core_regression_theilsens_001.png
    :alt: plot core regression theilsens
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Series:
    theilsens-slope               3.8476
    theilsens-intercept         235.2683
    theilsens-ci_lower            3.2946
    theilsens-ci_upper            4.3794
    theilsens-x            [0, 1, 2, ...
    theilsens-y            [2.5023912...
    theilsens-model        (3.8475834...
    theilsens-id               THEILSENS
    dtype: object

    Summary:
             TheilSens Slope   
    ==================================
    slope:                      3.8476
    intercept:                235.2683
    ci_lower:                   3.2946
    ci_upper:                   4.3794
    ==================================
    UEVAAA
    Grid Search:
                                0              1
    theilsens-s...         3.8476         3.8476
    theilsens-i...       235.2683       235.2683
    theilsens-c...         3.2946         3.3953
    theilsens-c...         4.3794          4.317
    theilsens-a...           0.05            0.1
    theilsens-x     [0, 1, 2, ...  [0, 1, 2, ...
    theilsens-y     [2.5023912...  [2.5023912...
    theilsens-m...  (3.8475834...  (3.8475834...
    theilsens-id        THEILSENS      THEILSENS






|

.. code-block:: default
   :lineno-start: 10

    # Libraries
    import numpy as np
    import pandas as pd

    # Libraries.
    import matplotlib.pyplot as plt

    # Import pyamr
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.theilsens import TheilSensWrapper

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    def make_line(length, offset, slope):
        """Create straight series."""
        # Create timeseries.
        x = np.arange(length)
        y = np.random.rand(length) * slope + offset + x
        return x, y

    # ----------------------------
    # create data
    # ----------------------------
    # Constants
    length = 100
    offset = 100
    slope = 10

    # Create series
    #x, y = make_line(length, offset, slope)

    # Create timeseries data
    x, y, f = make_timeseries()

    # Create object
    theilsens = TheilSensWrapper().fit(x=x, y=y)

    # Print series.
    print("\nSeries:")
    print(theilsens.as_series())

    # Print summary.
    print("\nSummary:")
    print(theilsens.as_summary())


    # -----------------
    #  Predictions
    # -----------------
    # Variables.
    start, end, = None, 180

    # Compute predictions.
    preds = theilsens.get_prediction(start=start, end=end)

    # Create figure
    fig, ax = plt.subplots(1, 1, figsize=(11,5))

    # Plot truth values.
    ax.plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
             markeredgecolor='k', markeredgewidth=0.5,
             markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    ax.plot(preds[0, :], preds[1, :], color='#FF0000', alpha=1.00,
             linewidth=2.0, label=theilsens._identifier())

    # Plot the confidence intervals.
    ax.fill_between(preds[0, :],
                    preds[2, :],
                    preds[3, :],
                    color='r',
                    alpha=0.1)

    # Legend
    plt.legend()

    # ----------
    # Grid search
    # -----------
    # Grid parameters.
    grid_params = {'x': [x], 'y': [y], 'alpha': [0.05, 0.1]}

    # Get summary.
    summary = TheilSensWrapper().grid_search_dataframe(grid_params=grid_params)

    # Plot result (drop x which is an array to improve visualization).
    print("Grid Search:")
    print(summary)

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.095 seconds)


.. _sphx_glr_download__examples_tutorial_regression_plot_core_regression_theilsens.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_core_regression_theilsens.py <plot_core_regression_theilsens.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_core_regression_theilsens.ipynb <plot_core_regression_theilsens.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

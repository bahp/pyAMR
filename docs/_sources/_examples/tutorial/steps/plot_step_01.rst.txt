
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\steps\plot_step_01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_steps_plot_step_01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_steps_plot_step_01.py:


Step 01 - Loading data
============================

.. note: Done quickly, needs review.

.. todo:
    1. Load data
    2. Plot summary
    3. Compute SARI
    4.

.. GENERATED FROM PYTHON SOURCE LINES 14-42

.. code-block:: default
   :lineno-start: 14

    # Libraries
    import pandas as pd


    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Path
    path = '../../../pyamr/datasets/other/susceptibility.csv'

    # Load data
    data = pd.read_csv(path,
        parse_dates=['dateReceived'])

    # Clean
    data = data.drop_duplicates()

    # Show
    print("\nData:")
    print(data)
    print("\nColumns")
    print(data.columns)

    # -------------------------------------------
    # Show a brief description
    # -------------------------------------------






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
         dateReceived  gender  age  dob  patientLocation  doctorsLocation  ...            antibioticNameOrig antibioticName antibioticCodeOrig antibioticCode sensitivity LukeCode
    0      2016-01-01     NaN  NaN  NaN              NaN              NaN  ...                      Amikacin       amikacin               AAMI           AAMI   sensitive     SMAR
    1      2016-01-01     NaN  NaN  NaN              NaN              NaN  ...                   Amoxycillin    amoxycillin               AAMO           AAMO   resistant     SMAR
    2      2016-01-01     NaN  NaN  NaN              NaN              NaN  ...  AMP C markers (SS = present)  amp c markers              AAMPC          AAMPC   resistant     SMAR
    3      2016-01-01     NaN  NaN  NaN              NaN              NaN  ...                     Augmentin      augmentin               AAUG           AAUG   resistant     SMAR
    4      2016-01-01     NaN  NaN  NaN              NaN              NaN  ...                     Aztreonam      aztreonam               AAZT           AAZT   sensitive     SMAR
    ...           ...     ...  ...  ...              ...              ...  ...                           ...            ...                ...            ...         ...      ...
    5147   2016-01-11     NaN  NaN  NaN              NaN              NaN  ...                       Tazocin        tazocin               ATAZ           ATAZ   sensitive     ECOL
    5148   2016-01-11     NaN  NaN  NaN              NaN              NaN  ...                    Temocillin     temocillin               ATEM           ATEM   sensitive     ECOL
    5149   2016-01-11     NaN  NaN  NaN              NaN              NaN  ...                   Tigecycline    tigecycline               ATIG           ATIG   sensitive     ECOL
    5150   2016-01-11     NaN  NaN  NaN              NaN              NaN  ...                    Tobramycin     tobramycin               ATOB           ATOB   sensitive     ECOL
    5151   2016-01-11     NaN  NaN  NaN              NaN              NaN  ...                  Trimethoprim   trimethoprim               ATRI           ATRI   sensitive     ECOL

    [5152 rows x 24 columns]

    Columns
    Index(['dateReceived', 'gender', 'age', 'dob', 'patientLocation',
           'doctorsLocation', 'setting', 'orderCode', 'orderName', 'specimenType',
           'labNumber', 'patNumber', 'organismNameOrig', 'organismName',
           'organismCodeOrig', 'organismCode', 'specieName', 'specieCode',
           'antibioticNameOrig', 'antibioticName', 'antibioticCodeOrig',
           'antibioticCode', 'sensitivity', 'LukeCode'],
          dtype='object')




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Compute the frequency...

.. GENERATED FROM PYTHON SOURCE LINES 44-76

.. code-block:: default
   :lineno-start: 46



    # -------------------------------------------
    # Compute Freq
    # -------------------------------------------
    # Libraries
    from pyamr.core.freq import Frequency

    # Create instance
    freq = Frequency(column_antibiotic='antibioticCode',
                     column_organism='organismCode',
                     column_date='dateReceived',
                     column_outcome='sensitivity')

    # Compute frequencies monthly
    monthly = freq.compute(data, strategy='ITI',
                                 by_category='pairs',
                                 fs='1M')
    # Add freq
    monthly['freq'] = monthly.sum(axis=1)

    # Show
    print("\nFreqs:")
    print(monthly)

    # Plot
    # .. todo: Use bar plot or any other library to plot
    #          the frequency in time. Ideally with bars
    #          where x-axis is the time and y-axi is the
    #          freq. Avoid too many x-labels, keep just
    #          years?





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Freqs:
    SENSITIVITY                   <<do not report>>  highly resistant  intermediate  not done  resistant  sensitive  freq
    SPECIE ANTIBIOTIC DATE                                                                                               
    ABAU   AAMI       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0
           ACIP       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0
           ACOT       2016-01-31                0.0               0.0           0.0       0.0        1.0        1.0   2.0
           AGEN       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0
           AMER       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0
    ...                                         ...               ...           ...       ...        ...        ...   ...
    YEAST  ATAZ       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0
           ATEM       2016-01-31                0.0               0.0           0.0       0.0        0.0        1.0   1.0
           ATIG       2016-01-31                0.0               0.0           0.0       0.0        0.0        1.0   1.0
           ATOB       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0
           ATRI       2016-01-31                0.0               0.0           0.0       0.0        0.0        1.0   1.0

    [627 rows x 7 columns]




.. GENERATED FROM PYTHON SOURCE LINES 77-82

It can be computed with different strategies...

 - hard ..
 - soft ..
 - define your own...

.. GENERATED FROM PYTHON SOURCE LINES 82-179

.. code-block:: default
   :lineno-start: 84



    # -------------------------------------------
    # Compute SARI
    # -------------------------------------------
    # Libraries
    from pyamr.core.sari import SARI

    # Compute SARI
    sari = SARI(strategy='hard').compute(monthly)

    # Show
    print("\nFreqs:")
    print(sari)

    # Plot
    # .. todo: Use bar plot or any other library to plot
    #          the frequency in time. Ideally with bars
    #          where x-axis is the time and y-axi is the
    #          freq. Avoid too many x-labels, keep just
    #          years?



    """
    summary = data.agg(
        norganisms=('organismCode', 'nunique'),
        nantibiotics=('antibioticCode', 'nunique'),
        ncultures=('orderCode', 'nunique'),
        ntests=('labNumber', 'nunique')
    )

    print(summary)

    print(data.nunique())


    print(len(data.groupby(['organismCode', 'antibioticCode'])))
    print(data.shape[0])

    summary = pd.DataFrame


    #from analysis.microbiology.statistics.frequency import Frequency

    # -----------------------------------------------------------------------------
    #                                 CONSTANTS
    # -----------------------------------------------------------------------------
    # Paths
    fname_tests = "freq_tests_pairs_year"
    fname_isola = "freq_isolates_pairs_year"
    fpath_tests = "../../results/microbiology/frequencies/%s.csv" % fname_tests
    fpath_isola = "../../results/microbiology/frequencies/%s.csv" % fname_isola

    # Object
    freq = Frequency()

    # Read data
    dff_tests = freq.load(fpath_tests)
    dff_isola = freq.load(fpath_isola)
    dff_reset = dff_tests.reset_index()

    # Basic dataframe.
    # IMPORTANT. Note that isolates refer to a single infectious organism which
    # is tested against many different anttibiotics. Hence the only way the sum
    # refers to isolate is by grouping the laboratory tests by infectious
    # organisms.
    dfy = pd.DataFrame()
    dfy['Tests'] = dff_tests['freq_ris'].groupby(level=[0]).sum()
    dfy['Isolates'] = dff_isola['freq'].groupby(level=[0]).sum()
    dfy['Tests/Isolates'] = dfy['Tests'].div(dfy['Isolates'])
    dfy['Antibiotics'] = dff_reset.groupby('dateReceived').antibioticCode.nunique()
    dfy['Organisms'] = dff_reset.groupby('dateReceived').organismCode.nunique()

    # Fill last row.
    dfy.loc['Total',:] = np.nan
    dfy.loc['Total','Tests'] = dfy['Tests'].sum(axis=0)
    dfy.loc['Total','Isolates'] = dfy['Isolates'].sum(axis=0)
    dfy.loc['Total','Tests/Isolates'] = dfy['Tests/Isolates'].mean()
    dfy.loc['Total','Antibiotics'] = dff_reset.antibioticCode.nunique()
    dfy.loc['Total','Organisms'] = dff_reset.organismCode.nunique()

    # Print dataframe.
    print("\n\n")
    print("Pandas:")
    print("-------")
    print(dfy)

    # Print dataframe latex format.
    print("\n\n")
    print("Latex:")
    print("-------")
    print(dfy.to_latex())

    #print dff_isola.head(10)
    import sys
    sys.exit()
    """



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Freqs:
    SENSITIVITY                   <<do not report>>  highly resistant  intermediate  not done  resistant  sensitive  freq  sari
    SPECIE ANTIBIOTIC DATE                                                                                                     
    ABAU   AAMI       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0   0.0
           ACIP       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0   0.0
           ACOT       2016-01-31                0.0               0.0           0.0       0.0        1.0        1.0   2.0   0.5
           AGEN       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0   0.0
           AMER       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0   0.0
    ...                                         ...               ...           ...       ...        ...        ...   ...   ...
    YEAST  ATAZ       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0   0.0
           ATEM       2016-01-31                0.0               0.0           0.0       0.0        0.0        1.0   1.0   0.0
           ATIG       2016-01-31                0.0               0.0           0.0       0.0        0.0        1.0   1.0   0.0
           ATOB       2016-01-31                0.0               0.0           0.0       0.0        0.0        2.0   2.0   0.0
           ATRI       2016-01-31                0.0               0.0           0.0       0.0        0.0        1.0   1.0   0.0

    [627 rows x 8 columns]

    '\nsummary = data.agg(\n    norganisms=(\'organismCode\', \'nunique\'),\n    nantibiotics=(\'antibioticCode\', \'nunique\'),\n    ncultures=(\'orderCode\', \'nunique\'),\n    ntests=(\'labNumber\', \'nunique\')\n)\n\nprint(summary)\n\nprint(data.nunique())\n\n\nprint(len(data.groupby([\'organismCode\', \'antibioticCode\'])))\nprint(data.shape[0])\n\nsummary = pd.DataFrame\n\n\n#from analysis.microbiology.statistics.frequency import Frequency\n\n# -----------------------------------------------------------------------------\n#                                 CONSTANTS\n# -----------------------------------------------------------------------------\n# Paths\nfname_tests = "freq_tests_pairs_year"\nfname_isola = "freq_isolates_pairs_year"\nfpath_tests = "../../results/microbiology/frequencies/%s.csv" % fname_tests\nfpath_isola = "../../results/microbiology/frequencies/%s.csv" % fname_isola\n\n# Object\nfreq = Frequency()\n\n# Read data\ndff_tests = freq.load(fpath_tests)\ndff_isola = freq.load(fpath_isola)\ndff_reset = dff_tests.reset_index()\n\n# Basic dataframe.\n# IMPORTANT. Note that isolates refer to a single infectious organism which\n# is tested against many different anttibiotics. Hence the only way the sum\n# refers to isolate is by grouping the laboratory tests by infectious\n# organisms.\ndfy = pd.DataFrame()\ndfy[\'Tests\'] = dff_tests[\'freq_ris\'].groupby(level=[0]).sum()\ndfy[\'Isolates\'] = dff_isola[\'freq\'].groupby(level=[0]).sum()\ndfy[\'Tests/Isolates\'] = dfy[\'Tests\'].div(dfy[\'Isolates\'])\ndfy[\'Antibiotics\'] = dff_reset.groupby(\'dateReceived\').antibioticCode.nunique()\ndfy[\'Organisms\'] = dff_reset.groupby(\'dateReceived\').organismCode.nunique()\n\n# Fill last row.\ndfy.loc[\'Total\',:] = np.nan\ndfy.loc[\'Total\',\'Tests\'] = dfy[\'Tests\'].sum(axis=0)\ndfy.loc[\'Total\',\'Isolates\'] = dfy[\'Isolates\'].sum(axis=0)\ndfy.loc[\'Total\',\'Tests/Isolates\'] = dfy[\'Tests/Isolates\'].mean()\ndfy.loc[\'Total\',\'Antibiotics\'] = dff_reset.antibioticCode.nunique()\ndfy.loc[\'Total\',\'Organisms\'] = dff_reset.organismCode.nunique()\n\n# Print dataframe.\nprint("\n\n")\nprint("Pandas:")\nprint("-------")\nprint(dfy)\n\n# Print dataframe latex format.\nprint("\n\n")\nprint("Latex:")\nprint("-------")\nprint(dfy.to_latex())\n\n#print dff_isola.head(10)\nimport sys\nsys.exit()\n'




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.223 seconds)


.. _sphx_glr_download__examples_tutorial_steps_plot_step_01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_step_01.py <plot_step_01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_step_01.ipynb <plot_step_01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

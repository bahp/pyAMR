
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\metrics\plot_metrics_weights.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_metrics_plot_metrics_weights.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_metrics_plot_metrics_weights.py:


Metrics - weights
=================

.. todo:: Needs better explanation of the sigmoid function and
          the SgimoidA (approximation) class and how to use it.

.. GENERATED FROM PYTHON SOURCE LINES 8-73



.. image:: /_examples/tutorial/metrics/images/sphx_glr_plot_metrics_weights_001.png
    :alt: Sigmoid Function, Frequencies, Weights
    :class: sphx-glr-single-img





.. code-block:: default
   :lineno-start: 8

    # Libraries
    import numpy as np
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import statsmodels.robust.norms as norms

    # pyAMR
    from pyamr.metrics.weights import SigmoidA

    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)
    mpl.rc('font', size=7)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # Constants
    length = 100

    # Create time-series.
    x = np.linspace(0,100,100)
    f = np.concatenate((np.random.rand(35)*50+50,
                      np.random.rand(30)*50+100,
                      np.random.rand(35)*50+150))

    # Weight Functions
    w_functions = [
    SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0),
    SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[10,90]),
    SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[25,75]),
    SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, percentiles=[40,50]),
    SigmoidA(r=200, g=0.5, offset=0.0, scale=1.0, thresholds=[15,85])]

    # Create figure
    fig, axes = plt.subplots(1,3, figsize=(10,4))

    # Plot frequencies
    axes[1].bar(x, f, color='gray', alpha=0.7, label='Frequency')

    # Plot weights
    for i,W in enumerate(w_functions):
        axes[0].plot(x, W.weights(x), label=W._identifier(short=True))
        axes[2].plot(x, W.weights(f), marker='o', alpha=0.5,
          markeredgecolor='k', markeredgewidth=0.5, markersize=4,
          linewidth=0.00, label=W._identifier(short=True))

    # Titles
    axes[0].set_title('Sigmoid Function')
    axes[1].set_title('Frequencies')
    axes[2].set_title('Weights')

    # Legends
    axes[0].legend()
    axes[1].legend()
    axes[2].legend()

    # Tight layout
    plt.tight_layout()

    # Show
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.780 seconds)


.. _sphx_glr_download__examples_tutorial_metrics_plot_metrics_weights.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_metrics_weights.py <plot_metrics_weights.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_metrics_weights.ipynb <plot_metrics_weights.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

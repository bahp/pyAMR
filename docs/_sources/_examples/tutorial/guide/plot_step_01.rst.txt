
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\guide\plot_step_01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_guide_plot_step_01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_guide_plot_step_01.py:


Step 01 - Indexes
=================

.. GENERATED FROM PYTHON SOURCE LINES 8-27

Loading data
------------

.. image:: ../../../_static/imgs/susceptibility-test-record.png
   :width: 200
   :align: right
   :alt: ASAI

A ``Susceptibility test`` record (see figure 4.1) is composed by laboratory
identification number (LID), patient identification number (PID), date, sample
type, specimen or culture (e.g. blood or urine), pathogen, antimicrobial, reported
status and outcome (resistant, sensitive or intermediate). In this research,
the susceptibility test data were grouped firstly by specimen type. Moreover,
for each sample type, the data were grouped by pairs (pathogen, antimicrobial)
since it is widely accepted by clinicians as detailed in the UK five year
strategy in AMR

A small dataset will be used for this example.


.. GENERATED FROM PYTHON SOURCE LINES 28-68

.. code-block:: default
   :lineno-start: 29


    # Libraries
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import from pyAMR
    from pyamr.datasets.load import make_susceptibility

    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data = make_susceptibility()
    data = data.drop_duplicates()

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.dtypes)

    # -------------------------------------------
    # Show a brief description
    # -------------------------------------------
    # .. todo: Compute basic information such as the number of unique organisms,
    #          antimicrobials, pairs, species, isolates, tests, the range of
    #          dates, ....

    # Show unique elements
    print("\nUnique values:")
    for c in ['microorganism_code',
              'antimicrobial_code',
              'specimen_code',
              'laboratory_number']:
        print('%-18s -> %5s' % (c, data[c].nunique()))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
           date_received  date_outcome  patient_id laboratory_number specimen_code  specimen_name  ... antimicrobial_code antimicrobial_name sensitivity_method sensitivity mic  reported
    0         2009-01-03           NaN       20091           X428501        BLDCUL            NaN  ...               AAMI           amikacin                NaN   sensitive NaN       NaN
    1         2009-01-03           NaN       20091           X428501        BLDCUL            NaN  ...               AAMO        amoxycillin                NaN   resistant NaN       NaN
    2         2009-01-03           NaN       20091           X428501        BLDCUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    3         2009-01-03           NaN       20091           X428501        BLDCUL            NaN  ...               AAZT          aztreonam                NaN   sensitive NaN       NaN
    4         2009-01-03           NaN       20091           X428501        BLDCUL            NaN  ...               ACAZ        ceftazidime                NaN   sensitive NaN       NaN
    ...              ...           ...         ...               ...           ...            ...  ...                ...                ...                ...         ...  ..       ...
    319117    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN  ...               AAMO        amoxycillin                NaN   sensitive NaN       NaN
    319118    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN  ...               ALIN          linezolid                NaN   sensitive NaN       NaN
    319119    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN  ...               ASYN           synercid                NaN   resistant NaN       NaN
    319120    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN  ...               ATEI        teicoplanin                NaN   sensitive NaN       NaN
    319121    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN  ...               AVAN         vancomycin                NaN   sensitive NaN       NaN

    [319122 rows x 15 columns]

    Columns:
    date_received            object
    date_outcome            float64
    patient_id                int64
    laboratory_number        object
    specimen_code            object
    specimen_name           float64
    specimen_description     object
    microorganism_code       object
    microorganism_name       object
    antimicrobial_code       object
    antimicrobial_name       object
    sensitivity_method      float64
    sensitivity              object
    mic                     float64
    reported                float64
    dtype: object

    Unique values:
    microorganism_code ->    67
    antimicrobial_code ->    58
    specimen_code      ->    22
    laboratory_number  -> 34816




.. GENERATED FROM PYTHON SOURCE LINES 69-96

Computing SARI
--------------

The Single Antimicrobial Resistance Index - ``SARI`` - describes the proportion
of resistant isolates for a given set of susceptibility tests. It provides a
value within the range [0, 1] where values close to one indicate high resistance.
It is agnostic to pathogen, antibiotic and/or time. The variables ``R``, ``I`` and
``S`` represent the number of susceptibility tests with Resistant, Intermediate and
Susceptible outcomes respectively. The definition might vary slightly since the
intermediate category is not always considered.

The parameter strategy accepts the following options:

  - ``soft``   as R / R+I+S
  - ``medium`` as R / R+S
  - ``hard``  as R+I / R+I+S
  - ``other``  as R+0.5I / R+0.5I+S

For more information see: :py:mod:`pyamr.core.sari.SARI`

For more examples see:

  - :ref:`sphx_glr__examples_tutorial_indexes_plot_core_sari.py`
  - :ref:`sphx_glr__examples_indexes_plot_sari_antibiogram.py`
  - :ref:`sphx_glr__examples_indexes_plot_sari_clustermap.py`
  - :ref:`sphx_glr__examples_indexes_plot_sari_relmap.py`


.. GENERATED FROM PYTHON SOURCE LINES 97-151

.. code-block:: default
   :lineno-start: 98


    # -------------------------------------------
    # Compute SARI
    # -------------------------------------------
    # Libraries
    from pyamr.core.sari import SARI

    # Create sari instance
    sari = SARI(groupby=['specimen_code',
                         'microorganism_name',
                         'antimicrobial_name',
                         'sensitivity'])

    # Compute SARI overall
    sari_overall = sari.compute(data,
        return_frequencies=True)

    # Show
    print("SARI (overall):")
    print(sari_overall)

    # Plot Heatmap
    # ------------
    # Filter
    matrix = sari_overall.copy(deep=True)
    matrix = matrix.reset_index()
    matrix = matrix[matrix.freq > 100]
    matrix = matrix[matrix.specimen_code.isin(['BLDCUL'])]

    # Pivot table
    matrix = pd.pivot_table(matrix,
        index='microorganism_name',
        columns='antimicrobial_name',
        values='sari')

    # Create figure
    f, ax = plt.subplots(1, 1, figsize=(10, 4))

    # Create colormap
    cmap = sns.color_palette("Reds", desat=0.5, n_colors=10)

    # Plot
    ax = sns.heatmap(data=matrix*100, annot=True, fmt=".0f",
        annot_kws={'fontsize': 'small'}, cmap=cmap,
        linewidth=0.5, vmin=0, vmax=100, ax=ax,
        xticklabels=1, yticklabels=1)

    # Add title
    plt.suptitle("Antibiogram", fontsize='xx-large')

    # Tight layout
    plt.tight_layout()
    plt.subplots_adjust(right=1.05)




.. image-sg:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_001.png
   :alt: Antibiogram
   :srcset: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    SARI (overall):
    sensitivity                                                             intermediate  resistant  sensitive  freq      sari
    specimen_code microorganism_name                    antimicrobial_name                                                    
    BFLCUL        anaerobes                             metronidazole                0.0        0.0        1.0   1.0  0.000000
                  bacillus                              ciprofloxacin                0.0        0.0        1.0   1.0  0.000000
                                                        clindamycin                  0.0        3.0        1.0   4.0  0.750000
                                                        erythromycin                 0.0        1.0        3.0   4.0  0.250000
                                                        fusidic acid                 0.0        3.0        1.0   4.0  0.750000
    ...                                                                              ...        ...        ...   ...       ...
    XINCUL        streptococcus beta-haemolytic group b cephalexin                   0.0        1.0        0.0   1.0  1.000000
                                                        clindamycin                  0.0        1.0        8.0   9.0  0.111111
                                                        erythromycin                 0.0        1.0        8.0   9.0  0.111111
                                                        penicillin                   0.0        0.0        9.0   9.0  0.000000
                                                        tetracycline                 0.0        8.0        1.0   9.0  0.888889

    [4491 rows x 5 columns]




.. GENERATED FROM PYTHON SOURCE LINES 152-192

Computing ASAI
--------------

The antimicrobial spectrum of activity refers to the range of microbe species
that are susceptible to these agents and therefore can be treated. In general,
antimicrobial agents are classified into broad, intermediate or narrow spectrum.
Broad spectrum antimicrobials are active against both Gram-positive and
Gram-negative bacteria. In contrast, narrow spectrum antimicrobials have limited
activity and are effective only against particular species of bacteria. While these
profiles appeared in the mid-1950s, little effort has been made to define them.
Furthermore, such ambiguous labels are overused for different and even contradictory
purposes.

In order to compute the antimicrobial spectrum of activity index - ``ASAI`` -, it
is necessary to previously obtain the overall resistance (SARI) for all the
microbe-antimicrobial pairs. Furthermore, by following the criteria used in the
narrow-broad approach, these pairs were grouped into Gram-positive and Gram-negative.
Briefly, the weighted proportion of species to which the antimicrobial
is effective is computed for each genus. These are later added up and normalized by
the number of genera tested. An antimicrobial is considered effective to treat a
particular species when the corresponding resistance index (SARI) is lower than
a given threshold.

For more information see: :py:mod:`pyamr.core.asai.ASAI`

For more examples see:

  - :ref:`sphx_glr__examples_tutorial_indexes_plot_core_asai.py`
  - :ref:`sphx_glr__examples_indexes_plot_spectrum_gramtype.py`
  - :ref:`sphx_glr__examples_indexes_plot_spectrum_multiple.py`


In order to compute ``ASAI``, we need to have the following columns present
in our dataset: ``antimicrobial``, ``microorganism_genus``, ``microorganism_species``
and ``resistance``.  Moreover, in this example we will compute the ASAI for each
``gram_stain`` category independently so we will need the microorganism gram stain
information too. This information is available in the registries: :py:mod:`pyamr.datasets.registries`

Lets include all this information using the ``MicroorganismRegistry``.


.. GENERATED FROM PYTHON SOURCE LINES 193-219

.. code-block:: default
   :lineno-start: 194


    # ------------------------------
    # Include gram stain
    # ------------------------------
    # Libraries
    from pyamr.datasets.registries import MicroorganismRegistry

    # Load registry
    mreg = MicroorganismRegistry()

    # Format sari dataframe
    dataframe = sari_overall.copy(deep=True)
    dataframe = dataframe.reset_index()

    # Create genus and species
    dataframe[['genus', 'species']] = \
        dataframe.microorganism_name \
            .str.capitalize() \
            .str.split(expand=True, n=1)

    # Combine with registry information
    dataframe = mreg.combine(dataframe, on='microorganism_name')

    # Fill missing gram stain
    dataframe.gram_stain = dataframe.gram_stain.fillna('u')








.. GENERATED FROM PYTHON SOURCE LINES 220-223

Now that we have the ``genus``, ``species`` and ``gram_stain`` information,
lets compute ``ASAI``.


.. GENERATED FROM PYTHON SOURCE LINES 224-257

.. code-block:: default
   :lineno-start: 225


    # -------------------------------------------
    # Compute ASAI
    # -------------------------------------------
    # Import specific libraries
    from pyamr.core.asai import ASAI

    # Create asai instance
    asai = ASAI(column_genus='genus',
                column_specie='species',
                column_resistance='sari',
                column_frequency='freq')

    # Compute
    scores = asai.compute(dataframe,
        groupby=['specimen_code',
                 'antimicrobial_name',
                 'gram_stain'],
        weights='uniform',
        threshold=0.5,
        min_freq=0)

    # Stack
    scores = scores.unstack()

    # Filter and drop index.
    scores = scores.filter(like='URICUL', axis=0)
    scores.index = scores.index.droplevel()

    # Show
    print("\nASAI (overall):")
    print(scores)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:530: UserWarning:


                     Extreme resistances were found in the DataFrame. These rows
                     should be reviewed since these resistances might correspond
                     to pairs with low number of records.


    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:544: UserWarning:


                     There are NULL values in columns that are required. These
                     rows will be ignored to safely compute ASAI. Please review
                     the DataFrame and address this inconsistencies. See below
                     for more information: 

                            specimen_code            0
                            antimicrobial_name       0
                            gram_stain               0
                            GENUS                    0
                            SPECIE                2414
                            RESISTANCE               0



    ASAI (overall):
                       N_GENUS          N_SPECIE          ASAI_SCORE              
    gram_stain               n    p   u        n    p   u          n         p   u
    antimicrobial_name                                                            
    amikacin               5.0  NaN NaN      5.0  NaN NaN   1.000000       NaN NaN
    amoxycillin            2.0  2.0 NaN      2.0  7.0 NaN   0.500000  0.833333 NaN
    amp c markers          4.0  NaN NaN      4.0  NaN NaN   0.250000       NaN NaN
    augmentin              5.0  2.0 NaN      5.0  7.0 NaN   0.200000  1.000000 NaN
    aztreonam              3.0  NaN NaN      3.0  NaN NaN   0.666667       NaN NaN
    cefotaxime             5.0  NaN NaN      5.0  NaN NaN   0.200000       NaN NaN
    cefoxitin              5.0  NaN NaN      5.0  NaN NaN   0.400000       NaN NaN
    cefpodoxime            5.0  2.0 NaN      5.0  5.0 NaN   0.400000  0.833333 NaN
    ceftazidime            5.0  NaN NaN      5.0  NaN NaN   0.600000       NaN NaN
    cefuroxime             5.0  NaN NaN      5.0  NaN NaN   0.000000       NaN NaN
    cephalexin             5.0  2.0 NaN      5.0  7.0 NaN   0.200000  0.875000 NaN
    ciprofloxacin          6.0  2.0 NaN      6.0  7.0 NaN   0.833333  1.000000 NaN
    clindamycin            NaN  2.0 NaN      NaN  4.0 NaN        NaN  1.000000 NaN
    colistin sulphate      5.0  NaN NaN      5.0  NaN NaN   0.800000       NaN NaN
    cotrimoxazole          3.0  NaN NaN      3.0  NaN NaN   0.666667       NaN NaN
    ertapenem              3.0  NaN NaN      3.0  NaN NaN   0.666667       NaN NaN
    erythromycin           NaN  2.0 NaN      NaN  6.0 NaN        NaN  0.833333 NaN
    esbl markers           5.0  NaN NaN      5.0  NaN NaN   0.200000       NaN NaN
    flucloxacillin         1.0  1.0 NaN      1.0  3.0 NaN   0.000000  1.000000 NaN
    fusidic acid           NaN  1.0 NaN      NaN  3.0 NaN        NaN  0.666667 NaN
    gentamicin             5.0  1.0 NaN      5.0  3.0 NaN   0.800000  1.000000 NaN
    imipenem               5.0  NaN NaN      5.0  NaN NaN   0.800000       NaN NaN
    linezolid              NaN  1.0 NaN      NaN  3.0 NaN        NaN  1.000000 NaN
    mecillinam             5.0  NaN NaN      5.0  NaN NaN   0.400000       NaN NaN
    meropenem              5.0  NaN NaN      5.0  NaN NaN   0.600000       NaN NaN
    mls markers            NaN  1.0 NaN      NaN  3.0 NaN        NaN  0.333333 NaN
    mupirocin              NaN  1.0 NaN      NaN  2.0 NaN        NaN  1.000000 NaN
    naladixic acid         1.0  NaN NaN      1.0  NaN NaN   1.000000       NaN NaN
    nitrofurantoin         5.0  2.0 NaN      5.0  7.0 NaN   0.200000  1.000000 NaN
    novobiocin             1.0  1.0 NaN      1.0  3.0 NaN   0.000000  0.666667 NaN
    penicillin             1.0  2.0 NaN      1.0  6.0 NaN   0.000000  0.500000 NaN
    rifampicin             NaN  1.0 NaN      NaN  3.0 NaN        NaN  1.000000 NaN
    sulphamethoxazole      2.0  NaN NaN      2.0  NaN NaN   0.500000       NaN NaN
    tazocin                5.0  NaN NaN      5.0  NaN NaN   1.000000       NaN NaN
    teicoplanin            NaN  2.0 NaN      NaN  7.0 NaN        NaN  1.000000 NaN
    temocillin             3.0  NaN NaN      3.0  NaN NaN   0.666667       NaN NaN
    tetracycline           1.0  2.0 NaN      1.0  6.0 NaN   1.000000  0.833333 NaN
    timentin               4.0  NaN NaN      4.0  NaN NaN   0.750000       NaN NaN
    tobramycin             5.0  NaN NaN      5.0  NaN NaN   0.600000       NaN NaN
    trimethoprim           5.0  2.0 NaN      5.0  7.0 NaN   0.200000  1.000000 NaN
    vancomycin             NaN  2.0 NaN      NaN  7.0 NaN        NaN  1.000000 NaN




.. GENERATED FROM PYTHON SOURCE LINES 258-259

Lets plot it now!

.. GENERATED FROM PYTHON SOURCE LINES 260-355

.. code-block:: default
   :lineno-start: 261


    # ----------------
    # Helper method
    # ----------------
    def scalar_colormap(values, cmap, vmin, vmax):
        """This method creates a colormap based on values.

        Parameters
        ----------
        values : array-like
          The values to create the corresponding colors

        cmap : str
          The colormap

        vmin, vmax : float
          The minimum and maximum possible values

        Returns
        -------
        scalar colormap
        """
        # Create scalar mappable
        norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
        mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
        # Gete color map
        colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
        # Return
        return colormap

    # ---------------------------------------------------------------
    # Plot
    # ---------------------------------------------------------------
    # .. note: In order to sort the scores we need to compute metrics
    #          that combine the different subcategories (e.g. gram-negative
    #          and gram-positive). Two possible options are: (i) use the
    #          gmean or (ii) the width.
    # Measures
    scores['width'] = np.abs(scores['ASAI_SCORE'].sum(axis=1))

    # Variables to plot.
    x = scores.index.values
    y_n = scores['ASAI_SCORE']['n'].values
    y_p = scores['ASAI_SCORE']['p'].values
    y_u = scores['ASAI_SCORE']['u'].values

    # Constants
    colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
    colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)
    colormap_u = scalar_colormap(y_u, cmap='Greens', vmin=-0.1, vmax=1.1)

    # ----------
    # Example
    # ----------
    # This example shows an stacked figure using more than two categories.
    # For instance, it uses gram-positive, gram-negative and gram-unknown.
    # All the indexes go within the range [0,1].
    # Create the figure
    f, axes = plt.subplots(1, 3, figsize=(7, 9))

    # Plot each category
    sns.barplot(x=y_p, y=x, palette=colormap_p, ax=axes[0], orient='h',
                saturation=0.5, label='Gram-positive')
    sns.barplot(x=y_n, y=x, palette=colormap_n, ax=axes[1], orient='h',
                saturation=0.5, label='Gram-negative')
    sns.barplot(x=y_u, y=x, palette=colormap_u, ax=axes[2], orient='h',
                saturation=0.5, label='Gram-unknown')

    # Configure
    sns.despine(bottom=True)

    # Format figure
    plt.subplots_adjust(wspace=0.0, hspace=0.0)

    # Remove yticks
    axes[1].set_yticks([])
    axes[2].set_yticks([])

    # Set title
    axes[0].set_title('Gram-positive')
    axes[1].set_title('Gram-negative')
    axes[2].set_title('Gram-unknown')

    # Set x-axis
    axes[0].set_xlim([0, 1.1])
    axes[1].set_xlim([0, 1.1])
    axes[2].set_xlim([0, 1.1])

    # Adjust
    plt.tight_layout()

    # Show
    plt.show()





.. image-sg:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_002.png
   :alt: Gram-positive, Gram-negative, Gram-unknown
   :srcset: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 356-372

Computing SART
--------------

The single antimicrobial resistance trend - ``SART`` - measures the ratio
of change per time unit (e.g. monthly or yearly). To compute this metric,
it is necessary to generate a resistance time series from the susceptibility
test data. This is often achieved by computing the SARI consecutive or
overlapping partitions of the data. Then, the trend can be extracted using
for example a linear model where the slope, which is a value within the
range [-1, 1] indicates the ratio of change.

For more information see: :py:mod:`pyamr.core.sart.SART`

For more examples see:

.. warning:: Pending!


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.042 seconds)


.. _sphx_glr_download__examples_tutorial_guide_plot_step_01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_step_01.py <plot_step_01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_step_01.ipynb <plot_step_01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

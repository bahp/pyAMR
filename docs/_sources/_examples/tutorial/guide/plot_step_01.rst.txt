
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\guide\plot_step_01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_guide_plot_step_01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_guide_plot_step_01.py:


Step 01 - Introduction
============================

.. note: Done quickly, needs review.

.. todo:
    1. Load data
    2. Plot summary
    3. Compute SARI
    4.

.. GENERATED FROM PYTHON SOURCE LINES 17-30

Loading data
------------

A ``Susceptibility test`` record is composed by laboratory identification
number (LID), patient identification number (PID), date, sample type or
culture (e.g. blood or urine), pathogen, antimicrobial, reported status
and outcome (resistant, sensitive or intermediate). In this research,
the susceptibility test data were grouped firstly by sample type. Moreover,
for each sample type, the data were grouped by pairs (pathogen, antimicrobial)
since it is widely accepted by clinicians as detailed in the UK five year
strategy in AMR

A small dataset will be used for this example.

.. GENERATED FROM PYTHON SOURCE LINES 31-95

.. code-block:: default
   :lineno-start: 33



    # Libraries
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import from pyAMR
    from pyamr.datasets.load import make_susceptibility

    # -------------------------------------------
    # Constants
    # -------------------------------------------
    # Path
    path = '../../../pyamr/datasets/microbiology/susceptibility.csv'
    path_org = '../../../pyamr/datasets/microbiology/db_microorganisms.csv'
    path_abx = '../../../pyamr/datasets/microbiology/db_antimicrobials.csv'

    # Columns
    usecols = ['dateReceived',
               'labNumber',
               'patNumber',
               'orderName',
               'orderCode',
               'organismName',
               'organismCode',
               'antibioticName',
               'antibioticCode',
               'sensitivity']

    # Sensitivities to keep
    sensitivities = ['sensitive',
                     'intermediate',
                     'resistant']

    # Specimens
    specimen = ['BLDCUL']

    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data = make_susceptibility()

    # Clean
    data = data[data.sensitivity.isin(sensitivities)]
    data = data[data.specimen_code.isin(specimen)]
    data = data.drop_duplicates()

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.columns)

    # -------------------------------------------
    # Show a brief description
    # -------------------------------------------
    # .. todo: Compute basic information such as the number of unique organisms,
    #          antimicrobials, pairs, species, isolates, tests, the range of
    #          dates, ....





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
                  date_received         date_outcome LastActDateODBC  ...  microorganism_specie microorganism_gram_type antimicrobial_class
    24      2020-04-24 11:50:00  2020-04-28 00:00:00      28/04/2020  ...                aureus                       p                 NaN
    25      2020-04-24 11:50:00  2020-04-28 00:00:00      28/04/2020  ...                aureus                       p    fluoroquinolones
    26      2020-04-24 11:50:00  2020-04-28 00:00:00      28/04/2020  ...                aureus                       p          macrolides
    27      2020-04-24 11:50:00  2020-04-28 00:00:00      28/04/2020  ...                aureus                       p          macrolides
    28      2020-04-24 11:50:00  2020-04-28 00:00:00      28/04/2020  ...                aureus                       p                 NaN
    ...                     ...                  ...             ...  ...                   ...                     ...                 ...
    124584  2021-01-18 12:08:00                  NaN      2021-01-24  ...    coagulase negative                       p         penicillins
    124585  2021-01-18 12:08:00                  NaN      2021-01-24  ...    coagulase negative                       p                 NaN
    124586  2021-01-18 12:08:00                  NaN      2021-01-24  ...    coagulase negative                       p                 NaN
    124587  2021-01-18 12:08:00                  NaN      2021-01-24  ...    coagulase negative                       p       tetracyclines
    124588  2021-01-18 12:08:00                  NaN      2021-01-24  ...    coagulase negative                       p                 NaN

    [12438 rows x 22 columns]

    Columns:
    Index(['date_received', 'date_outcome', 'LastActDateODBC', 'patient_id',
           'laboratory_number', 'specimen_code', 'specimen_name',
           'specimen_description', 'microorganism_piece_counter',
           'microorganism_code', 'microorganism_name', 'antimicrobial_code',
           'antimicrobial_name', 'sensitivity_method', 'sensitivity_code', 'mic',
           'reported', 'sensitivity', 'microorganism_genus',
           'microorganism_specie', 'microorganism_gram_type',
           'antimicrobial_class'],
          dtype='object')




.. GENERATED FROM PYTHON SOURCE LINES 96-125

Computing Freq
--------------

.. note: Double check if the category 'isolate' is also valid.

This section explains the main concepts in order to understand how the
computation of frequencies using the ``Frequency`` class works. For more
information see the documentation (xxx). The frequency can be computed using the
``Frequency`` class for three different categories; the ``organisms``,
``antibiotics`` and ``pairs`` which are composed by an organism and an antibiotic.
In addition, regarding to time, the susceptibility data can be grouped following
different strategies:

- **Overall** - ``overall``
  All the data is used and therefore the outcome is a single number for
  the selected category (organisms, antibiotics or pairs)``. If no
  strategy is specified this will be used.

- **Independent time intervals** - ``ITI``
  This is the traditional method used in antimicrobial surveillance systems
  where the time spans considered are independent; that is, they do not overlap
  (e.g. month or year).

- **Overlapping time intervals** - ``OTI``
  This method is defined as a fixed region which is moved across time to compute
  consecutive resistance indexes. It is described by two parameters; the length
  of the region (period) and the distance between consecutive windows (shift).

For more information see :ref:`sphx_glr__examples_tutorial_indexes_plot_core_frequency.py`.

.. GENERATED FROM PYTHON SOURCE LINES 126-163

.. code-block:: default
   :lineno-start: 127


    # -------------------------------------------
    # Compute Freq
    # -------------------------------------------
    # Import specific libraries
    from pyamr.core.freq import Frequency

    # Create instance
    freq = Frequency(column_antibiotic='antimicrobial_code',
                     column_organism='microorganism_code',
                     column_date='date_received',
                     column_outcome='sensitivity')

    # Compute frequencies (overall)
    freq_overall = freq.compute(data, by_category='pairs')

    # Compute frequencies (monthly)
    freq_monthly = freq.compute(data, strategy='ITI',
                                 by_category='pairs',
                                 fs='1M')
    # Add freq
    freq_overall['freq'] = freq_overall.sum(axis=1)
    freq_monthly['freq'] = freq_monthly.sum(axis=1)

    # Show
    print("\nFreq (overall):")
    print(freq_overall)
    print("\nFreq (monthly):")
    print(freq_monthly)

    # Plot
    # .. todo: Use bar plot or any other library to plot
    #          the frequency in time. Ideally with bars
    #          where x-axis is the time and y-axis is the
    #          freq. Avoid too many x-labels, keep just
    #          years?





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Freq (overall):
    SENSITIVITY        intermediate  resistant  sensitive  freq
    SPECIE ANTIBIOTIC                                          
    ABAU   AAMI                 0.0        0.0        1.0   1.0
           ACIP                 1.0        0.0        0.0   1.0
           ACOT                 0.0        0.0        1.0   1.0
           AGEN                 0.0        0.0        1.0   1.0
           AMER                 0.0        0.0        1.0   1.0
    ...                         ...        ...        ...   ...
    STREP  AVAN                 0.0        0.0        5.0   5.0
    SVES   ACLI                 0.0        0.0        1.0   1.0
           APEN                 0.0        0.0        1.0   1.0
           ATET                 0.0        0.0        1.0   1.0
           AVAN                 0.0        0.0        1.0   1.0

    [688 rows x 4 columns]

    Freq (monthly):
    SENSITIVITY                   intermediate  resistant  sensitive  freq
    SPECIE ANTIBIOTIC DATE                                                
    ABAU   AAMI       2020-08-31           0.0        0.0        1.0   1.0
           ACIP       2020-08-31           1.0        0.0        0.0   1.0
           ACOT       2020-08-31           0.0        0.0        1.0   1.0
           AGEN       2020-08-31           0.0        0.0        1.0   1.0
           AMER       2020-08-31           0.0        0.0        1.0   1.0
    ...                                    ...        ...        ...   ...
    STREP  AVAN       2021-01-31           0.0        0.0        1.0   1.0
    SVES   ACLI       2021-01-31           0.0        0.0        1.0   1.0
           APEN       2021-01-31           0.0        0.0        1.0   1.0
           ATET       2021-01-31           0.0        0.0        1.0   1.0
           AVAN       2021-01-31           0.0        0.0        1.0   1.0

    [2935 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 164-185

Computing SARI
--------------

.. note:: SARI can be computed very easily (class might not be needed)

The Single Antimicrobial Resistance Index - ``SARI`` - describes the proportion
of resistant isolates for a given set of susceptibility tests. It provides a
value within the range [0, 1] where values close to one indicate high resistance.
It is agnostic to pathogen, antibiotic and/or time. The variables ``R``, ``I`` and
``S`` represent the number of susceptibility tests with Resistant, Intermediate and
Susceptible outcomes respectively. The definition might vary slightly since the
intermediate category is not always considered.

The parameter strategy accepts three different options:

 (i) ``soft``   as R / R+I+S
 (ii) ``medium`` as R / R+S
 (iii) ``hard``  as R+I / R+I+S
 (iv) ``other``  as R+0.5I / R+0.5I+S

For more information see :ref:`sphx_glr__examples_tutorial_indexes_plot_core_sari.py`.

.. GENERATED FROM PYTHON SOURCE LINES 186-232

.. code-block:: default
   :lineno-start: 187


    # -------------------------------------------
    # Compute SARI
    # -------------------------------------------
    # Import specific libraries
    from pyamr.core.sari import SARI

    # Compute SARI
    sari_overall = SARI(strategy='hard').compute(freq_overall)
    sari_monthly = SARI(strategy='hard').compute(freq_monthly)

    # Show
    print("\nSARI (overall):")
    print(sari_overall)
    print("\nSARI (monthly):")
    print(sari_monthly)

    # Plot Heatmap
    # ------------
    # Create matrix
    matrix = sari_overall.copy(deep=True)
    matrix = matrix[matrix.freq > 100]
    matrix = matrix[['sari']]
    matrix = matrix.unstack() * 100
    matrix.columns = matrix.columns.droplevel()

    # Create figure
    f, ax = plt.subplots(1, 1, figsize=(10, 4))

    # Create colormap
    cmap = sns.color_palette("Reds", desat=0.5, n_colors=10)

    # Plot
    ax = sns.heatmap(data=matrix, annot=True, fmt=".0f",
        annot_kws={'fontsize': 'small'}, cmap=cmap,
        linewidth=0.5, vmin=0, vmax=100, ax=ax,
        xticklabels=1, yticklabels=1)

    # Add title
    plt.suptitle("Antibiogram", fontsize='xx-large')

    # Tight layout
    plt.tight_layout()
    plt.subplots_adjust(right=1.05)





.. image:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_001.png
    :alt: Antibiogram
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SARI (overall):
    SENSITIVITY        intermediate  resistant  sensitive  freq  sari
    SPECIE ANTIBIOTIC                                                
    ABAU   AAMI                 0.0        0.0        1.0   1.0   0.0
           ACIP                 1.0        0.0        0.0   1.0   1.0
           ACOT                 0.0        0.0        1.0   1.0   0.0
           AGEN                 0.0        0.0        1.0   1.0   0.0
           AMER                 0.0        0.0        1.0   1.0   0.0
    ...                         ...        ...        ...   ...   ...
    STREP  AVAN                 0.0        0.0        5.0   5.0   0.0
    SVES   ACLI                 0.0        0.0        1.0   1.0   0.0
           APEN                 0.0        0.0        1.0   1.0   0.0
           ATET                 0.0        0.0        1.0   1.0   0.0
           AVAN                 0.0        0.0        1.0   1.0   0.0

    [688 rows x 5 columns]

    SARI (monthly):
    SENSITIVITY                   intermediate  resistant  sensitive  freq  sari
    SPECIE ANTIBIOTIC DATE                                                      
    ABAU   AAMI       2020-08-31           0.0        0.0        1.0   1.0   0.0
           ACIP       2020-08-31           1.0        0.0        0.0   1.0   1.0
           ACOT       2020-08-31           0.0        0.0        1.0   1.0   0.0
           AGEN       2020-08-31           0.0        0.0        1.0   1.0   0.0
           AMER       2020-08-31           0.0        0.0        1.0   1.0   0.0
    ...                                    ...        ...        ...   ...   ...
    STREP  AVAN       2021-01-31           0.0        0.0        1.0   1.0   0.0
    SVES   ACLI       2021-01-31           0.0        0.0        1.0   1.0   0.0
           APEN       2021-01-31           0.0        0.0        1.0   1.0   0.0
           ATET       2021-01-31           0.0        0.0        1.0   1.0   0.0
           AVAN       2021-01-31           0.0        0.0        1.0   1.0   0.0

    [2935 rows x 5 columns]




.. GENERATED FROM PYTHON SOURCE LINES 233-259

Computing ASAI
--------------

.. note:: ASAI...

The antimicrobial spectrum of activity refers to the range of microbe species
that are susceptible to these agents and therefore can be treated. In general,
antimicrobial agents are classified into broad, intermediate or narrow spectrum.
Broad spectrum antimicrobials are active against both Gram-positive and
Gram-negative bacteria. In contrast, narrow spectrum antimicrobials have limited
activity and are effective only against particular species of bacteria. While these
profiles appeared in the mid-1950s, little effort has been made to define them.
Furthermore, such ambiguous labels are overused for different and even contradictory
purposes.

In order to compute the antimicrobial spectrum of activity index - ``ASAI`` -, it
is necessary to previously obtain the overall resistance (SARI) for all the
microbe-antimicrobial pairs. Furthermore, by following the criteria used in the
narrow-broad approach, these pairs were grouped into Gram-positive and Gram-negative.
Briefly, the weighted proportion of species to which the antimicrobial
is effective is computed for each genus. These are later added up and normalized by
the number of genera tested. An antimicrobial is considered effective to treat a
particular species when the corresponding resistance index (SARI) is lower than
a given threshold.

For more information see :ref:`sphx_glr__examples_tutorial_indexes_plot_core_asai.py`.

.. GENERATED FROM PYTHON SOURCE LINES 260-393

.. code-block:: default
   :lineno-start: 261


    # -------------------------------------------
    # Compute ASAI
    # -------------------------------------------
    # Import specific libraries
    from pyamr.core.asai import ASAI


    # Format DataFrame
    dataframe = sari_overall.copy(deep=True)
    dataframe = sari_overall.reset_index()
    dataframe = dataframe.merge(data, how='left',
        left_on='SPECIE', right_on='microorganism_code')

    # Fill empty
    # .. note: Leads to division by 0 (investigate)
    dataframe.microorganism_gram_type = \
        dataframe.microorganism_gram_type.fillna('u')

    print(dataframe.columns)

    # Create antimicrobial spectrum of activity instance
    asai = ASAI(weights='uniform',
                threshold=0.05,
                column_genus='microorganism_name',
                column_specie='SPECIE',
                column_antibiotic='ANTIBIOTIC',
                column_resistance='sari')

    # Compute
    scores = asai.compute(dataframe,
                by_category='microorganism_gram_type')

    # .. note: In order to sort the scores we need to compute metrics
    #          that combine the different subcategories (e.g. gram-negative
    #          and gram-positive). Two possible options are: (i) use the
    #          gmean or (ii) the width.
    # Measures
    scores = scores.fillna(0.0)
    scores['width'] = np.abs(scores['ASAI_SCORE']['n'] + scores['ASAI_SCORE']['p'])
    scores['gmean'] = np.sqrt(scores['ASAI_SCORE']['n'] * scores['ASAI_SCORE']['p'])
    scores = scores.sort_values(by='gmean', ascending=False)

    # Show scores
    print("Data output:")
    print(scores)


    # ----------------
    # Plot
    # ----------------
    def scalar_colormap(values, cmap, vmin, vmax):
        """This method creates a colormap based on values.

        Parameters
        ----------
        values : array-like
          The values to create the corresponding colors

        cmap : str
          The colormap

        vmin, vmax : float
          The minimum and maximum possible values

        Returns
        -------
        scalar colormap
        """
        # Create scalar mappable
        norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
        mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
        # Gete color map
        colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
        # Return
        return colormap


    # Variables to plot.
    x = scores.index.values
    y_n = scores['ASAI_SCORE']['n'].values
    y_p = scores['ASAI_SCORE']['p'].values
    y_u = scores['ASAI_SCORE']['u'].values

    # Constants
    colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
    colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)
    colormap_u = scalar_colormap(y_u, cmap='Greens', vmin=-0.1, vmax=1.1)

    # ----------
    # Example
    # ----------
    # This example shows an stacked figure using more than two categories.
    # For instance, it uses gram-positive, gram-negative and gram-unknown.
    # All the indexes go within the range [0,1].
    # Create the figure
    f, axes = plt.subplots(1, 3, figsize=(7, 7))

    # Plot each category
    sns.barplot(x=y_p, y=x, palette=colormap_p, ax=axes[0], orient='h',
                saturation=0.5, label='Gram-positive')
    sns.barplot(x=y_n, y=x, palette=colormap_n, ax=axes[1], orient='h',
                saturation=0.5, label='Gram-negative')
    sns.barplot(x=y_u, y=x, palette=colormap_u, ax=axes[2], orient='h',
                saturation=0.5, label='Gram-unknown')

    # Configure
    sns.despine(bottom=True)

    # Format figure
    plt.subplots_adjust(wspace=0.0, hspace=0.0)

    # Remove yticks
    axes[1].set_yticks([])
    axes[2].set_yticks([])

    # Set title
    axes[0].set_title('Gram-positive')
    axes[1].set_title('Gram-negative')
    axes[2].set_title('Gram-unknown')

    # Set x-axis
    axes[0].set_xlim([0, 1.1])
    axes[1].set_xlim([0, 1.1])
    axes[2].set_xlim([0, 1.1])

    # Adjust
    plt.tight_layout()

    # Show
    plt.show()





.. image:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_002.png
    :alt: Gram-positive, Gram-negative, Gram-unknown
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Index(['SPECIE', 'ANTIBIOTIC', 'intermediate', 'resistant', 'sensitive',
           'freq', 'sari', 'date_received', 'date_outcome', 'LastActDateODBC',
           'patient_id', 'laboratory_number', 'specimen_code', 'specimen_name',
           'specimen_description', 'microorganism_piece_counter',
           'microorganism_code', 'microorganism_name', 'antimicrobial_code',
           'antimicrobial_name', 'sensitivity_method', 'sensitivity_code', 'mic',
           'reported', 'sensitivity', 'microorganism_genus',
           'microorganism_specie', 'microorganism_gram_type',
           'antimicrobial_class'],
          dtype='object')
    Data output:
                            N_GENUS             N_SPECIE             ASAI_SCORE                         width     gmean
    microorganism_gram_type       n     p     u        n     p     u          n         p         u                    
    ANTIBIOTIC                                                                                                         
    ANIT                        1.0   1.0   1.0      1.0   1.0   1.0   1.000000  1.000000  1.000000  2.000000  1.000000
    AMER                       12.0   1.0  14.0     12.0   1.0  14.0   0.750000  1.000000  1.000000  1.750000  0.866025
    AFOX                        6.0   1.0   4.0      6.0   1.0   4.0   0.500000  1.000000  1.000000  1.500000  0.707107
    ACOT                        8.0   1.0  12.0      8.0   1.0  12.0   0.500000  1.000000  0.916667  1.500000  0.707107
    ATIG                        8.0   4.0   8.0      8.0   4.0   8.0   0.625000  0.500000  1.000000  1.125000  0.559017
    ACIP                       11.0   4.0  12.0     11.0   4.0  12.0   0.545455  0.500000  1.000000  1.045455  0.522233
    ATRI                        1.0   5.0   2.0      1.0   5.0   2.0   1.000000  0.200000  0.500000  1.200000  0.447214
    AAUG                        5.0   1.0   4.0      5.0   1.0   4.0   0.200000  1.000000  1.000000  1.200000  0.447214
    AGEN                       12.0   6.0  13.0     12.0   6.0  13.0   0.583333  0.333333  1.000000  0.916667  0.440959
    AMET                        0.0   4.0   2.0      0.0   4.0   2.0   0.000000  0.250000  1.000000  0.250000  0.000000
    AMF                         0.0   0.0   1.0      0.0   0.0   1.0   0.000000  0.000000  1.000000  0.000000  0.000000
    AMLS                        0.0   5.0   0.0      0.0   5.0   0.0   0.000000  0.200000  0.000000  0.200000  0.000000
    AMTZ                        0.0   2.0   1.0      0.0   2.0   1.0   0.000000  0.500000  1.000000  0.500000  0.000000
    AMUP                        0.0   7.0   0.0      0.0   7.0   0.0   0.000000  0.714286  0.000000  0.714286  0.000000
    ANEO                        0.0   7.0   2.0      0.0   7.0   2.0   0.000000  0.571429  1.000000  0.571429  0.000000
    ARIF                        0.0   9.0   3.0      0.0   9.0   3.0   0.000000  0.555556  1.000000  0.555556  0.000000
    APCZ                        0.0   0.0   1.0      0.0   0.0   1.0   0.000000  0.000000  1.000000  0.000000  0.000000
    APEN                        0.0  23.0   5.0      0.0  23.0   5.0   0.000000  0.695652  1.000000  0.695652  0.000000
    ALEV                        0.0   1.0   1.0      0.0   1.0   1.0   0.000000  1.000000  1.000000  1.000000  0.000000
    ATAZ                       11.0   0.0   7.0     11.0   0.0   7.0   0.454545  0.000000  0.857143  0.454545  0.000000
    ATEI                        0.0   6.0   0.0      0.0   6.0   0.0   0.000000  0.666667  0.000000  0.666667  0.000000
    ATEM                        9.0   0.0   5.0      9.0   0.0   5.0   0.666667  0.000000  1.000000  0.666667  0.000000
    ATET                        0.0  14.0   7.0      0.0  14.0   7.0   0.000000  0.642857  1.000000  0.642857  0.000000
    ATOB                        3.0   0.0   0.0      3.0   0.0   0.0   0.666667  0.000000  0.000000  0.666667  0.000000
    AVAN                        0.0  25.0   4.0      0.0  25.0   4.0   0.000000  0.960000  1.000000  0.960000  0.000000
    ALIN                        0.0  13.0   4.0      0.0  13.0   4.0   0.000000  1.000000  1.000000  1.000000  0.000000
    AAMI                       12.0   0.0  12.0     12.0   0.0  12.0   0.916667  0.000000  1.000000  0.916667  0.000000
    AITR                        0.0   0.0   1.0      0.0   0.0   1.0   0.000000  0.000000  1.000000  0.000000  0.000000
    AIMP                        3.0   0.0   2.0      3.0   0.0   2.0   0.666667  0.000000  1.000000  0.666667  0.000000
    AAMPH                       0.0   0.0   1.0      0.0   0.0   1.0   0.000000  0.000000  1.000000  0.000000  0.000000
    AAND                        0.0   0.0   1.0      0.0   0.0   1.0   0.000000  0.000000  1.000000  0.000000  0.000000
    AAZT                        9.0   0.0   5.0      9.0   0.0   5.0   0.444444  0.000000  0.800000  0.444444  0.000000
    ACAZ                       10.0   0.0   5.0     10.0   0.0   5.0   0.400000  0.000000  0.800000  0.400000  0.000000
    ACHL                        0.0   9.0   3.0      0.0   9.0   3.0   0.000000  0.888889  1.000000  0.888889  0.000000
    ACLI                        0.0  21.0   4.0      0.0  21.0   4.0   0.000000  0.428571  0.750000  0.428571  0.000000
    ACLZ                        3.0   0.0   0.0      3.0   0.0   0.0   0.666667  0.000000  0.000000  0.666667  0.000000
    ACONE                       7.0   0.0   7.0      7.0   0.0   7.0   0.428571  0.000000  0.857143  0.428571  0.000000
    ACPIM                       4.0   0.0   1.0      4.0   0.0   1.0   0.750000  0.000000  1.000000  0.750000  0.000000
    ACPO                        1.0   0.0   0.0      1.0   0.0   0.0   1.000000  0.000000  0.000000  1.000000  0.000000
    ACXM                        6.0   0.0   7.0      6.0   0.0   7.0   0.166667  0.000000  0.857143  0.166667  0.000000
    ACZA                       10.0   0.0   3.0     10.0   0.0   3.0   0.900000  0.000000  1.000000  0.900000  0.000000
    ADAP                        0.0   2.0   0.0      0.0   2.0   0.0   0.000000  1.000000  0.000000  1.000000  0.000000
    AERT                        9.0   0.0   8.0      9.0   0.0   8.0   0.777778  0.000000  1.000000  0.777778  0.000000
    AERY                        0.0  12.0   2.0      0.0  12.0   2.0   0.000000  0.416667  0.500000  0.416667  0.000000
    AESBL                       3.0   0.0   0.0      3.0   0.0   0.0   0.333333  0.000000  0.000000  0.333333  0.000000
    AFLUZ                       0.0   0.0   1.0      0.0   0.0   1.0   0.000000  0.000000  1.000000  0.000000  0.000000
    AFUS                        0.0   8.0   2.0      0.0   8.0   2.0   0.000000  0.500000  1.000000  0.500000  0.000000
    AAMP                        2.0   3.0   2.0      2.0   3.0   2.0   0.000000  0.666667  1.000000  0.666667  0.000000
    AVOR                        0.0   0.0   1.0      0.0   0.0   1.0   0.000000  0.000000  1.000000  0.000000  0.000000




.. GENERATED FROM PYTHON SOURCE LINES 394-398

Computing SART
--------------

.. warning:: To include.

.. GENERATED FROM PYTHON SOURCE LINES 402-404

Dirty code to use and or delete
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 405-479

.. code-block:: default
   :lineno-start: 406


    """
    summary = data.agg(
        norganisms=('organismCode', 'nunique'),
        nantibiotics=('antibioticCode', 'nunique'),
        ncultures=('orderCode', 'nunique'),
        ntests=('labNumber', 'nunique')
    )

    print(summary)

    print(data.nunique())


    print(len(data.groupby(['organismCode', 'antibioticCode'])))
    print(data.shape[0])

    summary = pd.DataFrame


    #from analysis.microbiology.statistics.frequency import Frequency

    # -----------------------------------------------------------------------------
    #                                 CONSTANTS
    # -----------------------------------------------------------------------------
    # Paths
    fname_tests = "freq_tests_pairs_year"
    fname_isola = "freq_isolates_pairs_year"
    fpath_tests = "../../results/microbiology/frequencies/%s.csv" % fname_tests
    fpath_isola = "../../results/microbiology/frequencies/%s.csv" % fname_isola

    # Object
    freq = Frequency()

    # Read data
    dff_tests = freq.load(fpath_tests)
    dff_isola = freq.load(fpath_isola)
    dff_reset = dff_tests.reset_index()

    # Basic dataframe.
    # IMPORTANT. Note that isolates refer to a single infectious organism which
    # is tested against many different anttibiotics. Hence the only way the sum
    # refers to isolate is by grouping the laboratory tests by infectious
    # organisms.
    dfy = pd.DataFrame()
    dfy['Tests'] = dff_tests['freq_ris'].groupby(level=[0]).sum()
    dfy['Isolates'] = dff_isola['freq'].groupby(level=[0]).sum()
    dfy['Tests/Isolates'] = dfy['Tests'].div(dfy['Isolates'])
    dfy['Antibiotics'] = dff_reset.groupby('dateReceived').antibioticCode.nunique()
    dfy['Organisms'] = dff_reset.groupby('dateReceived').organismCode.nunique()

    # Fill last row.
    dfy.loc['Total',:] = np.nan
    dfy.loc['Total','Tests'] = dfy['Tests'].sum(axis=0)
    dfy.loc['Total','Isolates'] = dfy['Isolates'].sum(axis=0)
    dfy.loc['Total','Tests/Isolates'] = dfy['Tests/Isolates'].mean()
    dfy.loc['Total','Antibiotics'] = dff_reset.antibioticCode.nunique()
    dfy.loc['Total','Organisms'] = dff_reset.organismCode.nunique()

    # Print dataframe.
    print("\n\n")
    print("Pandas:")
    print("-------")
    print(dfy)

    # Print dataframe latex format.
    print("\n\n")
    print("Latex:")
    print("-------")
    print(dfy.to_latex())

    #print dff_isola.head(10)
    import sys
    sys.exit()
    """



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '\nsummary = data.agg(\n    norganisms=(\'organismCode\', \'nunique\'),\n    nantibiotics=(\'antibioticCode\', \'nunique\'),\n    ncultures=(\'orderCode\', \'nunique\'),\n    ntests=(\'labNumber\', \'nunique\')\n)\n\nprint(summary)\n\nprint(data.nunique())\n\n\nprint(len(data.groupby([\'organismCode\', \'antibioticCode\'])))\nprint(data.shape[0])\n\nsummary = pd.DataFrame\n\n\n#from analysis.microbiology.statistics.frequency import Frequency\n\n# -----------------------------------------------------------------------------\n#                                 CONSTANTS\n# -----------------------------------------------------------------------------\n# Paths\nfname_tests = "freq_tests_pairs_year"\nfname_isola = "freq_isolates_pairs_year"\nfpath_tests = "../../results/microbiology/frequencies/%s.csv" % fname_tests\nfpath_isola = "../../results/microbiology/frequencies/%s.csv" % fname_isola\n\n# Object\nfreq = Frequency()\n\n# Read data\ndff_tests = freq.load(fpath_tests)\ndff_isola = freq.load(fpath_isola)\ndff_reset = dff_tests.reset_index()\n\n# Basic dataframe.\n# IMPORTANT. Note that isolates refer to a single infectious organism which\n# is tested against many different anttibiotics. Hence the only way the sum\n# refers to isolate is by grouping the laboratory tests by infectious\n# organisms.\ndfy = pd.DataFrame()\ndfy[\'Tests\'] = dff_tests[\'freq_ris\'].groupby(level=[0]).sum()\ndfy[\'Isolates\'] = dff_isola[\'freq\'].groupby(level=[0]).sum()\ndfy[\'Tests/Isolates\'] = dfy[\'Tests\'].div(dfy[\'Isolates\'])\ndfy[\'Antibiotics\'] = dff_reset.groupby(\'dateReceived\').antibioticCode.nunique()\ndfy[\'Organisms\'] = dff_reset.groupby(\'dateReceived\').organismCode.nunique()\n\n# Fill last row.\ndfy.loc[\'Total\',:] = np.nan\ndfy.loc[\'Total\',\'Tests\'] = dfy[\'Tests\'].sum(axis=0)\ndfy.loc[\'Total\',\'Isolates\'] = dfy[\'Isolates\'].sum(axis=0)\ndfy.loc[\'Total\',\'Tests/Isolates\'] = dfy[\'Tests/Isolates\'].mean()\ndfy.loc[\'Total\',\'Antibiotics\'] = dff_reset.antibioticCode.nunique()\ndfy.loc[\'Total\',\'Organisms\'] = dff_reset.organismCode.nunique()\n\n# Print dataframe.\nprint("\n\n")\nprint("Pandas:")\nprint("-------")\nprint(dfy)\n\n# Print dataframe latex format.\nprint("\n\n")\nprint("Latex:")\nprint("-------")\nprint(dfy.to_latex())\n\n#print dff_isola.head(10)\nimport sys\nsys.exit()\n'




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.892 seconds)


.. _sphx_glr_download__examples_tutorial_guide_plot_step_01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_step_01.py <plot_step_01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_step_01.ipynb <plot_step_01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

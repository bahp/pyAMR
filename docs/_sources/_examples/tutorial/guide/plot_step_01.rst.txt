
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\guide\plot_step_01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__examples_tutorial_guide_plot_step_01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_guide_plot_step_01.py:


Step 01 - Compute AMR metrics
=============================

.. GENERATED FROM PYTHON SOURCE LINES 8-27

Loading susceptibility test data
--------------------------------

.. image:: ../../../_static/imgs/susceptibility-test-record.png
   :width: 200
   :align: right
   :alt: ASAI

A ``Susceptibility test`` record (see figure 4.1) is composed by laboratory
identification number (LID), patient identification number (PID), date, sample
type, specimen or culture (e.g. blood or urine), pathogen, antimicrobial, reported
status and outcome (resistant, sensitive or intermediate). In this research,
the susceptibility test data were grouped firstly by specimen type. Moreover,
for each sample type, the data were grouped by pairs (pathogen, antimicrobial)
since it is widely accepted by clinicians as detailed in the UK five year
strategy in AMR.

A small dataset will be used for this example.


.. GENERATED FROM PYTHON SOURCE LINES 27-64

.. code-block:: default
   :lineno-start: 28


    # Libraries
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import from pyAMR
    from pyamr.datasets.load import make_susceptibility

    try:
        __file__
        TERMINAL = True
    except:
        TERMINAL = False

    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data = make_susceptibility()
    data = data.drop_duplicates()

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.dtypes)
    print("\nUnique:")
    print(data[[
        'microorganism_code',
        'antimicrobial_code',
        'specimen_code',
        'laboratory_number',
        'patient_id']].nunique())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Data:
           date_received  date_outcome  patient_id laboratory_number specimen_code  specimen_name specimen_description  ... microorganism_name antimicrobial_code antimicrobial_name sensitivity_method  sensitivity mic  reported
    0         2009-01-03           NaN       20091           X428501        BLDCUL            NaN                blood  ...         klebsiella               AAMI           amikacin                NaN    sensitive NaN       NaN
    1         2009-01-03           NaN       20091           X428501        BLDCUL            NaN                blood  ...         klebsiella               AAMO        amoxycillin                NaN    resistant NaN       NaN
    2         2009-01-03           NaN       20091           X428501        BLDCUL            NaN                blood  ...         klebsiella               AAUG          augmentin                NaN    sensitive NaN       NaN
    3         2009-01-03           NaN       20091           X428501        BLDCUL            NaN                blood  ...         klebsiella               AAZT          aztreonam                NaN    sensitive NaN       NaN
    4         2009-01-03           NaN       20091           X428501        BLDCUL            NaN                blood  ...         klebsiella               ACAZ        ceftazidime                NaN    sensitive NaN       NaN
    ...              ...           ...         ...               ...           ...            ...                  ...  ...                ...                ...                ...                ...          ...  ..       ...
    319117    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN                blood  ...       enterococcus               AAMO        amoxycillin                NaN    sensitive NaN       NaN
    319118    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN                blood  ...       enterococcus               ALIN          linezolid                NaN    sensitive NaN       NaN
    319119    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN                blood  ...       enterococcus               ASYN           synercid                NaN    resistant NaN       NaN
    319120    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN                blood  ...       enterococcus               ATEI        teicoplanin                NaN    sensitive NaN       NaN
    319121    2009-12-31           NaN       24645          H2012337        BLDCUL            NaN                blood  ...       enterococcus               AVAN         vancomycin                NaN    sensitive NaN       NaN

    [319122 rows x 15 columns]

    Columns:
    date_received            object
    date_outcome            float64
    patient_id                int64
    laboratory_number        object
    specimen_code            object
    specimen_name           float64
    specimen_description     object
    microorganism_code       object
    microorganism_name       object
    antimicrobial_code       object
    antimicrobial_name       object
    sensitivity_method      float64
    sensitivity              object
    mic                     float64
    reported                float64
    dtype: object

    Unique:
    microorganism_code       67
    antimicrobial_code       58
    specimen_code            22
    laboratory_number     34816
    patient_id            24646
    dtype: int64




.. GENERATED FROM PYTHON SOURCE LINES 65-85

Computing SARI
--------------

The Single Antimicrobial Resistance Index or ``SARI`` describes the proportion
of resistant isolates for a given set of susceptibility tests. It provides a
value within the range [0, 1] where values close to one indicate high resistance.
It is agnostic to pathogen, antibiotic and/or time. The variables ``R``, ``I`` and
``S`` represent the number of susceptibility tests with Resistant, Intermediate and
Susceptible outcomes respectively. The definition might vary slightly since the
intermediate category is not always considered.

For more information see: :py:mod:`pyamr.core.sari.SARI`

For more examples see:

  - :ref:`sphx_glr__examples_tutorial_indexes_plot_core_a_sari.py`
  - :ref:`sphx_glr__examples_indexes_plot_sari_a_antibiogram.py`
  - :ref:`sphx_glr__examples_indexes_plot_sari_b_clustermap.py`
  - :ref:`sphx_glr__examples_indexes_plot_sari_c_relmap.py`


.. GENERATED FROM PYTHON SOURCE LINES 86-141

.. code-block:: default
   :lineno-start: 87


    # -------------------------------------------
    # Compute SARI
    # -------------------------------------------
    # Libraries
    from pyamr.core.sari import SARI

    # Create sari instance
    sari = SARI(groupby=['specimen_code',
                         'microorganism_name',
                         'antimicrobial_name',
                         'sensitivity'])

    # Compute SARI overall
    sari_overall = sari.compute(data,
        return_frequencies=True)

    # Show
    print("SARI (overall):")
    print(sari_overall)

    # ------------
    # Plot Heatmap
    # ------------
    # Filter
    matrix = sari_overall.copy(deep=True)
    matrix = matrix.reset_index()
    matrix = matrix[matrix.freq > 100]
    matrix = matrix[matrix.specimen_code.isin(['BLDCUL'])]

    # Pivot table
    matrix = pd.pivot_table(matrix,
        index='microorganism_name',
        columns='antimicrobial_name',
        values='sari')

    # Create figure
    f, ax = plt.subplots(1, 1, figsize=(10, 4))

    # Create colormap
    cmap = sns.color_palette("Reds", desat=0.5, n_colors=10)

    # Plot
    ax = sns.heatmap(data=matrix*100, annot=True, fmt=".0f",
        annot_kws={'fontsize': 'small'}, cmap=cmap,
        linewidth=0.5, vmin=0, vmax=100, ax=ax,
        xticklabels=1, yticklabels=1)

    # Add title
    plt.suptitle("Antibiogram", fontsize='xx-large')

    # Tight layout
    plt.tight_layout()
    plt.subplots_adjust(right=1.05)




.. image-sg:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_001.png
   :alt: Antibiogram
   :srcset: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SARI (overall):
                                                                            intermediate  resistant  sensitive  freq      sari
    specimen_code microorganism_name                    antimicrobial_name                                                    
    BFLCUL        anaerobes                             metronidazole                0.0        0.0        1.0   1.0  0.000000
                  bacillus                              ciprofloxacin                0.0        0.0        1.0   1.0  0.000000
                                                        clindamycin                  0.0        3.0        1.0   4.0  0.750000
                                                        erythromycin                 0.0        1.0        3.0   4.0  0.250000
                                                        fusidic acid                 0.0        3.0        1.0   4.0  0.750000
    ...                                                                              ...        ...        ...   ...       ...
    XINCUL        streptococcus beta-haemolytic group b cephalexin                   0.0        1.0        0.0   1.0  1.000000
                                                        clindamycin                  0.0        1.0        8.0   9.0  0.111111
                                                        erythromycin                 0.0        1.0        8.0   9.0  0.111111
                                                        penicillin                   0.0        0.0        9.0   9.0  0.000000
                                                        tetracycline                 0.0        8.0        1.0   9.0  0.888889

    [4491 rows x 5 columns]




.. GENERATED FROM PYTHON SOURCE LINES 142-146

Computing MARI
--------------

.. warning:: Pending... similar to ``SARI``.

.. GENERATED FROM PYTHON SOURCE LINES 149-189

Computing ASAI
--------------

The antimicrobial spectrum of activity refers to the range of microbe species
that are susceptible to these agents and therefore can be treated. In general,
antimicrobial agents are classified into broad, intermediate or narrow spectrum.
Broad spectrum antimicrobials are active against both Gram-positive and
Gram-negative bacteria. In contrast, narrow spectrum antimicrobials have limited
activity and are effective only against particular species of bacteria. While these
profiles appeared in the mid-1950s, little effort has been made to define them.
Furthermore, such ambiguous labels are overused for different and even contradictory
purposes.

In order to compute the antimicrobial spectrum of activity index or ``ASAI``, it
is necessary to previously obtain the overall resistance (SARI) for all the
microbe-antimicrobial pairs. Furthermore, by following the criteria used in the
narrow-broad approach, these pairs were grouped into Gram-positive and Gram-negative.
Briefly, the weighted proportion of species to which the antimicrobial
is effective is computed for each genus. These are later added up and normalized by
the number of genera tested. An antimicrobial is considered effective to treat a
particular species when the corresponding resistance index (SARI) is lower than
a given threshold.

For more information see: :py:mod:`pyamr.core.asai.ASAI`

For more examples see:

  - :ref:`sphx_glr__examples_indexes_plot_asai_a_gramtype.py`
  - :ref:`sphx_glr__examples_indexes_plot_asai_b_multiple.py`


In order to compute ``ASAI``, we need to have the following columns present
in our dataset: ``antimicrobial``, ``microorganism_genus``, ``microorganism_species``
and ``resistance``.  Moreover, in this example we will compute the ASAI for each
``gram_stain`` category independently so we will need the microorganism gram stain
information too. This information is available in the registries:
:py:mod:`pyamr.datasets.registries`

Lets include all this information using the ``MicroorganismRegistry``.


.. GENERATED FROM PYTHON SOURCE LINES 190-216

.. code-block:: default
   :lineno-start: 191


    # ------------------------------
    # Include gram stain
    # ------------------------------
    # Libraries
    from pyamr.datasets.registries import MicroorganismRegistry

    # Load registry
    mreg = MicroorganismRegistry()

    # Format sari dataframe
    dataframe = sari_overall.copy(deep=True)
    dataframe = dataframe.reset_index()

    # Create genus and species
    dataframe[['genus', 'species']] = \
        dataframe.microorganism_name \
            .str.capitalize() \
            .str.split(expand=True, n=1)

    # Combine with registry information
    dataframe = mreg.combine(dataframe, on='microorganism_name')

    # Fill missing gram stain
    dataframe.gram_stain = dataframe.gram_stain.fillna('u')








.. GENERATED FROM PYTHON SOURCE LINES 217-220

Now that we have the ``genus``, ``species`` and ``gram_stain`` information,
lets compute ``ASAI``.


.. GENERATED FROM PYTHON SOURCE LINES 221-254

.. code-block:: default
   :lineno-start: 222


    # -------------------------------------------
    # Compute ASAI
    # -------------------------------------------
    # Import specific libraries
    from pyamr.core.asai import ASAI

    # Create asai instance
    asai = ASAI(column_genus='genus',
                column_specie='species',
                column_resistance='sari',
                column_frequency='freq')

    # Compute
    scores = asai.compute(dataframe,
        groupby=['specimen_code',
                 'antimicrobial_name',
                 'gram_stain'],
        weights='uniform',
        threshold=0.5,
        min_freq=0)

    # Stack
    scores = scores.unstack()

    # Filter and drop index.
    scores = scores.filter(like='URICUL', axis=0)
    scores.index = scores.index.droplevel()

    # Show
    print("\nASAI (overall):")
    print(scores)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:572: UserWarning:


                     Extreme resistances [0, 1] were found in the DataFrame. These 
                     rows should be reviewed since these resistances might correspond
                     to pairs with low number of records.


    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:583: UserWarning:


                     There are NULL values in columns that are required. These
                     rows will be ignored to safely compute ASAI. Please review
                     the DataFrame and address this inconsistencies. See below
                     for more information: 

                            specimen_code            0
                            antimicrobial_name       0
                            gram_stain               0
                            GENUS                    0
                            SPECIE                2414
                            RESISTANCE               0



    ASAI (overall):
                       N_GENUS          N_SPECIE          ASAI_SCORE              
    gram_stain               n    p   u        n    p   u          n         p   u
    antimicrobial_name                                                            
    amikacin               5.0  NaN NaN      5.0  NaN NaN   0.800000       NaN NaN
    amoxycillin            2.0  2.0 NaN      2.0  7.0 NaN   0.500000  0.833333 NaN
    amp c markers          4.0  NaN NaN      4.0  NaN NaN   0.250000       NaN NaN
    augmentin              5.0  2.0 NaN      5.0  7.0 NaN   0.200000  1.000000 NaN
    aztreonam              3.0  NaN NaN      3.0  NaN NaN   0.666667       NaN NaN
    cefotaxime             5.0  NaN NaN      5.0  NaN NaN   0.200000       NaN NaN
    cefoxitin              5.0  NaN NaN      5.0  NaN NaN   0.400000       NaN NaN
    cefpodoxime            5.0  2.0 NaN      5.0  5.0 NaN   0.400000  0.833333 NaN
    ceftazidime            5.0  NaN NaN      5.0  NaN NaN   0.600000       NaN NaN
    cefuroxime             5.0  NaN NaN      5.0  NaN NaN   0.000000       NaN NaN
    cephalexin             5.0  2.0 NaN      5.0  7.0 NaN   0.200000  0.875000 NaN
    ciprofloxacin          6.0  2.0 NaN      6.0  7.0 NaN   0.333333  0.875000 NaN
    clindamycin            NaN  2.0 NaN      NaN  4.0 NaN        NaN  1.000000 NaN
    colistin sulphate      5.0  NaN NaN      5.0  NaN NaN   0.800000       NaN NaN
    cotrimoxazole          3.0  NaN NaN      3.0  NaN NaN   0.333333       NaN NaN
    ertapenem              3.0  NaN NaN      3.0  NaN NaN   0.666667       NaN NaN
    erythromycin           NaN  2.0 NaN      NaN  6.0 NaN        NaN  0.833333 NaN
    esbl markers           5.0  NaN NaN      5.0  NaN NaN   0.200000       NaN NaN
    flucloxacillin         1.0  1.0 NaN      1.0  3.0 NaN   0.000000  1.000000 NaN
    fusidic acid           NaN  1.0 NaN      NaN  3.0 NaN        NaN  0.666667 NaN
    gentamicin             5.0  1.0 NaN      5.0  3.0 NaN   0.800000  1.000000 NaN
    imipenem               5.0  NaN NaN      5.0  NaN NaN   0.600000       NaN NaN
    linezolid              NaN  1.0 NaN      NaN  3.0 NaN        NaN  1.000000 NaN
    mecillinam             5.0  NaN NaN      5.0  NaN NaN   0.400000       NaN NaN
    meropenem              5.0  NaN NaN      5.0  NaN NaN   0.600000       NaN NaN
    mls markers            NaN  1.0 NaN      NaN  3.0 NaN        NaN  0.333333 NaN
    mupirocin              NaN  1.0 NaN      NaN  2.0 NaN        NaN  1.000000 NaN
    naladixic acid         1.0  NaN NaN      1.0  NaN NaN   1.000000       NaN NaN
    nitrofurantoin         5.0  2.0 NaN      5.0  7.0 NaN   0.200000  1.000000 NaN
    novobiocin             1.0  1.0 NaN      1.0  3.0 NaN   0.000000  0.666667 NaN
    penicillin             1.0  2.0 NaN      1.0  6.0 NaN   0.000000  0.500000 NaN
    rifampicin             NaN  1.0 NaN      NaN  3.0 NaN        NaN  1.000000 NaN
    sulphamethoxazole      2.0  NaN NaN      2.0  NaN NaN   0.500000       NaN NaN
    tazocin                5.0  NaN NaN      5.0  NaN NaN   0.800000       NaN NaN
    teicoplanin            NaN  2.0 NaN      NaN  7.0 NaN        NaN  1.000000 NaN
    temocillin             3.0  NaN NaN      3.0  NaN NaN   0.666667       NaN NaN
    tetracycline           1.0  2.0 NaN      1.0  6.0 NaN   1.000000  0.833333 NaN
    timentin               4.0  NaN NaN      4.0  NaN NaN   0.750000       NaN NaN
    tobramycin             5.0  NaN NaN      5.0  NaN NaN   0.600000       NaN NaN
    trimethoprim           5.0  2.0 NaN      5.0  7.0 NaN   0.200000  1.000000 NaN
    vancomycin             NaN  2.0 NaN      NaN  7.0 NaN        NaN  1.000000 NaN




.. GENERATED FROM PYTHON SOURCE LINES 255-259

This is the information obtained where the columns n, p, and u stand
for gram-positive, gram-negative and unknown respectively. Similarly,
N_GENUS and N_SPECIE indicates the number of genus and species for
the specific antimicrobial.

.. GENERATED FROM PYTHON SOURCE LINES 259-261

.. code-block:: default
   :lineno-start: 259

    scores.head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="3" halign="left">N_GENUS</th>
          <th colspan="3" halign="left">N_SPECIE</th>
          <th colspan="3" halign="left">ASAI_SCORE</th>
        </tr>
        <tr>
          <th>gram_stain</th>
          <th>n</th>
          <th>p</th>
          <th>u</th>
          <th>n</th>
          <th>p</th>
          <th>u</th>
          <th>n</th>
          <th>p</th>
          <th>u</th>
        </tr>
        <tr>
          <th>antimicrobial_name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>amikacin</th>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.800000</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>amoxycillin</th>
          <td>2.0</td>
          <td>2.0</td>
          <td>NaN</td>
          <td>2.0</td>
          <td>7.0</td>
          <td>NaN</td>
          <td>0.500000</td>
          <td>0.833333</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>amp c markers</th>
          <td>4.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>4.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.250000</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>augmentin</th>
          <td>5.0</td>
          <td>2.0</td>
          <td>NaN</td>
          <td>5.0</td>
          <td>7.0</td>
          <td>NaN</td>
          <td>0.200000</td>
          <td>1.000000</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>aztreonam</th>
          <td>3.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>3.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.666667</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>cefotaxime</th>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.200000</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>cefoxitin</th>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.400000</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>cefpodoxime</th>
          <td>5.0</td>
          <td>2.0</td>
          <td>NaN</td>
          <td>5.0</td>
          <td>5.0</td>
          <td>NaN</td>
          <td>0.400000</td>
          <td>0.833333</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>ceftazidime</th>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.600000</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>cefuroxime</th>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>5.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.000000</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 262-263

Lets plot it now!

.. GENERATED FROM PYTHON SOURCE LINES 264-332

.. code-block:: default
   :lineno-start: 265


    # ---------------------------------------------------------------
    # Plot
    # ---------------------------------------------------------------
    # .. note: In order to sort the scores we need to compute metrics
    #          that combine the different subcategories (e.g. gram-negative
    #          and gram-positive). Two possible options are: (i) use the
    #          gmean or (ii) the width.

    # Libraries
    from pyamr.utils.plot import scalar_colormap

    # Measures
    scores['width'] = np.abs(scores['ASAI_SCORE'].sum(axis=1))

    # Variables to plot.
    x = scores.index.values
    y_n = scores['ASAI_SCORE']['n'].values
    y_p = scores['ASAI_SCORE']['p'].values
    y_u = scores['ASAI_SCORE']['u'].values

    # Constants
    colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
    colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)
    colormap_u = scalar_colormap(y_u, cmap='Greens', vmin=-0.1, vmax=1.1)

    # ----------
    # Example
    # ----------
    # This example shows an stacked figure using more than two categories.
    # For instance, it uses gram-positive, gram-negative and gram-unknown.
    # All the indexes go within the range [0,1].
    # Create the figure
    f, axes = plt.subplots(1, 3, figsize=(7, 9))

    # Plot each category
    sns.barplot(x=y_p, y=x, palette=colormap_p, ax=axes[0], orient='h',
                saturation=0.5, label='Gram-positive')
    sns.barplot(x=y_n, y=x, palette=colormap_n, ax=axes[1], orient='h',
                saturation=0.5, label='Gram-negative')
    sns.barplot(x=y_u, y=x, palette=colormap_u, ax=axes[2], orient='h',
                saturation=0.5, label='Gram-unknown')

    # Configure
    sns.despine(bottom=True)

    # Format figure
    plt.subplots_adjust(wspace=0.0, hspace=0.0)

    # Remove yticks
    axes[1].set_yticks([])
    axes[2].set_yticks([])

    # Set title
    axes[0].set_title('Gram-positive')
    axes[1].set_title('Gram-negative')
    axes[2].set_title('Gram-unknown')

    # Set x-axis
    axes[0].set_xlim([0, 1.1])
    axes[1].set_xlim([0, 1.1])
    axes[2].set_xlim([0, 1.1])

    # Adjust
    plt.tight_layout()






.. image-sg:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_002.png
   :alt: Gram-positive, Gram-negative, Gram-unknown
   :srcset: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 333-359

Computing SART
--------------

The single antimicrobial resistance trend or ``SART`` measures the ratio
of change per time unit (e.g. monthly or yearly). To compute this metric,
it is necessary to generate a resistance time series from the susceptibility
test data. This is often achieved by computing the SARI on consecutive or
overlapping partitions of the data. Then, the trend can be extracted using
for example a linear model where the slope, which is represented by a value
within the range [-1, 1], indicates the ratio of change.

For more information see: :py:mod:`pyamr.core.sart.SART`

For more examples see:

  - :ref:`sphx_glr__examples_tutorial_indexes_plot_core_d_sart.py`
  - :ref:`sphx_glr__examples_indexes_plot_sart_a_basic.py`

.. note:: Be cautious when computing the ``SART`` index using a small dataset
          (e.g. a low number of susceptibility tests records) since it is very
          likely that the statistics produced (e.g. kurtosis or skewness) will
          be ill defined. Also remember to check stationarity if using ARIMA.

Since it is necessary to have a decent amount of records to be
able to compute the trends accurately, lets see which tuples
have more number of samples.

.. GENERATED FROM PYTHON SOURCE LINES 360-385

.. code-block:: default
   :lineno-start: 361


    # -------------------------------------------
    # Show top combinations
    # -------------------------------------------
    from pyamr.core.sari import SARI

    # Create SARI instance
    sar = SARI(groupby=['specimen_code',
                        'microorganism_code',
                        'antimicrobial_code',
                        'sensitivity'])

    # Compute SARI overall
    sari_overall = sar.compute(data,
         return_frequencies=True)

    # Compute top tuples
    top = sari_overall \
        .sort_values(by='freq', ascending=False) \
        .head(10)

    # Show
    print("\nTop by Frequency:")
    print(top)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Top by Frequency:
                                                         intermediate  resistant  sensitive    freq      sari
    specimen_code microorganism_code antimicrobial_code                                                      
    URICUL        ECOL               A_CEFPODOX                   0.0      595.0     8582.0  9177.0  0.064836
                                     ANIT                         0.0      347.0     8826.0  9173.0  0.037828
                                     ACELX                        0.0      803.0     8370.0  9173.0  0.087540
                                     ATRI                         0.0     3231.0     5941.0  9172.0  0.352268
                                     ACIP                         0.0     1259.0     7913.0  9172.0  0.137266
                                     AAUG                         0.0      602.0     8561.0  9163.0  0.065699
    WOUCUL        SAUR               AFUS                         0.0      613.0     3631.0  4244.0  0.144439
                                     APEN                         0.0     3677.0      566.0  4243.0  0.866604
                                     AERY                         0.0     1186.0     3056.0  4242.0  0.279585
                                     AMET                         0.0      869.0     3372.0  4241.0  0.204905




.. GENERATED FROM PYTHON SOURCE LINES 386-387

Let's choose the tuples were are interested in.

.. GENERATED FROM PYTHON SOURCE LINES 387-410

.. code-block:: default
   :lineno-start: 388


    # -------------------------------------------
    # Filter data
    # -------------------------------------------
    # Define spec, orgs, abxs of interest
    spec = ['URICUL']
    orgs = ['ECOL']
    abxs = ['ACELX', 'ACIP', 'AAMPC', 'ATRI', 'AAUG',
            'AMER', 'ANIT', 'AAMI', 'ACTX', 'ATAZ',
            'AGEN', 'AERT', 'ACAZ', 'AMEC', 'ACXT']

    # Create auxiliary DataFrame
    aux = data.copy(deep=True) \

    # Filter
    idxs_spec = data.specimen_code.isin(spec)
    idxs_orgs = data.microorganism_code.isin(orgs)
    idxs_abxs = data.antimicrobial_code.isin(abxs)

    # Filter
    aux = aux[idxs_spec & idxs_orgs & idxs_abxs]









.. GENERATED FROM PYTHON SOURCE LINES 411-412

Now, lets compute the resistance trend.

.. GENERATED FROM PYTHON SOURCE LINES 413-438

.. code-block:: default
   :lineno-start: 414


    # Libraries
    import warnings

    # Import specific libraries
    from pyamr.core.sart import SART

    # Variables
    shift, period = '10D', '180D'

    # Create instance
    sar = SART(column_specimen='specimen_code',
               column_microorganism='microorganism_code',
               column_antimicrobial='antimicrobial_code',
               column_date='date_received',
               column_outcome='sensitivity',
               column_resistance='sari')

    with warnings.catch_warnings():
        warnings.simplefilter('ignore')

        # Compute resistance trends
        table, objs = sar.compute(aux, shift=shift,
            period=period, return_objects=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     1/15. Computing... ('URICUL', 'ECOL', 'AAMI')
     2/15. Computing... ('URICUL', 'ECOL', 'AAMPC')
     3/15. Computing... ('URICUL', 'ECOL', 'AAUG')
     4/15. Computing... ('URICUL', 'ECOL', 'ACAZ')
     5/15. Computing... ('URICUL', 'ECOL', 'ACELX')
     6/15. Computing... ('URICUL', 'ECOL', 'ACIP')
     7/15. Computing... ('URICUL', 'ECOL', 'ACTX')
     8/15. Computing... ('URICUL', 'ECOL', 'ACXT')
     9/15. Computing... ('URICUL', 'ECOL', 'AERT')
    10/15. Computing... ('URICUL', 'ECOL', 'AGEN')
    11/15. Computing... ('URICUL', 'ECOL', 'AMEC')
    12/15. Computing... ('URICUL', 'ECOL', 'AMER')
    13/15. Computing... ('URICUL', 'ECOL', 'ANIT')
    14/15. Computing... ('URICUL', 'ECOL', 'ATAZ')
    15/15. Computing... ('URICUL', 'ECOL', 'ATRI')




.. GENERATED FROM PYTHON SOURCE LINES 439-440

Lets see the results(note it is transposed!)

.. GENERATED FROM PYTHON SOURCE LINES 441-453

.. code-block:: default
   :lineno-start: 442


    # Configure pandas
    pd.set_option(
        'display.max_colwidth', 20,
        'display.width', 1000
    )

    # Show
    #print("Results:")
    #print(table.T)
    table.head(4).T






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th>specimen_code</th>
          <th colspan="4" halign="left">URICUL</th>
        </tr>
        <tr>
          <th>microorganism_code</th>
          <th colspan="4" halign="left">ECOL</th>
        </tr>
        <tr>
          <th>antimicrobial_code</th>
          <th>AAMI</th>
          <th>AAMPC</th>
          <th>AAUG</th>
          <th>ACAZ</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>wls-rsquared</th>
          <td>0.557029</td>
          <td>0.12798</td>
          <td>0.906452</td>
          <td>0.004545</td>
        </tr>
        <tr>
          <th>wls-rsquared_adj</th>
          <td>0.544373</td>
          <td>0.09791</td>
          <td>0.903779</td>
          <td>-0.023896</td>
        </tr>
        <tr>
          <th>wls-fvalue</th>
          <td>44.012024</td>
          <td>4.256121</td>
          <td>339.140633</td>
          <td>0.159818</td>
        </tr>
        <tr>
          <th>wls-fprob</th>
          <td>0.0</td>
          <td>0.048164</td>
          <td>0.0</td>
          <td>0.691754</td>
        </tr>
        <tr>
          <th>wls-aic</th>
          <td>inf</td>
          <td>inf</td>
          <td>inf</td>
          <td>inf</td>
        </tr>
        <tr>
          <th>wls-bic</th>
          <td>inf</td>
          <td>inf</td>
          <td>inf</td>
          <td>inf</td>
        </tr>
        <tr>
          <th>wls-llf</th>
          <td>-inf</td>
          <td>-inf</td>
          <td>-inf</td>
          <td>-inf</td>
        </tr>
        <tr>
          <th>wls-mse_model</th>
          <td>0.745856</td>
          <td>4.978205</td>
          <td>33.299393</td>
          <td>0.2007</td>
        </tr>
        <tr>
          <th>wls-mse_resid</th>
          <td>0.016947</td>
          <td>1.169658</td>
          <td>0.098188</td>
          <td>1.255805</td>
        </tr>
        <tr>
          <th>wls-mse_total</th>
          <td>0.037194</td>
          <td>1.296609</td>
          <td>1.020443</td>
          <td>1.226496</td>
        </tr>
        <tr>
          <th>wls-const_coef</th>
          <td>0.031283</td>
          <td>68.761679</td>
          <td>1.544961</td>
          <td>65.712841</td>
        </tr>
        <tr>
          <th>wls-const_std</th>
          <td>0.093007</td>
          <td>0.698295</td>
          <td>0.234858</td>
          <td>0.80353</td>
        </tr>
        <tr>
          <th>wls-const_tvalue</th>
          <td>0.336351</td>
          <td>98.470788</td>
          <td>6.578289</td>
          <td>81.780194</td>
        </tr>
        <tr>
          <th>wls-const_tprob</th>
          <td>0.738614</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>wls-const_cil</th>
          <td>-0.157532</td>
          <td>67.333505</td>
          <td>1.068175</td>
          <td>64.081588</td>
        </tr>
        <tr>
          <th>wls-const_ciu</th>
          <td>0.220098</td>
          <td>70.189854</td>
          <td>2.021747</td>
          <td>67.344094</td>
        </tr>
        <tr>
          <th>wls-x1_coef</th>
          <td>0.024239</td>
          <td>0.072052</td>
          <td>0.167941</td>
          <td>-0.012606</td>
        </tr>
        <tr>
          <th>wls-x1_std</th>
          <td>0.003654</td>
          <td>0.034925</td>
          <td>0.009119</td>
          <td>0.031532</td>
        </tr>
        <tr>
          <th>wls-x1_tvalue</th>
          <td>6.634156</td>
          <td>2.063037</td>
          <td>18.415771</td>
          <td>-0.399772</td>
        </tr>
        <tr>
          <th>wls-x1_tprob</th>
          <td>0.0</td>
          <td>0.048164</td>
          <td>0.0</td>
          <td>0.691754</td>
        </tr>
        <tr>
          <th>wls-x1_cil</th>
          <td>0.016822</td>
          <td>0.000622</td>
          <td>0.149427</td>
          <td>-0.076619</td>
        </tr>
        <tr>
          <th>wls-x1_ciu</th>
          <td>0.031656</td>
          <td>0.143482</td>
          <td>0.186454</td>
          <td>0.051408</td>
        </tr>
        <tr>
          <th>wls-s_dw</th>
          <td>0.741</td>
          <td>1.091</td>
          <td>0.176</td>
          <td>0.445</td>
        </tr>
        <tr>
          <th>wls-s_jb_value</th>
          <td>0.509</td>
          <td>0.638</td>
          <td>2.336</td>
          <td>0.239</td>
        </tr>
        <tr>
          <th>wls-s_jb_prob</th>
          <td>0.775</td>
          <td>0.727</td>
          <td>0.311</td>
          <td>0.887</td>
        </tr>
        <tr>
          <th>wls-s_skew</th>
          <td>0.21</td>
          <td>-0.17</td>
          <td>0.316</td>
          <td>-0.051</td>
        </tr>
        <tr>
          <th>wls-s_kurtosis</th>
          <td>2.608</td>
          <td>2.385</td>
          <td>1.944</td>
          <td>2.62</td>
        </tr>
        <tr>
          <th>wls-s_omnibus_value</th>
          <td>0.39</td>
          <td>0.518</td>
          <td>5.037</td>
          <td>0.05</td>
        </tr>
        <tr>
          <th>wls-s_omnibus_prob</th>
          <td>0.823</td>
          <td>0.772</td>
          <td>0.081</td>
          <td>0.975</td>
        </tr>
        <tr>
          <th>wls-m_dw</th>
          <td>0.736178</td>
          <td>0.537678</td>
          <td>0.043909</td>
          <td>0.188735</td>
        </tr>
        <tr>
          <th>wls-m_jb_value</th>
          <td>26.465944</td>
          <td>457.685847</td>
          <td>27.729537</td>
          <td>10.593247</td>
        </tr>
        <tr>
          <th>wls-m_jb_prob</th>
          <td>0.000002</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.005008</td>
        </tr>
        <tr>
          <th>wls-m_skew</th>
          <td>1.61218</td>
          <td>4.04353</td>
          <td>1.89606</td>
          <td>1.267125</td>
        </tr>
        <tr>
          <th>wls-m_kurtosis</th>
          <td>5.602039</td>
          <td>19.998144</td>
          <td>4.899094</td>
          <td>3.66998</td>
        </tr>
        <tr>
          <th>wls-m_nm_value</th>
          <td>19.984589</td>
          <td>59.422218</td>
          <td>21.39435</td>
          <td>10.974889</td>
        </tr>
        <tr>
          <th>wls-m_nm_prob</th>
          <td>0.000046</td>
          <td>0.0</td>
          <td>0.000023</td>
          <td>0.004138</td>
        </tr>
        <tr>
          <th>wls-m_ks_value</th>
          <td>0.405236</td>
          <td>0.149246</td>
          <td>0.366502</td>
          <td>0.365003</td>
        </tr>
        <tr>
          <th>wls-m_ks_prob</th>
          <td>0.000005</td>
          <td>0.451309</td>
          <td>0.000058</td>
          <td>0.000063</td>
        </tr>
        <tr>
          <th>wls-m_shp_value</th>
          <td>0.845794</td>
          <td>0.486878</td>
          <td>0.565564</td>
          <td>0.844264</td>
        </tr>
        <tr>
          <th>wls-m_shp_prob</th>
          <td>0.000126</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.000116</td>
        </tr>
        <tr>
          <th>wls-m_ad_value</th>
          <td>1.637801</td>
          <td>5.197208</td>
          <td>7.445695</td>
          <td>2.187059</td>
        </tr>
        <tr>
          <th>wls-m_ad_nnorm</th>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
        </tr>
        <tr>
          <th>wls-pearson</th>
          <td>0.548657</td>
          <td>-0.482852</td>
          <td>-0.197034</td>
          <td>-0.816642</td>
        </tr>
        <tr>
          <th>wls-missing</th>
          <td>raise</td>
          <td>raise</td>
          <td>raise</td>
          <td>raise</td>
        </tr>
        <tr>
          <th>wls-exog</th>
          <td>[[1.0, 0.0], [1....</td>
          <td>[[1.0, 0.0], [1....</td>
          <td>[[1.0, 0.0], [1....</td>
          <td>[[1.0, 0.0], [1....</td>
        </tr>
        <tr>
          <th>wls-endog</th>
          <td>[0.0, 0.0, 0.0, ...</td>
          <td>[100.0, 77.77777...</td>
          <td>[13.513513513513...</td>
          <td>[75.0, 73.529411...</td>
        </tr>
        <tr>
          <th>wls-trend</th>
          <td>c</td>
          <td>c</td>
          <td>c</td>
          <td>c</td>
        </tr>
        <tr>
          <th>wls-weights</th>
          <td>[0.0, 0.00281585...</td>
          <td>[0.0, 0.03706907...</td>
          <td>[0.0, 0.00124501...</td>
          <td>[0.0, 0.00278805...</td>
        </tr>
        <tr>
          <th>wls-W</th>
          <td>&lt;pyamr.metrics.w...</td>
          <td>&lt;pyamr.metrics.w...</td>
          <td>&lt;pyamr.metrics.w...</td>
          <td>&lt;pyamr.metrics.w...</td>
        </tr>
        <tr>
          <th>wls-model</th>
          <td>&lt;statsmodels.reg...</td>
          <td>&lt;statsmodels.reg...</td>
          <td>&lt;statsmodels.reg...</td>
          <td>&lt;statsmodels.reg...</td>
        </tr>
        <tr>
          <th>wls-id</th>
          <td>WLS(c,Sig(N, N))</td>
          <td>WLS(c,Sig(N, N))</td>
          <td>WLS(c,Sig(N, N))</td>
          <td>WLS(c,Sig(N, N))</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 454-455

Lets visualise the first entry

.. GENERATED FROM PYTHON SOURCE LINES 456-505

.. code-block:: default
   :lineno-start: 457


    # Display
    # This example shows how to make predictions using the wrapper and how
    # to plot the result in data. In addition, it compares the intervals
    # provided by get_prediction (confidence intervals) and the intervals
    # provided by wls_prediction_std (prediction intervals).

    # Variables
    name, obj = objs[2] # AAUG

    # Series
    series = obj.as_series()

    # Variables.
    start, end = None, 50

    # Get x and y
    x = series['wls-exog'][:,1]
    y = series['wls-endog']

    # Compute predictions (exogenous?). It returns a 2D array
    # where the rows contain the time (t), the mean, the lower
    # and upper confidence (or prediction?) interval.
    preds = obj.get_prediction(start=start, end=end)

    # Create figure
    fig, ax = plt.subplots(1, 1, figsize=(11, 5))

    # Plotting confidence intervals
    # -----------------------------
    # Plot truth values.
    ax.plot(x, y, color='#A6CEE3', alpha=0.5, marker='o',
            markeredgecolor='k', markeredgewidth=0.5,
            markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    ax.plot(preds[0, :], preds[1, :], color='#FF0000', alpha=1.00,
            linewidth=2.0, label=obj._identifier(short=True))

    # Plot the confidence intervals.
    ax.fill_between(preds[0, :], preds[2, :],
                    preds[3, :],
                    color='r',
                    alpha=0.1)

    # Legend
    plt.legend()
    plt.title(name)




.. image-sg:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_003.png
   :alt: ('URICUL', 'ECOL', 'AAUG')
   :srcset: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, "('URICUL', 'ECOL', 'AAUG')")



.. GENERATED FROM PYTHON SOURCE LINES 506-507

Lets see the summary

.. GENERATED FROM PYTHON SOURCE LINES 507-512

.. code-block:: default
   :lineno-start: 508


    # Summary
    print("Name: %s\n" % str(name))
    print(obj.as_summary())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Name: ('URICUL', 'ECOL', 'AAUG')

                                WLS Regression Results                            
    ==============================================================================
    Dep. Variable:                      y   R-squared:                       0.906
    Model:                            WLS   Adj. R-squared:                  0.904
    Method:                 Least Squares   F-statistic:                     339.1
    Date:                Thu, 15 Jun 2023   Prob (F-statistic):           1.38e-19
    Time:                        18:15:41   Log-Likelihood:                   -inf
    No. Observations:                  37   AIC:                               inf
    Df Residuals:                      35   BIC:                               inf
    Df Model:                           1                                         
    Covariance Type:            nonrobust                                         
    ==============================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const          1.5450      0.235      6.578      0.000       1.068       2.022
    x1             0.1679      0.009     18.416      0.000       0.149       0.186
    ==============================================================================
    Omnibus:                        5.037   Durbin-Watson:                   0.176
    Prob(Omnibus):                  0.081   Jarque-Bera (JB):                2.336
    Skew:                           0.316   Prob(JB):                        0.311
    Kurtosis:                       1.944   Cond. No.                         91.7
    Normal (N):                    21.394   Prob(N):                         0.000
    ==============================================================================




.. GENERATED FROM PYTHON SOURCE LINES 513-514

Lets display the information as a table graph for all tuples

.. GENERATED FROM PYTHON SOURCE LINES 515-642

.. code-block:: default
   :lineno-start: 516


    # Libraries
    from pyamr.graphics.table_graph import _DEFAULT_CONFIGURATION
    from pyamr.graphics.table_graph import vlinebgplot

    # Configuration for display
    info = _DEFAULT_CONFIGURATION

    # Lets define one as an example.
    info['freq'] = {
        'cmap': 'Blues',
        'title': 'Freq',
        'xticks': [0, 8000],
        'kwargs': {
            's': 80,
            'vmin': 0
        }
    }

    # .. note: It is important to ensure that the column names
    #          match with the keys of the previously loaded
    #          info configuration so that it is used.

    # Rename columns
    rename = {
        'wls-x1_coef': 'sart_m',
        'wls-const_coef': 'offset',
        'wls-rsquared': 'r2',
        'wls-rsquared_adj': 'r2_adj',
        'wls-m_skew': 'skew',
        'wls-m_kurtosis': 'kurtosis',
        'wls-m_jb_prob': 'jb',
        'wls-m_dw': 'dw',
        'wls-const_tprob': 'ptm',
        'wls-x1_tprob': 'ptn',
        'wls-pearson': 'pearson',
        'freq': 'freq',
    }


    # ----------------
    # Combine with SARI

    # Format combined DataFrame
    comb = table.join(sari_overall)
    comb.index = comb.index.map('_'.join)
    comb = comb.reset_index()
    comb = comb.rename(columns=rename)

    # Add new columns
    comb['sart_y'] = comb.sart_m * 12   # Yearly trend
    comb['sari_pct'] = comb.sari * 100  # SARI percent

    # Sort by trend
    comb = comb.sort_values(by='sart_y', ascending=False)

    # Select only numeric columns
    # data = comb.select_dtypes(include=np.number)
    data = comb[[
        'index',
        'sart_m',
        #'sart_y',
        'sari_pct',
        'r2',
        #'r2_adj',
        'skew',
        'kurtosis',
        'jb',
        'dw',
        'ptm',
        #'ptn',
        'pearson',
        'freq'
    ]]

    # Show DataFrame
    #print("\nResults:")
    #print(data)

    # Create pair grid
    g = sns.PairGrid(data, x_vars=data.columns[1:],
        y_vars=["index"], height=3, aspect=.45)

    # Set common features
    g.set(xlabel='', ylabel='')

    # Plot strips and format axes (skipping index)
    for ax, c in zip(g.axes.flat, data.columns[1:]):

        # Get information
        d = info[c] if c in info else {}

        # .. note: We need to use scatter plot if we want to
        #          assign colors to the markers according to
        #          their value.

        # Using scatter plot
        sns.scatterplot(data=data, x=c, y='index', s=100,
                        ax=ax, linewidth=0.75, edgecolor='gray',
                        c=data[c], cmap=d.get('cmap', None),
                        norm=d.get('norm', None))

        # Plot vertical lines
        for e in d.get('vline', []):
            vlinebgplot(ax, top=data.shape[0], **e)

        # Configure axes
        ax.set(title=d.get('title', c),
               xlim=d.get('xlim', None),
               xticks=d.get('xticks', []),
               xlabel='', ylabel='')
        ax.tick_params(axis='y', which='both', length=0)
        ax.xaxis.grid(False)
        ax.yaxis.grid(visible=True, which='major',
                      color='gray', linestyle='-', linewidth=0.35)

    # Despine
    sns.despine(left=True, bottom=True)

    # Adjust layout
    plt.tight_layout()
    plt.show()

    #%
    # Lets see the data plotted
    data.round(decimals=3)




.. image-sg:: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_004.png
   :alt: SART (m), SARI (%), R2, Skew, Kurtosis, Prob(JB), DW, P>|t| m, Pearson, Freq
   :srcset: /_examples/tutorial/guide/images/sphx_glr_plot_step_01_004.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>index</th>
          <th>sart_m</th>
          <th>sari_pct</th>
          <th>r2</th>
          <th>skew</th>
          <th>kurtosis</th>
          <th>jb</th>
          <th>dw</th>
          <th>ptm</th>
          <th>pearson</th>
          <th>freq</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>7</th>
          <td>URICUL_ECOL_ACXT</td>
          <td>0.385</td>
          <td>27.961</td>
          <td>0.872</td>
          <td>-0.902</td>
          <td>4.451</td>
          <td>0.016</td>
          <td>0.322</td>
          <td>0.000</td>
          <td>0.801</td>
          <td>726.0</td>
        </tr>
        <tr>
          <th>10</th>
          <td>URICUL_ECOL_AMEC</td>
          <td>0.364</td>
          <td>6.923</td>
          <td>0.925</td>
          <td>0.292</td>
          <td>3.163</td>
          <td>0.753</td>
          <td>0.247</td>
          <td>0.000</td>
          <td>0.905</td>
          <td>390.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>URICUL_ECOL_AAUG</td>
          <td>0.168</td>
          <td>6.570</td>
          <td>0.906</td>
          <td>1.896</td>
          <td>4.899</td>
          <td>0.000</td>
          <td>0.044</td>
          <td>0.000</td>
          <td>-0.197</td>
          <td>9163.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>URICUL_ECOL_AAMPC</td>
          <td>0.072</td>
          <td>70.079</td>
          <td>0.128</td>
          <td>4.044</td>
          <td>19.998</td>
          <td>0.000</td>
          <td>0.538</td>
          <td>0.000</td>
          <td>-0.483</td>
          <td>254.0</td>
        </tr>
        <tr>
          <th>9</th>
          <td>URICUL_ECOL_AGEN</td>
          <td>0.042</td>
          <td>35.586</td>
          <td>0.028</td>
          <td>1.569</td>
          <td>4.015</td>
          <td>0.000</td>
          <td>0.042</td>
          <td>0.000</td>
          <td>-0.726</td>
          <td>725.0</td>
        </tr>
        <tr>
          <th>0</th>
          <td>URICUL_ECOL_AAMI</td>
          <td>0.024</td>
          <td>0.693</td>
          <td>0.557</td>
          <td>1.612</td>
          <td>5.602</td>
          <td>0.000</td>
          <td>0.736</td>
          <td>0.739</td>
          <td>0.549</td>
          <td>722.0</td>
        </tr>
        <tr>
          <th>11</th>
          <td>URICUL_ECOL_AMER</td>
          <td>0.020</td>
          <td>0.414</td>
          <td>0.648</td>
          <td>0.021</td>
          <td>2.439</td>
          <td>0.784</td>
          <td>0.411</td>
          <td>0.089</td>
          <td>0.902</td>
          <td>724.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>URICUL_ECOL_ACAZ</td>
          <td>-0.013</td>
          <td>65.522</td>
          <td>0.005</td>
          <td>1.267</td>
          <td>3.670</td>
          <td>0.005</td>
          <td>0.189</td>
          <td>0.000</td>
          <td>-0.817</td>
          <td>728.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>URICUL_ECOL_ACELX</td>
          <td>-0.015</td>
          <td>8.754</td>
          <td>0.112</td>
          <td>2.012</td>
          <td>5.358</td>
          <td>0.000</td>
          <td>0.052</td>
          <td>0.000</td>
          <td>-0.664</td>
          <td>9173.0</td>
        </tr>
        <tr>
          <th>6</th>
          <td>URICUL_ECOL_ACTX</td>
          <td>-0.032</td>
          <td>66.803</td>
          <td>0.030</td>
          <td>2.046</td>
          <td>7.029</td>
          <td>0.000</td>
          <td>0.145</td>
          <td>0.000</td>
          <td>-0.746</td>
          <td>732.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>URICUL_ECOL_ACIP</td>
          <td>-0.075</td>
          <td>13.727</td>
          <td>0.669</td>
          <td>2.075</td>
          <td>5.565</td>
          <td>0.000</td>
          <td>0.071</td>
          <td>0.000</td>
          <td>-0.710</td>
          <td>9172.0</td>
        </tr>
        <tr>
          <th>14</th>
          <td>URICUL_ECOL_ATRI</td>
          <td>-0.093</td>
          <td>35.227</td>
          <td>0.600</td>
          <td>1.751</td>
          <td>4.933</td>
          <td>0.000</td>
          <td>0.089</td>
          <td>0.000</td>
          <td>-0.893</td>
          <td>9172.0</td>
        </tr>
        <tr>
          <th>12</th>
          <td>URICUL_ECOL_ANIT</td>
          <td>-0.094</td>
          <td>3.783</td>
          <td>0.907</td>
          <td>0.369</td>
          <td>4.881</td>
          <td>0.043</td>
          <td>1.134</td>
          <td>0.000</td>
          <td>-0.893</td>
          <td>9173.0</td>
        </tr>
        <tr>
          <th>13</th>
          <td>URICUL_ECOL_ATAZ</td>
          <td>-0.190</td>
          <td>27.885</td>
          <td>0.413</td>
          <td>0.307</td>
          <td>2.277</td>
          <td>0.500</td>
          <td>0.186</td>
          <td>0.000</td>
          <td>-0.911</td>
          <td>728.0</td>
        </tr>
        <tr>
          <th>8</th>
          <td>URICUL_ECOL_AERT</td>
          <td>-0.472</td>
          <td>4.569</td>
          <td>0.798</td>
          <td>-1.436</td>
          <td>3.976</td>
          <td>0.001</td>
          <td>0.078</td>
          <td>0.000</td>
          <td>-0.483</td>
          <td>197.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 643-647

Computing ACSI
--------------

.. warning:: Pending...

.. GENERATED FROM PYTHON SOURCE LINES 649-653

Computing DRI
--------------

.. warning:: Pending...


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.004 seconds)


.. _sphx_glr_download__examples_tutorial_guide_plot_step_01.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_step_01.py <plot_step_01.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_step_01.ipynb <plot_step_01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

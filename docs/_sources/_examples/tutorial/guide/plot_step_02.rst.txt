
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\tutorial\guide\plot_step_02.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_tutorial_guide_plot_step_02.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_tutorial_guide_plot_step_02.py:


Step 02 - Temporal evolution
============================

.. GENERATED FROM PYTHON SOURCE LINES 9-13

Loading data
------------

A small dataset will be used for this example.

.. GENERATED FROM PYTHON SOURCE LINES 14-48

.. code-block:: default
   :lineno-start: 15


    # Libraries
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import from pyAMR
    from pyamr.datasets.load import make_susceptibility

    # -------------------------------------------
    # Load data
    # -------------------------------------------
    # Load data
    data = make_susceptibility()
    data = data.drop_duplicates()

    # Convert date to datetime
    data.date_received = pd.to_datetime(data.date_received)

    # Filter (speeds up the execution)
    idxs_spec = data.specimen_code.isin(['URICUL'])
    idxs_abxs = data.antimicrobial_name.isin(['augmentin'])

    # Filter
    data = data[idxs_spec & idxs_abxs]

    # Show
    print("\nData:")
    print(data)
    print("\nColumns:")
    print(data.dtypes)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Data:
           date_received  date_outcome  patient_id laboratory_number specimen_code  specimen_name  ... antimicrobial_code antimicrobial_name sensitivity_method sensitivity mic  reported
    113       2009-01-03           NaN       20099           X428892        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    119       2009-01-03           NaN       20100           X429141        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    164       2009-01-03           NaN       22571           X429323        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    268       2009-01-03           NaN       22576           X428467        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    293       2009-01-03           NaN       24017           X429325        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    ...              ...           ...         ...               ...           ...            ...  ...                ...                ...                ...         ...  ..       ...
    318940    2009-12-31           NaN       20088          H2011867        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    318946    2009-12-31           NaN       20089          H2012653        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    318983    2009-12-31           NaN       22565          F1741389        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    319048    2009-12-31           NaN       24013          H2012150        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN
    319070    2009-12-31           NaN       24015          H2012340        URICUL            NaN  ...               AAUG          augmentin                NaN   sensitive NaN       NaN

    [15269 rows x 15 columns]

    Columns:
    date_received           datetime64[ns]
    date_outcome                   float64
    patient_id                       int64
    laboratory_number               object
    specimen_code                   object
    specimen_name                  float64
    specimen_description            object
    microorganism_code              object
    microorganism_name              object
    antimicrobial_code              object
    antimicrobial_name              object
    sensitivity_method             float64
    sensitivity                     object
    mic                            float64
    reported                       float64
    dtype: object




.. GENERATED FROM PYTHON SOURCE LINES 49-80

Computing SARI timeseries
-------------------------

.. |1D30| replace:: 1D\ :sub:`30`
.. |1M1| replace:: 1M\ :sub:`1`
.. |3M1| replace:: 3M\ :sub:`1`
.. |1M30| replace:: 1M\ :sub:`30`
.. |7D4| replace:: 7D\ :sub:`4`
.. |1M12| replace:: 1M\ :sub:`12`
.. |1M6| replace:: 1M\ :sub:`6`
.. |1M3| replace:: 1M\ :sub:`3`
.. |12M1| replace:: 12M\ :sub:`1`
.. |SP| replace:: SHIFT\ :sub:`period`

In order to study the temporal evolution of AMR, it is necessary to generate
a resistance time series from the susceptibility test data. This is often
achieved by calculating the resistance index  (e.g. ``SARI``) on consecutive
partitions of the data. Note that each partition contains the susceptibility
tests that will be used to compute the resistance index.

The notation to define the time series generation methodology (|SP|). For instance,
|1M1| defines a time series with monthly resistance indexes and |7D4| defines a time series
with weekly resistance indexes (7D) calculated using the microbiology records available for
the previous four weeks (4x7D).

For more information see: :py:mod:`pyamr.core.sari.SARI`

For more examples see:

  - :ref:`sphx_glr__examples_indexes_plot_sari_temporal.py`.


.. GENERATED FROM PYTHON SOURCE LINES 81-107

.. code-block:: default
   :lineno-start: 82


    # -----------------------------------------
    # Compute  sari (temporal)
    # -----------------------------------------
    from pyamr.core.sari import SARI

    # Create SARI instance
    sar = SARI(groupby=['specimen_code',
                        'microorganism_name',
                        'antimicrobial_name',
                        'sensitivity'])

    # Create constants
    shift, period = '1M', 1

    # Compute sari timeseries
    iti = sar.compute(data, shift=shift,
         period=period, cdate='date_received')

    # Reset index
    iti = iti.reset_index()

    # Show
    print("\nSARI (temporal):")
    print(iti)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SARI (temporal):
    sensitivity specimen_code                       microorganism_name antimicrobial_name date_received  resistant  sensitive  freq  sari
    0                  URICUL                            acinetobacter          augmentin    2009-03-31        0.0        1.0   1.0   0.0
    1                  URICUL                            acinetobacter          augmentin    2009-05-31        0.0        1.0   1.0   0.0
    2                  URICUL                            acinetobacter          augmentin    2009-08-31        0.0        1.0   1.0   0.0
    3                  URICUL                  acinetobacter baumannii          augmentin    2009-02-28        1.0        0.0   1.0   1.0
    4                  URICUL                  acinetobacter baumannii          augmentin    2009-04-30        1.0        1.0   2.0   0.5
    ..                    ...                                      ...                ...           ...        ...        ...   ...   ...
    162                URICUL    streptococcus beta-haemolytic group b          augmentin    2009-10-31        0.0       48.0  48.0   0.0
    163                URICUL    streptococcus beta-haemolytic group b          augmentin    2009-11-30        0.0       53.0  53.0   0.0
    164                URICUL    streptococcus beta-haemolytic group b          augmentin    2009-12-31        0.0       36.0  36.0   0.0
    165                URICUL  streptococcus beta-haemolytic group c/g          augmentin    2009-03-31        0.0        2.0   2.0   0.0
    166                URICUL  streptococcus beta-haemolytic group c/g          augmentin    2009-04-30        0.0        1.0   1.0   0.0

    [167 rows x 8 columns]




.. GENERATED FROM PYTHON SOURCE LINES 108-110

Let's plot the evolution of a single combination ...


.. GENERATED FROM PYTHON SOURCE LINES 111-160

.. code-block:: default
   :lineno-start: 112


    # --------------
    # Filter
    # --------------
    # Filter
    idxs_spec = iti.specimen_code.isin(['URICUL'])
    idxs_orgs = iti.microorganism_name.isin(['escherichia coli'])
    idxs_abxs = iti.antimicrobial_name.isin(['augmentin'])

    # Filter
    aux = iti[idxs_spec & idxs_orgs & idxs_abxs]

    # --------------
    # Plot
    # --------------
    # Create figure
    fig, axes = plt.subplots(2, 1, sharex=True,
         gridspec_kw={'height_ratios': [2, 1]})
    axes = axes.flatten()

    # Plot line
    sns.lineplot(x=aux.date_received, y=aux.sari,
        palette="tab10", linewidth=0.75, linestyle='--',
        marker='o', markersize=3, markeredgecolor='k',
        markeredgewidth=0.5, markerfacecolor=None,
        alpha=0.5, ax=axes[0])

    # Compute widths
    widths = [d.days for d in np.diff(aux.date_received.tolist())]

    # Plot bars
    axes[1].bar(x=aux.date_received, height=aux.freq,
        width=.8*widths[0], linewidth=0.75, alpha=0.5)

    # Configure
    axes[0].set(ylim=[-0.1, 1.1],
        title='Time-series $%s_{%s}$' % (shift, period))

    # Despine
    sns.despine(bottom=True)

    # Tight layout
    plt.tight_layout()

    # Show
    print("\nTemporal (ITI):")
    print(aux)





.. image:: /_examples/tutorial/guide/images/sphx_glr_plot_step_02_001.png
    :alt: Time-series $1M_{1}$
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Temporal (ITI):
    sensitivity specimen_code microorganism_name antimicrobial_name date_received  resistant  sensitive    freq      sari
    49                 URICUL   escherichia coli          augmentin    2009-01-31        5.0       32.0    37.0  0.135135
    50                 URICUL   escherichia coli          augmentin    2009-02-28        6.0       50.0    56.0  0.107143
    51                 URICUL   escherichia coli          augmentin    2009-03-31       27.0      909.0   936.0  0.028846
    52                 URICUL   escherichia coli          augmentin    2009-04-30       21.0      830.0   851.0  0.024677
    53                 URICUL   escherichia coli          augmentin    2009-05-31       49.0      834.0   883.0  0.055493
    54                 URICUL   escherichia coli          augmentin    2009-06-30       65.0      867.0   932.0  0.069742
    55                 URICUL   escherichia coli          augmentin    2009-07-31       55.0      848.0   903.0  0.060908
    56                 URICUL   escherichia coli          augmentin    2009-08-31       58.0      820.0   878.0  0.066059
    57                 URICUL   escherichia coli          augmentin    2009-09-30       62.0      951.0  1013.0  0.061204
    58                 URICUL   escherichia coli          augmentin    2009-10-31       56.0      948.0  1004.0  0.055777
    59                 URICUL   escherichia coli          augmentin    2009-11-30      103.0      775.0   878.0  0.117312
    60                 URICUL   escherichia coli          augmentin    2009-12-31       95.0      697.0   792.0  0.119949




.. GENERATED FROM PYTHON SOURCE LINES 161-186

Computing ASAI timeseries
-------------------------

.. warning::

      - Computing ASAI needs lots of consistent data!
      - What if species do not appear on all time periods?

Once we have computed ``SARI`` on a temporal fashion, it is possible
to use such information to compute ``ASAI`` in a temporal fashion too.
However, as explained in the previous tutorial, in order to compute
``ASAI``, we need to at least have columns with the following
information:

  - ``antimicrobial``
  - ``microorganism genus``
  - ``microorganism species``
  - ``resistance``

Moreover, in this example we will compute the ASAI for each ``gram_stain`` category
independently so we will need the microorganism gram stain information too. This
information is available in the registries: :py:mod:`pyamr.datasets.registries`.

Lets include all this information using the ``MicroorganismRegistry``.


.. GENERATED FROM PYTHON SOURCE LINES 187-213

.. code-block:: default
   :lineno-start: 188


    # ------------------------------
    # Include gram stain
    # ------------------------------
    # Libraries
    from pyamr.datasets.registries import MicroorganismRegistry

    # Load registry
    mreg = MicroorganismRegistry()

    # Format sari dataframe
    dataframe = iti.copy(deep=True)
    dataframe = dataframe.reset_index()

    # Create genus and species
    dataframe[['genus', 'species']] = \
        dataframe.microorganism_name \
            .str.capitalize() \
            .str.split(expand=True, n=1)

    # Combine with registry information
    dataframe = mreg.combine(dataframe)

    # Fill missing gram stain
    dataframe.gram_stain = dataframe.gram_stain.fillna('u')








.. GENERATED FROM PYTHON SOURCE LINES 214-225

Now that we have the ``genus``, ``species`` and ``gram_stain`` information,
lets see how compute ``ASAI`` in a temporal fashion with an example. It is
important to highlight that now the date (``date_received``) is also included
in the groupby parameter when calling the compute method.

For more information see: :py:mod:`pyamr.core.asai.ASAI`

For more examples see:

  - :ref:`sphx_glr__examples_indexes_plot_spectrum_temporal.py`.


.. GENERATED FROM PYTHON SOURCE LINES 226-256

.. code-block:: default
   :lineno-start: 227


    # -------------------------------------------
    # Compute ASAI
    # -------------------------------------------
    # Import specific libraries
    from pyamr.core.asai import ASAI

    # Create asai instance
    asai = ASAI(column_genus='genus',
                column_specie='species',
                column_resistance='sari',
                column_frequency='freq')

    # Compute
    scores = asai.compute(dataframe,
        groupby=['date_received',
                 'specimen_code',
                 'antimicrobial_name',
                 'gram_stain'],
        weights='uniform',
        threshold=0.5,
        min_freq=0)

    # Stack
    scores = scores

    # Show
    print("\nASAI (overall):")
    print(scores.unstack())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:527: UserWarning:


                     Extreme resistances were found in the DataFrame. These rows
                     should be reviewed since these resistances might correspond
                     to pairs with low number of records.


    c:\users\kelda\desktop\repositories\github\pyamr\main\pyamr\core\asai.py:538: UserWarning:


                     There are NULL values in columns that are required. These
                     rows will be ignored to safely compute ASAI. Please review
                     the DataFrame and address this inconsistencies. See below
                     for more information: 

                            date_received          0
                            specimen_code          0
                            antimicrobial_name     0
                            gram_stain             0
                            GENUS                  0
                            SPECIE                85
                            RESISTANCE             0



    ASAI (overall):
                                                   N_GENUS      N_SPECIE      ASAI_SCORE      
    gram_stain                                           n    p        n    p          n     p
    date_received specimen_code antimicrobial_name                                            
    2009-01-31    URICUL        augmentin              2.0  2.0      2.0  3.0   0.500000  1.00
    2009-02-28    URICUL        augmentin              2.0  2.0      2.0  2.0   0.500000  1.00
    2009-03-31    URICUL        augmentin              1.0  2.0      1.0  5.0   1.000000  1.00
    2009-04-30    URICUL        augmentin              3.0  2.0      3.0  6.0   0.666667  1.00
    2009-05-31    URICUL        augmentin              3.0  2.0      3.0  5.0   0.666667  1.00
    2009-06-30    URICUL        augmentin              3.0  2.0      3.0  4.0   0.333333  1.00
    2009-07-31    URICUL        augmentin              4.0  2.0      4.0  6.0   0.250000  1.00
    2009-08-31    URICUL        augmentin              1.0  2.0      1.0  5.0   1.000000  1.00
    2009-09-30    URICUL        augmentin              2.0  2.0      2.0  4.0   0.500000  1.00
    2009-10-31    URICUL        augmentin              1.0  2.0      1.0  6.0   1.000000  1.00
    2009-11-30    URICUL        augmentin              3.0  2.0      3.0  5.0   0.333333  0.75
    2009-12-31    URICUL        augmentin              2.0  2.0      2.0  4.0   0.500000  1.00




.. GENERATED FROM PYTHON SOURCE LINES 257-259

Let's plot the evolution of a single combination ...


.. GENERATED FROM PYTHON SOURCE LINES 260-324

.. code-block:: default
   :lineno-start: 261


    # Libraries
    import calendar

    # Month numbers to abbr
    def month_abbr(v):
        return [calendar.month_abbr[x] for x in v]

    # --------------
    # Filter
    # --------------
    # Filter and drop index.
    scores = scores.filter(like='URICUL', axis=0)
    scores = scores.filter(like='augmentin', axis=0)
    scores.index = scores.index.droplevel(level=[1,2])

    # Show
    print("\nASAI (overall):")
    print(scores.unstack())

    # ----------
    # Plot
    # ----------
    # Initialize the matplotlib figure
    f, ax = plt.subplots(figsize=(6, 6))

    # Show
    sns.lineplot(data=scores, x='date_received', y='ASAI_SCORE',
                 hue='gram_stain', palette="tab10", linewidth=0.75,
                 linestyle='--', marker='o', markersize=3,
                 markeredgecolor='k', markeredgewidth=0.5,
                 markerfacecolor=None, alpha=0.5)#, ax=axes[0])

    # Create aux table for visualization
    aux = scores[['N_GENUS', 'N_SPECIE']] \
         .unstack().T.round(0) \
         .astype(str).replace({'nan': '-'})

    # Rename columns
    aux.columns = month_abbr(range(1, len(aux.columns)+1))

    # Draw table
    table = plt.table(cellText=aux.to_numpy(),
                      rowLabels=aux.index,
                      colLabels=aux.columns,
                      cellLoc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(7.5)
    table.scale(1, 1.2)

    # Sns config
    sns.despine(left=True, bottom=True)

    # Add a legend and informative axis label
    ax.set(xlabel='', ylabel='ASAI', xticks=[],
           title="ASAI evolution 2009")

    # Tight layout()
    plt.tight_layout()

    # Show
    plt.show()





.. image:: /_examples/tutorial/guide/images/sphx_glr_plot_step_02_002.png
    :alt: ASAI evolution 2009
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ASAI (overall):
                  N_GENUS      N_SPECIE      ASAI_SCORE      
    gram_stain          n    p        n    p          n     p
    date_received                                            
    2009-01-31        2.0  2.0      2.0  3.0   0.500000  1.00
    2009-02-28        2.0  2.0      2.0  2.0   0.500000  1.00
    2009-03-31        1.0  2.0      1.0  5.0   1.000000  1.00
    2009-04-30        3.0  2.0      3.0  6.0   0.666667  1.00
    2009-05-31        3.0  2.0      3.0  5.0   0.666667  1.00
    2009-06-30        3.0  2.0      3.0  4.0   0.333333  1.00
    2009-07-31        4.0  2.0      4.0  6.0   0.250000  1.00
    2009-08-31        1.0  2.0      1.0  5.0   1.000000  1.00
    2009-09-30        2.0  2.0      2.0  4.0   0.500000  1.00
    2009-10-31        1.0  2.0      1.0  6.0   1.000000  1.00
    2009-11-30        3.0  2.0      3.0  5.0   0.333333  0.75
    2009-12-31        2.0  2.0      2.0  4.0   0.500000  1.00




.. GENERATED FROM PYTHON SOURCE LINES 325-328

Considerations
--------------



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.491 seconds)


.. _sphx_glr_download__examples_tutorial_guide_plot_step_02.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_step_02.py <plot_step_02.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_step_02.ipynb <plot_step_02.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

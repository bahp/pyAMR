# This workflow runs everytime a push is done to the project,
# and it could be in either develop, release or main branches.
# This workflow will install Python dependencies, run linkt,
# run tests and upload coverage.
#
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  #push:
  #  branches: [ main, develop ]
  #pull_request:
  #  branches: [ main, develop ]

  push:
    branches: [ '**' ] # All branches
  pull_request:
    branches: [ '**' ] # All branches.
  release:
    types: [ created ]

jobs:
  build:

    #runs-on: ubuntu-latest
    #strategy:
    #  fail-fast: false
    #  matrix:
    #    python-version: [3.7, 3.8, 3.9]

    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest] #, macos-latest]
        python-version: [3.9, 3.10]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    # .. todo: Check if requirements.txt exists
    #          if ( -f requirements.txt ); then xxxxxx; fi
    #          works for ubuntu, mac, breaks for windows
    #.         windows-latest takes to long - removed
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        python -m pip install -r requirements.txt

    # Install this package
    - name: Install package
      run: |
        python -m pip install .

    # Lint with Flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Run tests with pytest (see pytest.ini)
    - name: Test with pytest
      run: |
        python -m pip install pytest
        python -m pip install pytest-cov
        python -m pip install mock
        pytest --cov-report xml

    # .. note: Since there pytest.ini already includes the
    #          flags below it should have created the coverage
    #          report on the previous step.

    # Generate coverage report (not need due to pystet.ini)
    #- name: Generate coverage report (pytest)
    #  run:
    #    pytest . --cov=pyamr --cov-report=xml

    # Create an upload coverage report
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3.1.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml

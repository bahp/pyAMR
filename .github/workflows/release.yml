name: GitHub Release

#on:
#  #release:
#  #  types: [created]   # Default
#  #  types: [published] # Recommended
#  push:
#    branches: [ main ]  # Exclude develop!
#  pull_request:
#    branches: [ main ]  # Exclude develop!

on:

  # .. note: There can be many tags, which can be created directly
  #          from the terminal. However, not all tags are completed
  #          with a release. Note that when creating a release, for
  #          example using the github interface, it has a tag
  #          associated.
  #          from the

  #workflow_run:
  #  workflow: ['Python package']
  #  types: [completed]
  #  branches: [ 'release/**' ]

  # .. note:: This would much any tag creation such as v0.1.

  push:
    tags:
      - "*"

jobs:
  package:
    uses: ./.github/workflows/package.yml

  release:
    needs: [package]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      # Extract global variables
      - name: Extract variables
        id: vars
        run: |
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo ${{ github.ref_name }}

      # Update version in pyproject.toml
      - name: Update version in pyproject.toml
        run: |
          echo ${{ steps.vars.outputs.tag }}
          sed -i "s/{{VERSION_PLACEHOLDER}}/${{ steps.vars.outputs.tag }}/g" pyproject.toml

      # Build distribution
      - name: Build distribution
        run: |
          python -m pip install build
          #python setup.py sdist bdist_wheel # old (setup.cfg)
          python -m build --sdist --wheel    # new (pyproject.toml)

      #- name: Extract variables from setup.py
      #  run: |
      #    echo "FULLNAME=$(python setup.py --fullname)" >> $GITHUB_ENV
      #    echo "VERSION=$(python setup.py --version)" >> $GITHUB_ENV

      # .. note:: When pushing a tag from the command this would create the
      #           github release associated to the tag. However, when using
      #           the interface we are creating a full release and therefore
      #           raises an error.

      # Create github release
      - name: Create GitHub release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: v${{ steps.vars.outputs.tag }}

      # Include additional asset to release
      - name: Upload GitHub release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./dist/pyamr-${{ steps.vars.outputs.tag }}.tar.gz
          asset_name: pyamr-${{ steps.vars.outputs.tag }}.tar.gz
          asset_content_type: application/gzip

      # Publish on TestPyPI
      - name: Publish package on TestPyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install setuptools wheel twine
          twine upload -r testpypi dist/*
